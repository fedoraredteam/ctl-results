{
    "results": {
        "usr/bin/otfview": {
            "report-functions": [
                "XCopyArea", 
                "FT_Load_Glyph", 
                "OTF_drive_gpos_with_log", 
                "XScreenNumberOfScreen", 
                "FT_New_Face", 
                "XCreatePixmap", 
                "XtScreen", 
                "XtParseTranslationTable", 
                "exit", 
                "XtWindow", 
                "XDrawLine", 
                "XInitImage", 
                "_ITM_deregisterTMCloneTable", 
                "__stack_chk_fail", 
                "strtol", 
                "__xpg_basename", 
                "XTextWidth", 
                "fopen", 
                "__strcat_chk", 
                "__fprintf_chk", 
                "XPutImage", 
                "_ITM_registerTMCloneTable", 
                "__sprintf_chk", 
                "OTF_drive_gdef", 
                "XLoadQueryFont", 
                "XtOpenApplication", 
                "XSetFont", 
                "free", 
                "XtInstallAllAccelerators", 
                "_Jv_RegisterClasses", 
                "fputc", 
                "__printf_chk", 
                "OTF_get_variation_glyphs", 
                "XtGetValues", 
                "strlen", 
                "XtRealizeWidget", 
                "malloc", 
                "FT_Set_Pixel_Sizes", 
                "XSetWMName", 
                "XtAppSetExitFlag", 
                "FT_Init_FreeType", 
                "XtAppMainLoop", 
                "strstr", 
                "fflush", 
                "XtWidgetToApplicationContext", 
                "OTF_drive_gsub_alternate", 
                "__gmon_start__", 
                "XtDisplay", 
                "OTF_open_ft_face", 
                "strcmp", 
                "XDrawString", 
                "OTF_tag", 
                "XtSetValues", 
                "__libc_start_main", 
                "XtAddCallback", 
                "FT_Set_Charmap", 
                "XtParseAcceleratorTable", 
                "XtCreateManagedWidget", 
                "OTF_get_table", 
                "OTF_check_table", 
                "puts", 
                "memset", 
                "XDrawRectangle", 
                "fclose", 
                "XFillRectangle", 
                "getenv", 
                "OTF_tag_name", 
                "OTF_drive_gsub_with_log", 
                "OTF_close", 
                "memcpy", 
                "XtAppAddActions", 
                "XSetErrorHandler", 
                "OTF_drive_cmap", 
                "XCreateGC"
            ], 
            "rpm": "libotf-0.9.13-4.el7.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, normal executable!", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "no, not found!"
            }, 
            "filename": "usr/bin/otfview"
        }, 
        "usr/bin/otfdump": {
            "report-functions": [
                "OTF_get_table", 
                "OTF_perror", 
                "__printf_chk", 
                "_ITM_deregisterTMCloneTable", 
                "OTF_open", 
                "strcmp", 
                "exit", 
                "puts", 
                "__fprintf_chk", 
                "_ITM_registerTMCloneTable", 
                "__libc_start_main", 
                "free", 
                "OTF_close", 
                "putchar", 
                "malloc", 
                "_IO_putc", 
                "__gmon_start__"
            ], 
            "rpm": "libotf-0.9.13-4.el7.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, normal executable!", 
                " Stack protected": "no, not found!", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "no, not found!"
            }, 
            "filename": "usr/bin/otfdump"
        }, 
        "usr/lib/libotf_so_0_0_0": {
            "report-functions": [
                "calloc", 
                "strcmp", 
                "free", 
                "__strdup", 
                "_ITM_registerTMCloneTable", 
                "fopen", 
                "memcmp", 
                "__fprintf_chk", 
                "_ITM_deregisterTMCloneTable", 
                "strlen", 
                "memmove", 
                "fputc", 
                "fread", 
                "malloc", 
                "_Jv_RegisterClasses", 
                "FT_Load_Sfnt_Table", 
                "strncasecmp", 
                "__stack_chk_fail", 
                "__sprintf_chk", 
                "fseek", 
                "__cxa_finalize", 
                "getenv", 
                "fclose", 
                "memset", 
                "memcpy", 
                "fwrite"
            ], 
            "rpm": "libotf-0.9.13-4.el7.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "no, not found!"
            }, 
            "filename": "usr/lib/libotf.so.0.0.0"
        }, 
        "usr/bin/otflist": {
            "report-functions": [
                "OTF_get_table", 
                "OTF_tag_name", 
                "strcmp", 
                "scandir", 
                "FT_New_Face", 
                "_ITM_registerTMCloneTable", 
                "__gmon_start__", 
                "strlen", 
                "chdir", 
                "putchar", 
                "exit", 
                "_ITM_deregisterTMCloneTable", 
                "puts", 
                "FT_Init_FreeType", 
                "_Jv_RegisterClasses", 
                "alphasort", 
                "__sprintf_chk", 
                "__fprintf_chk", 
                "__libc_start_main", 
                "__stack_chk_fail", 
                "OTF_close"
            ], 
            "rpm": "libotf-0.9.13-4.el7.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, normal executable!", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "no, not found!"
            }, 
            "filename": "usr/bin/otflist"
        }, 
        "usr/bin/otftobdf": {
            "report-functions": [
                "strtol", 
                "FT_Init_FreeType", 
                "_Jv_RegisterClasses", 
                "__printf_chk", 
                "FT_Load_Glyph", 
                "puts", 
                "__isoc99_sscanf", 
                "__fprintf_chk", 
                "FT_Get_Char_Index", 
                "__sprintf_chk", 
                "__libc_start_main", 
                "FT_Set_Pixel_Sizes", 
                "exit", 
                "__gmon_start__", 
                "FT_Set_Charmap", 
                "FT_New_Face", 
                "_ITM_registerTMCloneTable", 
                "putchar"
            ], 
            "rpm": "libotf-0.9.13-4.el7.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, normal executable!", 
                " Stack protected": "no, not found!", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "no, not found!"
            }, 
            "filename": "usr/bin/otftobdf"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Version": " 0.9.13", 
            "Name": " libotf", 
            "License": " LGPLv2+", 
            "URL": " http://www.nongnu.org/m17n/", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " x86-024.build.eng.bos.redhat.com", 
            "Description": "\nThe library \"libotf\" provides the following facilites.\nRead Open Type Layout Tables from OTF file. Currently these tables are\nsupported; head, name, cmap, GDEF, GSUB, and GPOS.  Convert a Unicode\ncharacter sequence to a glyph code sequence by using the above tables.\nThe combination of libotf and the FreeType library (Ver.2) realizes\nCTL (complex text layout) by OpenType fonts. This library is currently\nused by the m17n library. It seems that the probject Free Type Layout\nprovides the similar (or better) facility as this library, but\ncurrently they have not yet released their library. So, we have\ndeveloped this one.\n", 
            "Build Date": " Sun 26 Jan 2014 07:51:49 AM EST", 
            "Vendor": " Red Hat, Inc.", 
            "Source RPM": " libotf-0.9.13-4.el7.src.rpm", 
            "warning": " /home/jason/fctl/swap/1/libotf-0.9.13-4.el7.i686.rpm: Header V3 RSA/SHA256 Signature, key ID fd431d51: NOKEY", 
            "Architecture": " i686", 
            "Signature": " RSA/SHA256, Tue 01 Apr 2014 05:47:36 PM EDT, Key ID 199e2f91fd431d51", 
            "Release": " 4.el7", 
            "Group": " System Environment/Libraries", 
            "Packager": " Red Hat, Inc. <http://bugzilla.redhat.com/bugzilla>", 
            "Summary": " A Library for handling OpenType Font", 
            "Size": " 206228"
        }
    }
}