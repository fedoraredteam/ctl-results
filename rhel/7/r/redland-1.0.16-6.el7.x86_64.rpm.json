{
    "results": {
        "usr/lib64/librdf_so_0_0_0": {
            "find-libc-functions": [
                "GI___obstack_vprintf", 
                "GI___vasprintf", 
                "GI___vdprintf", 
                "GI___vfprintf", 
                "GI___vfwprintf", 
                "GI___vsnprintf", 
                "GI___vsprintf", 
                "GI___vswprintf", 
                "GI___vsyslog", 
                "__longjmp", 
                "_fprintf", 
                "_printf", 
                "_snprintf", 
                "_sprintf", 
                "_vfprintf", 
                "_vprintf", 
                "_vsnprintf", 
                "_vsprintf", 
                "asprintf", 
                "confstr", 
                "dprintf", 
                "explicit_bzero", 
                "fdelt", 
                "fgets", 
                "fgets_unlocked", 
                "fgetws", 
                "fgetws_unlocked", 
                "fprintf", 
                "fread", 
                "fread_unlocked", 
                "fwprintf", 
                "getcwd", 
                "getdomainname", 
                "getgroups", 
                "gethostname", 
                "getlogin_r", 
                "gets", 
                "getwd", 
                "longjmp", 
                "mbsnrtowcs", 
                "mbsrtowcs", 
                "mbstowcs", 
                "memcpy", 
                "memmove", 
                "mempcpy", 
                "memset", 
                "obstack_printf", 
                "obstack_vprintf", 
                "poll", 
                "ppoll", 
                "pread64", 
                "pread", 
                "printf", 
                "ptsname_r", 
                "read", 
                "readlink", 
                "readlinkat", 
                "realpath", 
                "recv", 
                "recvfrom", 
                "snprintf", 
                "sprintf", 
                "stpcpy", 
                "stpncpy", 
                "strcat", 
                "strcpy", 
                "strncat", 
                "strncpy", 
                "swprintf", 
                "syslog", 
                "ttyname_r", 
                "vasprintf", 
                "vdprintf", 
                "vfprintf", 
                "vfwprintf", 
                "vprintf", 
                "vsnprintf", 
                "vsprintf", 
                "vswprintf", 
                "vsyslog", 
                "vwprintf", 
                "wcpcpy", 
                "wcpncpy", 
                "wcrtomb", 
                "wcscat", 
                "wcscpy", 
                "wcsncat", 
                "wcsncpy", 
                "wcsnrtombs", 
                "wcsrtombs", 
                "wcstombs", 
                "wctomb", 
                "wmemcpy", 
                "wmemmove", 
                "wmempcpy", 
                "wmemset", 
                "wprintf"
            ], 
            "filename": "usr/lib64/librdf.so.0.0.0", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "no, not found!"
            }, 
            "report-functions": [
                "rasqal_query_results_next", 
                "rasqal_query_execute", 
                "rasqal_new_string_literal", 
                "raptor_serializer_get_world", 
                "rasqal_query_results_finished", 
                "raptor_free_sequence", 
                "raptor_new_uri_relative_to_base", 
                "raptor_free_avltree", 
                "raptor_free_statement", 
                "raptor_parser_get_accept_header", 
                "raptor_uri_filename_to_uri_string", 
                "rasqal_free_query_results_formatter", 
                "raptor_world_get_parser_description", 
                "rasqal_world_set_raptor", 
                "rasqal_new_data_graph_from_uri", 
                "raptor_parser_get_description", 
                "raptor_calloc_memory", 
                "rasqal_new_query", 
                "raptor_avltree_iterator_next", 
                "rasqal_query_results_get_count", 
                "strrchr", 
                "raptor_uri_uri_string_to_filename", 
                "raptor_www_set_http_accept", 
                "raptor_parser_parse_iostream", 
                "rasqal_query_results_is_syntax", 
                "rasqal_query_results_get_boolean", 
                "rasqal_query_get_user_data", 
                "free", 
                "mkstemp", 
                "raptor_free_world", 
                "rasqal_new_simple_literal", 
                "rasqal_query_results_formatter_write", 
                "raptor_unicode_utf8_string_get_char", 
                "raptor_serializer_start_to_iostream", 
                "rasqal_new_uri_literal", 
                "rasqal_free_query", 
                "strncpy", 
                "raptor_www_abort", 
                "raptor_free_stringbuffer", 
                "_ITM_registerTMCloneTable", 
                "_Jv_RegisterClasses", 
                "malloc", 
                "raptor_serializer_set_option", 
                "raptor_serializer_start_to_file_handle", 
                "__errno_location", 
                "getpid", 
                "fputs", 
                "strtol", 
                "raptor_sequence_get_at", 
                "raptor_namespace_get_counted_prefix", 
                "raptor_uri_get_world", 
                "raptor_new_avltree_iterator", 
                "raptor_new_uri_from_uri_local_name", 
                "raptor_free_www", 
                "raptor_statement_clear", 
                "lt_dlopenext", 
                "rasqal_query_get_offset", 
                "raptor_uri_to_counted_string", 
                "__sprintf_chk", 
                "raptor_free_iostream", 
                "rasqal_literal_get_rdf_term_type", 
                "lt_dlgetsearchpath", 
                "strncmp", 
                "raptor_new_serializer", 
                "lt_dlforeachfile", 
                "rasqal_set_triples_source_factory", 
                "rasqal_new_world", 
                "raptor_sequence_pop", 
                "raptor_parser_parse_chunk", 
                "strlen", 
                "raptor_new_avltree", 
                "raptor_world_guess_parser_name", 
                "raptor_sequence_push", 
                "raptor_new_term_from_blank", 
                "rasqal_query_results_is_bindings", 
                "db_create", 
                "raptor_serializer_get_option", 
                "gettimeofday", 
                "rasqal_query_results_is_boolean", 
                "rasqal_query_results_formats_check", 
                "abort", 
                "__snprintf_chk", 
                "__cxa_finalize", 
                "lt_dlinit", 
                "rasqal_query_results_next_triple", 
                "fputc", 
                "raptor_vasprintf", 
                "raptor_new_parser", 
                "raptor_avltree_search", 
                "rasqal_query_get_data_graph_sequence", 
                "lt_dlexit", 
                "calloc", 
                "raptor_parser_parse_start", 
                "getenv", 
                "lt_dlclose", 
                "raptor_world_open", 
                "raptor_uri_compare", 
                "raptor_iostream_string_write", 
                "raptor_uri_equals", 
                "rasqal_query_prepare", 
                "raptor_stringbuffer_length", 
                "rasqal_new_query_results_formatter", 
                "feof", 
                "memcmp", 
                "raptor_parser_set_namespace_handler", 
                "raptor_world_get_serializer_description", 
                "fopen", 
                "rasqal_query_results_get_binding_name", 
                "rasqal_world_open", 
                "raptor_world_set_log_handler", 
                "raptor_www_set_write_bytes_handler", 
                "raptor_new_iostream_to_string", 
                "rasqal_world_get_query_results_format_description", 
                "rasqal_free_data_graph", 
                "rasqal_free_memory", 
                "raptor_avltree_add", 
                "lt_dlsetsearchpath", 
                "raptor_world_set_generate_bnodeid_handler", 
                "raptor_free_term", 
                "raptor_parser_get_option", 
                "rasqal_query_set_user_data", 
                "strstr", 
                "raptor_new_term_from_uri_string", 
                "lt_dlsym", 
                "close", 
                "rasqal_query_results_is_graph", 
                "rasqal_query_get_limit", 
                "rasqal_variable_set_value", 
                "raptor_stringbuffer_copy_to_string", 
                "raptor_www_fetch", 
                "raptor_new_term_from_counted_literal", 
                "raptor_uri_uri_string_is_file_uri", 
                "raptor_new_term_from_counted_blank", 
                "raptor_stringbuffer_append_counted_string", 
                "rename", 
                "rasqal_query_add_data_graph", 
                "unlink", 
                "rasqal_query_set_limit", 
                "raptor_avltree_iterator_get", 
                "rasqal_literal_as_variable", 
                "raptor_statement_copy", 
                "raptor_sequence_size", 
                "raptor_uri_as_counted_string", 
                "raptor_uri_as_string", 
                "rasqal_query_results_get_binding_value_by_name", 
                "fwrite", 
                "raptor_new_www", 
                "__strdup", 
                "raptor_serializer_serialize_end", 
                "raptor_statement_equals", 
                "raptor_new_world_internal", 
                "rasqal_free_world", 
                "raptor_alloc_memory", 
                "raptor_new_term_from_counted_uri_string", 
                "raptor_free_parser", 
                "raptor_new_statement_from_nodes", 
                "raptor_new_uri_for_rdf_concept", 
                "raptor_locator_format", 
                "raptor_new_uri", 
                "strerror", 
                "raptor_new_uri_from_counted_string", 
                "raptor_parser_set_option", 
                "raptor_new_iostream_to_file_handle", 
                "raptor_parser_set_uri_filter", 
                "raptor_parser_parse_file", 
                "raptor_parser_parse_file_stream", 
                "raptor_new_statement", 
                "memset", 
                "rasqal_world_set_log_handler", 
                "raptor_free_uri", 
                "rasqal_query_results_get_bindings_count", 
                "raptor_iostream_write_byte", 
                "__stack_chk_fail", 
                "rasqal_alloc_memory", 
                "raptor_uri_copy", 
                "fread", 
                "db_strerror", 
                "raptor_free_avltree_iterator", 
                "raptor_world_get_option_from_uri", 
                "strcmp", 
                "raptor_new_term_from_uri", 
                "__ctype_b_loc", 
                "rasqal_query_results_get_triple", 
                "raptor_new_stringbuffer", 
                "raptor_term_copy", 
                "raptor_new_sequence", 
                "raptor_parser_set_statement_handler", 
                "raptor_parser_parse_uri", 
                "raptor_free_memory", 
                "raptor_unicode_utf8_string_put_char", 
                "raptor_free_serializer", 
                "raptor_term_equals", 
                "__gmon_start__", 
                "raptor_avltree_iterator_is_end", 
                "rasqal_free_query_results", 
                "raptor_avltree_delete", 
                "strcpy", 
                "raptor_serializer_serialize_statement", 
                "__fprintf_chk", 
                "raptor_avltree_size", 
                "rasqal_query_results_get_binding_value", 
                "raptor_statement_init", 
                "raptor_new_term_from_literal", 
                "_ITM_deregisterTMCloneTable", 
                "rasqal_query_set_offset", 
                "raptor_iostream_counted_string_write", 
                "raptor_serializer_set_namespace", 
                "memcpy", 
                "lt_dlgetinfo", 
                "rasqal_query_results_get_bindings", 
                "rasqal_world_get_query_language_description", 
                "raptor_namespace_get_uri", 
                "access"
            ], 
            "rpm": "redland-1.0.16-6.el7.x86_64.rpm"
        }, 
        "usr/lib64/redland/librdf_storage_sqlite_so": {
            "find-libc-functions": [
                "GI___obstack_vprintf", 
                "GI___vasprintf", 
                "GI___vdprintf", 
                "GI___vfprintf", 
                "GI___vfwprintf", 
                "GI___vsnprintf", 
                "GI___vsprintf", 
                "GI___vswprintf", 
                "GI___vsyslog", 
                "__longjmp", 
                "_fprintf", 
                "_printf", 
                "_snprintf", 
                "_sprintf", 
                "_vfprintf", 
                "_vprintf", 
                "_vsnprintf", 
                "_vsprintf", 
                "asprintf", 
                "confstr", 
                "dprintf", 
                "explicit_bzero", 
                "fdelt", 
                "fgets", 
                "fgets_unlocked", 
                "fgetws", 
                "fgetws_unlocked", 
                "fprintf", 
                "fread", 
                "fread_unlocked", 
                "fwprintf", 
                "getcwd", 
                "getdomainname", 
                "getgroups", 
                "gethostname", 
                "getlogin_r", 
                "gets", 
                "getwd", 
                "longjmp", 
                "mbsnrtowcs", 
                "mbsrtowcs", 
                "mbstowcs", 
                "memcpy", 
                "memmove", 
                "mempcpy", 
                "memset", 
                "obstack_printf", 
                "obstack_vprintf", 
                "poll", 
                "ppoll", 
                "pread64", 
                "pread", 
                "printf", 
                "ptsname_r", 
                "read", 
                "readlink", 
                "readlinkat", 
                "realpath", 
                "recv", 
                "recvfrom", 
                "snprintf", 
                "sprintf", 
                "stpcpy", 
                "stpncpy", 
                "strcat", 
                "strcpy", 
                "strncat", 
                "strncpy", 
                "swprintf", 
                "syslog", 
                "ttyname_r", 
                "vasprintf", 
                "vdprintf", 
                "vfprintf", 
                "vfwprintf", 
                "vprintf", 
                "vsnprintf", 
                "vsprintf", 
                "vswprintf", 
                "vsyslog", 
                "vwprintf", 
                "wcpcpy", 
                "wcpncpy", 
                "wcrtomb", 
                "wcscat", 
                "wcscpy", 
                "wcsncat", 
                "wcsncpy", 
                "wcsnrtombs", 
                "wcsrtombs", 
                "wcstombs", 
                "wctomb", 
                "wmemcpy", 
                "wmemmove", 
                "wmempcpy", 
                "wmemset", 
                "wprintf"
            ], 
            "filename": "usr/lib64/redland/librdf_storage_sqlite.so", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "no, not found!"
            }, 
            "report-functions": [
                "strcmp", 
                "librdf_stream_next", 
                "librdf_node_get_literal_value_as_counted_string", 
                "librdf_stream_get_object", 
                "librdf_new_node_from_typed_literal", 
                "librdf_new_node_from_uri_string", 
                "malloc", 
                "librdf_node_get_literal_value_datatype_uri", 
                "librdf_node_get_uri", 
                "librdf_new_iterator", 
                "librdf_free_uri", 
                "_ITM_registerTMCloneTable", 
                "strlen", 
                "librdf_new_statement", 
                "access", 
                "sqlite3_close", 
                "librdf_new_stream", 
                "free", 
                "librdf_storage_set_instance", 
                "librdf_statement_get_predicate", 
                "librdf_hash_get_as_boolean", 
                "__fprintf_chk", 
                "sqlite3_step", 
                "librdf_storage_transaction_rollback", 
                "librdf_free_node", 
                "unlink", 
                "_Jv_RegisterClasses", 
                "__stack_chk_fail", 
                "librdf_node_get_literal_value_language", 
                "librdf_storage_register_factory", 
                "__sprintf_chk", 
                "sqlite3_free", 
                "_ITM_deregisterTMCloneTable", 
                "librdf_stream_get_context2", 
                "librdf_new_node_from_node", 
                "raptor_stringbuffer_length", 
                "librdf_statement_get_subject", 
                "sqlite3_open", 
                "librdf_node_get_blank_identifier", 
                "librdf_statement_set_object", 
                "librdf_uri_as_string", 
                "librdf_new_statement_from_statement", 
                "librdf_statement_clear", 
                "strcpy", 
                "__gmon_start__", 
                "sqlite3_finalize", 
                "strncpy", 
                "librdf_storage_remove_reference", 
                "librdf_free_statement", 
                "raptor_new_stringbuffer", 
                "raptor_free_stringbuffer", 
                "raptor_stringbuffer_as_string", 
                "librdf_storage_add_reference", 
                "sqlite3_prepare", 
                "sqlite3_exec", 
                "raptor_stringbuffer_append_string", 
                "calloc", 
                "sqlite3_errmsg", 
                "librdf_statement_set_subject", 
                "strtol", 
                "librdf_log", 
                "librdf_statement_get_object", 
                "librdf_new_uri", 
                "librdf_storage_transaction_commit", 
                "librdf_uri_as_counted_string", 
                "__cxa_finalize", 
                "librdf_hash_get", 
                "sqlite3_last_insert_rowid", 
                "raptor_stringbuffer_append_counted_string", 
                "sqlite3_column_text", 
                "raptor_stringbuffer_append_decimal", 
                "librdf_new_node_from_blank_identifier", 
                "librdf_statement_set_predicate", 
                "librdf_stream_end"
            ], 
            "rpm": "redland-1.0.16-6.el7.x86_64.rpm"
        }, 
        "usr/bin/rdfproc": {
            "find-libc-functions": [
                "GI___obstack_vprintf", 
                "GI___vasprintf", 
                "GI___vdprintf", 
                "GI___vfprintf", 
                "GI___vfwprintf", 
                "GI___vsnprintf", 
                "GI___vsprintf", 
                "GI___vswprintf", 
                "GI___vsyslog", 
                "__longjmp", 
                "_fprintf", 
                "_printf", 
                "_snprintf", 
                "_sprintf", 
                "_vfprintf", 
                "_vprintf", 
                "_vsnprintf", 
                "_vsprintf", 
                "asprintf", 
                "confstr", 
                "dprintf", 
                "explicit_bzero", 
                "fdelt", 
                "fgets", 
                "fgets_unlocked", 
                "fgetws", 
                "fgetws_unlocked", 
                "fprintf", 
                "fread", 
                "fread_unlocked", 
                "fwprintf", 
                "getcwd", 
                "getdomainname", 
                "getgroups", 
                "gethostname", 
                "getlogin_r", 
                "gets", 
                "getwd", 
                "longjmp", 
                "mbsnrtowcs", 
                "mbsrtowcs", 
                "mbstowcs", 
                "memcpy", 
                "memmove", 
                "mempcpy", 
                "memset", 
                "obstack_printf", 
                "obstack_vprintf", 
                "poll", 
                "ppoll", 
                "pread64", 
                "pread", 
                "printf", 
                "ptsname_r", 
                "read", 
                "readlink", 
                "readlinkat", 
                "realpath", 
                "recv", 
                "recvfrom", 
                "snprintf", 
                "sprintf", 
                "stpcpy", 
                "stpncpy", 
                "strcat", 
                "strcpy", 
                "strncat", 
                "strncpy", 
                "swprintf", 
                "syslog", 
                "ttyname_r", 
                "vasprintf", 
                "vdprintf", 
                "vfprintf", 
                "vfwprintf", 
                "vprintf", 
                "vsnprintf", 
                "vsprintf", 
                "vswprintf", 
                "vsyslog", 
                "vwprintf", 
                "wcpcpy", 
                "wcpncpy", 
                "wcrtomb", 
                "wcscat", 
                "wcscpy", 
                "wcsncat", 
                "wcsncpy", 
                "wcsnrtombs", 
                "wcsrtombs", 
                "wcstombs", 
                "wctomb", 
                "wmemcpy", 
                "wmemmove", 
                "wmempcpy", 
                "wmemset", 
                "wprintf"
            ], 
            "filename": "usr/bin/rdfproc", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, normal executable!", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "no, not found!"
            }, 
            "report-functions": [
                "librdf_query_results_finished", 
                "librdf_model_find_statements_with_options", 
                "librdf_free_parser", 
                "librdf_new_uri_from_uri", 
                "librdf_model_get_arcs_out", 
                "librdf_iterator_next", 
                "librdf_hash_from_string", 
                "librdf_new_world", 
                "_ITM_deregisterTMCloneTable", 
                "librdf_node_print", 
                "librdf_model_get_arc", 
                "librdf_iterator_get_object", 
                "librdf_model_contains_statement", 
                "strcmp", 
                "librdf_heuristic_get_blank_node", 
                "librdf_hash_open", 
                "puts", 
                "librdf_stream_get_object", 
                "__libc_start_main", 
                "librdf_new_model", 
                "librdf_free_model", 
                "librdf_free_serializer", 
                "librdf_serializer_get_description", 
                "librdf_free_world", 
                "librdf_new_query_results_formatter2", 
                "fputc", 
                "librdf_new_parser", 
                "librdf_query_results_get_boolean", 
                "librdf_heuristic_object_is_literal", 
                "librdf_query_results_formatter_write", 
                "librdf_free_query_results", 
                "librdf_hash_put_strings", 
                "__stack_chk_fail", 
                "librdf_stream_next", 
                "librdf_free_stream", 
                "feof", 
                "librdf_query_results_is_boolean", 
                "raptor_free_iostream", 
                "librdf_model_get_source", 
                "librdf_iterator_get_context", 
                "__gmon_start__", 
                "librdf_serializer_serialize_model_to_file_handle", 
                "librdf_node_get_literal_value", 
                "fwrite", 
                "librdf_free_node", 
                "librdf_model_context_add_statement", 
                "librdf_query_results_formats_get_description", 
                "librdf_model_query_execute", 
                "malloc", 
                "librdf_model_context_remove_statements", 
                "librdf_uri_as_string", 
                "librdf_statement_print", 
                "librdf_model_transaction_start", 
                "librdf_model_find_statements", 
                "raptor_free_memory", 
                "librdf_model_write", 
                "librdf_query_results_get_binding_value", 
                "librdf_model_has_arc_in", 
                "strncmp", 
                "librdf_model_find_statements_in_context", 
                "librdf_new_node_from_literal", 
                "fgetc", 
                "librdf_query_results_as_stream", 
                "librdf_model_get_sources", 
                "librdf_free_uri", 
                "librdf_model_get_arcs_in", 
                "librdf_new_hash", 
                "librdf_iterator_end", 
                "librdf_new_query", 
                "raptor_uri_filename_to_uri_string", 
                "__printf_chk", 
                "strtol", 
                "librdf_new_statement", 
                "librdf_query_results_formats_check", 
                "librdf_stream_end", 
                "librdf_model_context_remove_statement", 
                "free", 
                "librdf_new_storage_with_options", 
                "librdf_statement_set_subject", 
                "librdf_stream_get_context2", 
                "librdf_query_results_get_binding_name", 
                "librdf_new_node_from_blank_identifier", 
                "librdf_parser_parse_as_stream", 
                "getopt_long", 
                "librdf_parser_get_feature", 
                "librdf_model_add_statement", 
                "librdf_free_query_results_formatter", 
                "librdf_new_serializer", 
                "exit", 
                "librdf_statement_set_predicate", 
                "raptor_locator_print", 
                "librdf_model_remove_statement", 
                "librdf_new_statement_from_statement", 
                "librdf_model_get_target", 
                "librdf_query_results_is_bindings", 
                "librdf_model_get_targets", 
                "librdf_free_storage", 
                "librdf_query_results_get_count", 
                "librdf_new_node_from_uri_string", 
                "librdf_query_results_next", 
                "librdf_new_uri", 
                "strrchr", 
                "_IO_putc", 
                "librdf_model_size", 
                "strncpy", 
                "librdf_get_storage_factory", 
                "librdf_new_storage", 
                "librdf_world_set_logger", 
                "librdf_free_statement", 
                "librdf_query_results_is_graph", 
                "librdf_parser_parse_into_model", 
                "_ITM_registerTMCloneTable", 
                "librdf_model_add_statements", 
                "librdf_new_node_from_typed_literal", 
                "librdf_world_open", 
                "access", 
                "librdf_model_transaction_commit", 
                "librdf_heuristic_is_blank_node", 
                "librdf_statement_set_object", 
                "librdf_free_query", 
                "fputs", 
                "getenv", 
                "librdf_model_has_arc_out", 
                "_Jv_RegisterClasses", 
                "librdf_free_hash", 
                "librdf_model_get_contexts", 
                "__fprintf_chk", 
                "librdf_storage_enumerate", 
                "librdf_free_iterator"
            ], 
            "rpm": "redland-1.0.16-6.el7.x86_64.rpm"
        }, 
        "usr/bin/redland-db-upgrade": {
            "find-libc-functions": [
                "GI___obstack_vprintf", 
                "GI___vasprintf", 
                "GI___vdprintf", 
                "GI___vfprintf", 
                "GI___vfwprintf", 
                "GI___vsnprintf", 
                "GI___vsprintf", 
                "GI___vswprintf", 
                "GI___vsyslog", 
                "__longjmp", 
                "_fprintf", 
                "_printf", 
                "_snprintf", 
                "_sprintf", 
                "_vfprintf", 
                "_vprintf", 
                "_vsnprintf", 
                "_vsprintf", 
                "asprintf", 
                "confstr", 
                "dprintf", 
                "explicit_bzero", 
                "fdelt", 
                "fgets", 
                "fgets_unlocked", 
                "fgetws", 
                "fgetws_unlocked", 
                "fprintf", 
                "fread", 
                "fread_unlocked", 
                "fwprintf", 
                "getcwd", 
                "getdomainname", 
                "getgroups", 
                "gethostname", 
                "getlogin_r", 
                "gets", 
                "getwd", 
                "longjmp", 
                "mbsnrtowcs", 
                "mbsrtowcs", 
                "mbstowcs", 
                "memcpy", 
                "memmove", 
                "mempcpy", 
                "memset", 
                "obstack_printf", 
                "obstack_vprintf", 
                "poll", 
                "ppoll", 
                "pread64", 
                "pread", 
                "printf", 
                "ptsname_r", 
                "read", 
                "readlink", 
                "readlinkat", 
                "realpath", 
                "recv", 
                "recvfrom", 
                "snprintf", 
                "sprintf", 
                "stpcpy", 
                "stpncpy", 
                "strcat", 
                "strcpy", 
                "strncat", 
                "strncpy", 
                "swprintf", 
                "syslog", 
                "ttyname_r", 
                "vasprintf", 
                "vdprintf", 
                "vfprintf", 
                "vfwprintf", 
                "vprintf", 
                "vsnprintf", 
                "vsprintf", 
                "vswprintf", 
                "vsyslog", 
                "vwprintf", 
                "wcpcpy", 
                "wcpncpy", 
                "wcrtomb", 
                "wcscat", 
                "wcscpy", 
                "wcsncat", 
                "wcsncpy", 
                "wcsnrtombs", 
                "wcsrtombs", 
                "wcstombs", 
                "wctomb", 
                "wmemcpy", 
                "wmemmove", 
                "wmempcpy", 
                "wmemset", 
                "wprintf"
            ], 
            "filename": "usr/bin/redland-db-upgrade", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, normal executable!", 
                " Stack protected": "no, not found!", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "no, not found!"
            }, 
            "report-functions": [
                "librdf_stream_end", 
                "librdf_stream_get_object", 
                "_ITM_registerTMCloneTable", 
                "__libc_start_main", 
                "__gmon_start__", 
                "librdf_free_stream", 
                "librdf_world_open", 
                "librdf_heuristic_gen_name", 
                "librdf_new_model", 
                "librdf_new_world", 
                "librdf_stream_next", 
                "librdf_model_as_stream", 
                "librdf_free_storage", 
                "librdf_model_add_statement", 
                "librdf_free_world", 
                "__fprintf_chk", 
                "librdf_new_storage", 
                "_Jv_RegisterClasses", 
                "_ITM_deregisterTMCloneTable"
            ], 
            "rpm": "redland-1.0.16-6.el7.x86_64.rpm"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Version": " 1.0.16", 
            "Name": " redland", 
            "License": " LGPLv2+ or ASL 2.0", 
            "URL": " http://librdf.org/", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " x86-024.build.eng.bos.redhat.com", 
            "Description": "\nRedland is a library that provides a high-level interface for RDF\n(Resource Description Framework) implemented in an object-based API.\nIt is modular and supports different RDF/XML parsers, storage\nmechanisms and other elements. Redland is designed for applications\ndevelopers to provide RDF support in their applications as well as\nfor RDF developers to experiment with the technology.\n", 
            "Build Date": " Mon 27 Jan 2014 04:23:47 AM EST", 
            "Vendor": " Red Hat, Inc.", 
            "Source RPM": " redland-1.0.16-6.el7.src.rpm", 
            "warning": " /home/jason/fctl/swap/3/redland-1.0.16-6.el7.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID fd431d51: NOKEY", 
            "Architecture": " x86_64", 
            "Signature": " RSA/SHA256, Wed 02 Apr 2014 03:36:40 PM EDT, Key ID 199e2f91fd431d51", 
            "Release": " 6.el7", 
            "Group": " System Environment/Libraries", 
            "Packager": " Red Hat, Inc. <http://bugzilla.redhat.com/bugzilla>", 
            "Summary": " RDF Application Framework", 
            "Size": " 492000"
        }
    }
}