{
    "results": {
        "usr/lib64/libclassad_so_8_6_3": {
            "report-functions": [
                "ungetc", 
                "__stack_chk_fail", 
                "feof", 
                "__pthread_key_create", 
                "memset", 
                "__cxa_begin_catch", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEmm", 
                "__cxa_guard_release", 
                "_ZNSt8ios_base4InitD1Ev", 
                "write", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc", 
                "__vfprintf_chk", 
                "memcmp", 
                "_ZSt24__throw_out_of_range_fmtPKcz", 
                "_ZSt19__throw_logic_errorPKc", 
                "_Znwm", 
                "_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_", 
                "__cxa_finalize", 
                "_ZNSt8ios_baseD2Ev", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_", 
                "__sprintf_chk", 
                "memmove", 
                "_ZNSo9_M_insertImEERSoT_", 
                "gmtime_r", 
                "_ZNSt8__detail15_List_node_base7_M_hookEPS0_", 
                "strcasecmp", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm", 
                "mktime", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_", 
                "close", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm", 
                "toupper", 
                "__cxa_atexit", 
                "_ZSt17__throw_bad_allocv", 
                "__cxa_guard_acquire", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc", 
                "exit", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm", 
                "_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev", 
                "strtol", 
                "isalpha", 
                "getc", 
                "isprint", 
                "_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l", 
                "__gmon_start__", 
                "_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base", 
                "_ITM_deregisterTMCloneTable", 
                "pcre_exec", 
                "_ZNSo9_M_insertIxEERSoT_", 
                "__gxx_personality_v0", 
                "_ZNSt8ios_baseC2Ev", 
                "isspace", 
                "fopen", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcmm", 
                "dlopen", 
                "_ZSt16__throw_bad_castv", 
                "_ZNSt6localeC1Ev", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc", 
                "isalnum", 
                "strftime", 
                "__printf_chk", 
                "strtod", 
                "_ZSt11_Hash_bytesPKvmm", 
                "_ZNSo5flushEv", 
                "lseek", 
                "_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEmmm", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm", 
                "strncasecmp", 
                "_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev", 
                "_Unwind_Resume", 
                "__cxa_end_catch", 
                "tolower", 
                "__strcat_chk", 
                "isxdigit", 
                "fflush", 
                "lrand48", 
                "_ZSt20__throw_length_errorPKc", 
                "fgetc", 
                "_ZNSolsEi", 
                "__snprintf_chk", 
                "pcre_free_substring_list", 
                "strcmp", 
                "__fprintf_chk", 
                "_ZNSt8__detail15_List_node_base9_M_unhookEv", 
                "free", 
                "pow", 
                "pcre_fullinfo", 
                "pcre_compile", 
                "_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base", 
                "gettimeofday", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm", 
                "fclose", 
                "_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E", 
                "_ZNSt8ios_base4InitC1Ev", 
                "localtime_r", 
                "rand", 
                "_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base", 
                "rename", 
                "ceil", 
                "strncpy", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm", 
                "__errno_location", 
                "strcspn", 
                "__cxa_pure_virtual", 
                "open", 
                "time", 
                "_ZNSt6localeD1Ev", 
                "memcpy", 
                "dlsym", 
                "_ZNSo3putEc", 
                "fileno", 
                "malloc", 
                "_ZNSo9_M_insertIdEERSoT_", 
                "getpid", 
                "srand48", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc", 
                "fsync", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc", 
                "_ITM_registerTMCloneTable", 
                "strlen", 
                "_ZNKSt5ctypeIcE13_M_widen_initEv", 
                "strtoll", 
                "strdup", 
                "__cxa_rethrow", 
                "read", 
                "fdopen"
            ], 
            "rpm": "condor-classads-8.6.3-1.fc26.x86_64.rpm", 
            "find-libc-functions": [
                "GI___obstack_vprintf", 
                "GI___vasprintf", 
                "GI___vdprintf", 
                "GI___vfprintf", 
                "GI___vfwprintf", 
                "GI___vsnprintf", 
                "GI___vsprintf", 
                "GI___vswprintf", 
                "GI___vsyslog", 
                "__longjmp", 
                "_fprintf", 
                "_printf", 
                "_snprintf", 
                "_sprintf", 
                "_vfprintf", 
                "_vprintf", 
                "_vsnprintf", 
                "_vsprintf", 
                "asprintf", 
                "confstr", 
                "dprintf", 
                "explicit_bzero", 
                "fdelt", 
                "fgets", 
                "fgets_unlocked", 
                "fgetws", 
                "fgetws_unlocked", 
                "fprintf", 
                "fread", 
                "fread_unlocked", 
                "fwprintf", 
                "getcwd", 
                "getdomainname", 
                "getgroups", 
                "gethostname", 
                "getlogin_r", 
                "gets", 
                "getwd", 
                "longjmp", 
                "mbsnrtowcs", 
                "mbsrtowcs", 
                "mbstowcs", 
                "memcpy", 
                "memmove", 
                "mempcpy", 
                "memset", 
                "obstack_printf", 
                "obstack_vprintf", 
                "poll", 
                "ppoll", 
                "pread64", 
                "pread", 
                "printf", 
                "ptsname_r", 
                "read", 
                "readlink", 
                "readlinkat", 
                "realpath", 
                "recv", 
                "recvfrom", 
                "snprintf", 
                "sprintf", 
                "stpcpy", 
                "stpncpy", 
                "strcat", 
                "strcpy", 
                "strncat", 
                "strncpy", 
                "swprintf", 
                "syslog", 
                "ttyname_r", 
                "vasprintf", 
                "vdprintf", 
                "vfprintf", 
                "vfwprintf", 
                "vprintf", 
                "vsnprintf", 
                "vsprintf", 
                "vswprintf", 
                "vsyslog", 
                "vwprintf", 
                "wcpcpy", 
                "wcpncpy", 
                "wcrtomb", 
                "wcscat", 
                "wcscpy", 
                "wcsncat", 
                "wcsncpy", 
                "wcsnrtombs", 
                "wcsrtombs", 
                "wcstombs", 
                "wctomb", 
                "wmemcpy", 
                "wmemmove", 
                "wmempcpy", 
                "wmemset", 
                "wprintf"
            ], 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib64/libclassad.so.8.6.3"
        }, 
        "complexity": {
            "r2 aa": "failed: ERROR: Cannot find radare2 in PATH"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " Development/Libraries", 
            "Name": " condor-classads", 
            "License": " ASL 2.0", 
            "URL": " http://research.cs.wisc.edu/htcondor/", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildvm-25.phx2.fedoraproject.org", 
            "Description": "\nClassified Advertisements (classads) are the lingua franca of\nHTCondor. They are used for describing jobs, workstations, and other\nresources. They are exchanged by HTCondor processes to schedule\njobs. They are logged to files for statistical and debugging\npurposes. They are used to enquire about current state of the system.\n\nA classad is a mapping from attribute names to expressions. In the\nsimplest cases, the expressions are simple constants (integer,\nfloating point, or string). A classad is thus a form of property\nlist. Attribute expressions can also be more complicated. There is a\nprotocol for evaluating an attribute expression of a classad vis a vis\nanother ad. For example, the expression \"other.size > 3\" in one ad\nevaluates to true if the other ad has an attribute named size and the\nvalue of that attribute is (or evaluates to) an integer greater than\nthree. Two classads match if each ad has an attribute requirements\nthat evaluates to true in the context of the other ad. Classad\nmatching is used by the HTCondor central manager to determine the\ncompatibility of jobs and workstations where they may be run.\n", 
            "Build Date": " Fri 19 May 2017 11:45:16 AM EDT", 
            "Source RPM": " condor-8.6.3-1.fc26.src.rpm", 
            "Version": " 8.6.3", 
            "Architecture": " x86_64", 
            "Signature": " RSA/SHA256, Fri 19 May 2017 04:57:57 PM EDT, Key ID 812a6b4b64dab85d", 
            "Release": " 1.fc26", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " HTCondor's classified advertisement language", 
            "Size": " 623099"
        }
    }
}