{
    "results": {
        "complexity": {
            "r2 aa": "failed: ERROR: Cannot find radare2 in PATH"
        }, 
        "usr/lib64/ghc-8_0_2/tf-random-0_5-BGjMgO8m67W8CHiEl15kZ7/libHStf-random-0_5-BGjMgO8m67W8CHiEl15kZ7-ghc8_0_2_so": {
            "report-functions": [
                "stg_ap_2_upd_info", 
                "stg_unmaskAsyncExceptionszh", 
                "stg_ap_p_info", 
                "stg_noDuplicatezh", 
                "stg_sel_0_upd_info", 
                "__gmon_start__", 
                "stg_bh_upd_frame_info", 
                "stg_upd_frame_info", 
                "stg_ap_pp_info", 
                "stg_newMutVarzh", 
                "stg_ARR_WORDS_info", 
                "stg_raiseIOzh", 
                "stg_maskUninterruptiblezh", 
                "stg_newPinnedByteArrayzh", 
                "stg_ap_pp_fast", 
                "stg_gc_noregs", 
                "stg_gc_unpt_r1", 
                "stg_sel_1_upd_info", 
                "stg_ap_0_fast", 
                "__cxa_finalize", 
                "stg_atomicModifyMutVarzh", 
                "stg_ap_p_fast", 
                "stg_sel_3_upd_info", 
                "stg_sel_2_upd_info", 
                "stg_gc_pp", 
                "_ITM_deregisterTMCloneTable", 
                "stg_catchzh", 
                "stg_maskAsyncExceptionszh", 
                "stg_gc_unbx_r1", 
                "newCAF"
            ], 
            "rpm": "ghc-tf-random-0.5-6.fc26.x86_64.rpm", 
            "find-libc-functions": [
                "GI___obstack_vprintf", 
                "GI___vasprintf", 
                "GI___vdprintf", 
                "GI___vfprintf", 
                "GI___vfwprintf", 
                "GI___vsnprintf", 
                "GI___vsprintf", 
                "GI___vswprintf", 
                "GI___vsyslog", 
                "__longjmp", 
                "_fprintf", 
                "_printf", 
                "_snprintf", 
                "_sprintf", 
                "_vfprintf", 
                "_vprintf", 
                "_vsnprintf", 
                "_vsprintf", 
                "asprintf", 
                "confstr", 
                "dprintf", 
                "explicit_bzero", 
                "fdelt", 
                "fgets", 
                "fgets_unlocked", 
                "fgetws", 
                "fgetws_unlocked", 
                "fprintf", 
                "fread", 
                "fread_unlocked", 
                "fwprintf", 
                "getcwd", 
                "getdomainname", 
                "getgroups", 
                "gethostname", 
                "getlogin_r", 
                "gets", 
                "getwd", 
                "longjmp", 
                "mbsnrtowcs", 
                "mbsrtowcs", 
                "mbstowcs", 
                "memcpy", 
                "memmove", 
                "mempcpy", 
                "memset", 
                "obstack_printf", 
                "obstack_vprintf", 
                "poll", 
                "ppoll", 
                "pread64", 
                "pread", 
                "printf", 
                "ptsname_r", 
                "read", 
                "readlink", 
                "readlinkat", 
                "realpath", 
                "recv", 
                "recvfrom", 
                "snprintf", 
                "sprintf", 
                "stpcpy", 
                "stpncpy", 
                "strcat", 
                "strcpy", 
                "strncat", 
                "strncpy", 
                "swprintf", 
                "syslog", 
                "ttyname_r", 
                "vasprintf", 
                "vdprintf", 
                "vfprintf", 
                "vfwprintf", 
                "vprintf", 
                "vsnprintf", 
                "vsprintf", 
                "vswprintf", 
                "vsyslog", 
                "vwprintf", 
                "wcpcpy", 
                "wcpncpy", 
                "wcrtomb", 
                "wcscat", 
                "wcscpy", 
                "wcsncat", 
                "wcsncpy", 
                "wcsnrtombs", 
                "wcsrtombs", 
                "wcstombs", 
                "wctomb", 
                "wmemcpy", 
                "wmemmove", 
                "wmempcpy", 
                "wmemset", 
                "wprintf"
            ], 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "no, not found!", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "no, not found!"
            }, 
            "filename": "usr/lib64/ghc-8.0.2/tf-random-0.5-BGjMgO8m67W8CHiEl15kZ7/libHStf-random-0.5-BGjMgO8m67W8CHiEl15kZ7-ghc8.0.2.so"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " Unspecified", 
            "Name": " ghc-tf-random", 
            "License": " BSD and Public Domain", 
            "URL": " https://hackage.haskell.org/package/tf-random", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildvm-09.phx2.fedoraproject.org", 
            "Description": "\nThis package contains an implementation of a high-quality splittable\npseudorandom number generator. The generator is based on a cryptographic hash\nfunction built on top of the ThreeFish block cipher. See the paper /Splittable\nPseudorandom Number Generators Using Cryptographic Hashing/ by Claessen, Pa\u0142ka\nfor details and the rationale of the design.\n\nThe package provides the following:\n\n* A splittable PRNG that implements the standard 'System.Random.RandomGen'\nclass.\n\n* The generator also implements an alternative version of the\n'System.Random.TF.Gen.RandomGen' class (exported from \"System.Random.TF.Gen\"),\nwhich requires the generator to return pseudorandom integers from the full\n32-bit range, and contains an n-way split function.\n\n* An alternative version of the 'Random' class is provided, which is linked to\nthe new 'RandomGen' class, together with 'Random' instances for some integral\ntypes.\n\n* Two functions for initialising the generator with a non-deterministic seed:\none using the system time, and one using the '/dev/urandom' UNIX special file.\n\nThe package uses an adapted version of the reference C implementation of\nThreeFish from the reference package of the Skein hash function\n(<https://www.schneier.com/skein.html>), originally written by Doug Whiting.\n\nPlease note that even though the generator provides very high-quality\npseudorandom numbers, it has not been designed with cryptographic applications\nin mind.\n", 
            "Build Date": " Fri 24 Feb 2017 07:24:07 PM EST", 
            "Source RPM": " ghc-tf-random-0.5-6.fc26.src.rpm", 
            "Version": " 0.5", 
            "Architecture": " x86_64", 
            "Signature": " RSA/SHA256, Mon 27 Feb 2017 07:27:31 PM EST, Key ID 812a6b4b64dab85d", 
            "Release": " 6.fc26", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " High-quality splittable pseudorandom number generator", 
            "Size": " 202442"
        }
    }
}