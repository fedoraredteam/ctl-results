{
    "results": {
        "complexity": {
            "r2 aa": "failed: ERROR: Cannot find radare2 in PATH"
        }, 
        "usr/lib/libgetdns_so_1_4_1": {
            "report-functions": [
                "X509_STORE_CTX_get_error", 
                "close", 
                "SSL_CTX_set_default_verify_paths", 
                "BIO_new", 
                "CRYPTO_get_ex_new_index", 
                "strftime", 
                "__explicit_bzero_chk", 
                "getpid", 
                "SSL_set_fd", 
                "strpbrk", 
                "fgetc", 
                "SSL_get0_param", 
                "getservbyname", 
                "ub_ctx_add_ta", 
                "setlocale", 
                "TLS_client_method", 
                "ub_ctx_create", 
                "CRYPTO_free", 
                "i2d_DSA_SIG", 
                "X509_VERIFY_PARAM_set1_host", 
                "X509_STORE_CTX_get0_untrusted", 
                "X509_STORE_CTX_get0_store", 
                "fclose", 
                "SSL_CTX_get_cert_store", 
                "SSL_set_verify", 
                "write", 
                "SSL_ctrl", 
                "__ctype_b_loc", 
                "HMAC_Final", 
                "SSL_CTX_set_cipher_list", 
                "perror", 
                "socket", 
                "ub_fd", 
                "getentropy", 
                "_ITM_deregisterTMCloneTable", 
                "__memcpy_chk", 
                "RSA_set0_key", 
                "ERR_get_error", 
                "HMAC_Init_ex", 
                "i2d_X509_PUBKEY", 
                "memset", 
                "feof", 
                "EVP_md5", 
                "mmap", 
                "memcmp", 
                "recv", 
                "EC_KEY_free", 
                "SSL_shutdown", 
                "HMAC", 
                "BN_new", 
                "OPENSSL_sk_num", 
                "BIO_new_mem_buf", 
                "__rawmemchr", 
                "__vsnprintf_chk", 
                "SSL_get_ex_data", 
                "ub_ctx_delete", 
                "inet_ntop", 
                "SSL_CTX_free", 
                "HMAC_CTX_free", 
                "ub_process", 
                "X509_VERIFY_PARAM_set_hostflags", 
                "stringprep_locale_to_utf8", 
                "EVP_sha256", 
                "SSL_set_ex_data", 
                "strlen", 
                "strspn", 
                "ungetc", 
                "fgets", 
                "ub_resolve_free", 
                "__stack_chk_fail", 
                "DSA_SIG_set0", 
                "EVP_DigestUpdate", 
                "SSL_get_error", 
                "fopen", 
                "ub_ctx_set_fwd", 
                "EVP_sha224", 
                "_IO_getc", 
                "X509_STORE_lock", 
                "SSL_set_cipher_list", 
                "DSA_new", 
                "sendto", 
                "BN_bin2bn", 
                "DSA_free", 
                "getprotobynumber", 
                "snprintf", 
                "BIO_f_base64", 
                "__isoc99_sscanf", 
                "SSL_get_verify_result", 
                "__assert_fail", 
                "EVP_VerifyFinal", 
                "select", 
                "BIO_push", 
                "__cxa_finalize", 
                "HMAC_Update", 
                "SHA384", 
                "__errno_location", 
                "SSL_get_ex_data_X509_STORE_CTX_idx", 
                "X509_get_X509_PUBKEY", 
                "getprotobyname", 
                "SSL_new", 
                "EVP_DigestInit", 
                "DSA_set0_key", 
                "EVP_sha384", 
                "time", 
                "abort", 
                "malloc", 
                "OPENSSL_sk_value", 
                "SSL_read", 
                "getnameinfo", 
                "DSA_set0_pqg", 
                "SSL_do_handshake", 
                "ub_ctx_async", 
                "__memmove_chk", 
                "strcspn", 
                "SHA256", 
                "EVP_DigestFinal_ex", 
                "strtol", 
                "pthread_mutex_lock", 
                "RSA_new", 
                "EVP_PKEY_free", 
                "__snprintf_chk", 
                "ub_cancel", 
                "BIO_free_all", 
                "raise", 
                "strtoul", 
                "stringprep", 
                "o2i_ECPublicKey", 
                "SSL_CTX_ctrl", 
                "idna_to_ascii_8z", 
                "strncasecmp", 
                "SSL_set_connect_state", 
                "EVP_MD_CTX_free", 
                "SHA1", 
                "SSL_SESSION_free", 
                "inet_pton", 
                "pthread_mutex_unlock", 
                "ub_resolve_async", 
                "ub_ctx_create_ub_event", 
                "BIO_read", 
                "getsockopt", 
                "X509_STORE_unlock", 
                "gettimeofday", 
                "EC_KEY_new_by_curve_name", 
                "DSA_SIG_new", 
                "ub_resolve_event", 
                "qsort", 
                "BN_free", 
                "strtod", 
                "ub_poll", 
                "realloc", 
                "RSA_free", 
                "EVP_DigestInit_ex", 
                "DSA_SIG_free", 
                "SSL_set_session", 
                "__xstat", 
                "HMAC_CTX_new", 
                "ERR_error_string_n", 
                "getaddrinfo", 
                "__gmon_start__", 
                "SSL_free", 
                "OPENSSL_init_ssl", 
                "strncmp", 
                "__fdelt_chk", 
                "ub_ctx_set_option", 
                "strcasecmp", 
                "EVP_PKEY_assign", 
                "idna_to_unicode_8z8z", 
                "strcmp", 
                "ub_ctx_set_stub", 
                "fcntl", 
                "EVP_sha1", 
                "freeaddrinfo", 
                "EVP_MD_CTX_new", 
                "SSL_get_SSL_CTX", 
                "memmove", 
                "__strdup", 
                "__ctype_tolower_loc", 
                "X509_STORE_CTX_get_ex_data", 
                "EVP_PKEY_new", 
                "SSL_CTX_new", 
                "SSL_write", 
                "connect", 
                "SSL_get1_session", 
                "_ITM_registerTMCloneTable", 
                "ERR_clear_error", 
                "exit", 
                "free", 
                "strchr"
            ], 
            "rpm": "getdns-1.0.0-2.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libgetdns.so.1.4.1"
        }, 
        "usr/lib/libgetdns_ext_event_so_1_4_1": {
            "report-functions": [
                "__stack_chk_fail", 
                "event_del", 
                "event_base_dispatch", 
                "getdns_context_set_eventloop", 
                "event_add", 
                "priv_getdns_context_mf", 
                "_ITM_deregisterTMCloneTable", 
                "_ITM_registerTMCloneTable", 
                "__cxa_finalize", 
                "event_base_loop", 
                "event_new", 
                "__assert_fail", 
                "event_free"
            ], 
            "rpm": "getdns-1.0.0-2.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libgetdns_ext_event.so.1.4.1"
        }, 
        "usr/bin/getdns_query": {
            "report-functions": [
                "__snprintf_chk", 
                "getdns_hostname", 
                "getdns_dict_create_with_extended_memory_functions", 
                "strncasecmp", 
                "getdns_context_get_api_information", 
                "getdns_validate_dnssec", 
                "getdns_context_create", 
                "getdns_context_set_dns_transport_list", 
                "getdns_pretty_print_dict", 
                "getdns_context_get_eventloop", 
                "inet_ntop", 
                "__fprintf_chk", 
                "getdns_dict_get_bindata", 
                "strncmp", 
                "memcmp", 
                "getdns_dict_destroy", 
                "getdns_msg_dict2wire_buf", 
                "__ctype_toupper_loc", 
                "strcmp", 
                "strchr", 
                "__errno_location", 
                "getdns_context_set_edns_extended_rcode", 
                "getdns_context_set_tls_authentication", 
                "getdns_context_set_edns_client_subnet_private", 
                "getdns_service_sync", 
                "getdns_context_get_resolution_type", 
                "getdns_dict_util_set_string", 
                "read", 
                "__ctype_b_loc", 
                "getdns_dict_create", 
                "getdns_context_set_limit_outstanding_queries", 
                "getaddrinfo", 
                "bind", 
                "strerror", 
                "getdns_context_destroy", 
                "getdns_context_set_edns_version", 
                "getdns_context_set_dnssec_allowed_skew", 
                "getdns_list_get_bindata", 
                "getdns_context_set_resolution_type", 
                "getdns_dict_set_list", 
                "getdns_convert_fqdn_to_dns_name", 
                "__libc_start_main", 
                "_ITM_deregisterTMCloneTable", 
                "getdns_list_create_with_extended_memory_functions", 
                "getdns_context_set_append_name", 
                "getdns_list_create", 
                "fopen", 
                "fseek", 
                "_ITM_registerTMCloneTable", 
                "strtok", 
                "fread", 
                "getdns_list_set_bindata", 
                "listen", 
                "getdns_dict_get_dict", 
                "priv_getdns_context_mf", 
                "malloc", 
                "getdns_address_sync", 
                "getdns_list_set_int", 
                "getdns_print_json_dict", 
                "getdns_context_set_dnssec_trust_anchors", 
                "__cxa_finalize", 
                "strtol", 
                "getdns_context_set_edns_maximum_udp_payload_size", 
                "getdns_list_get_length", 
                "getdns_hostname_sync", 
                "rewind", 
                "fileno", 
                "getdns_list_get_int", 
                "getdns_context_set_dns_transport", 
                "freeaddrinfo", 
                "strlen", 
                "ftell", 
                "getdns_dict_get_names", 
                "perror", 
                "getdns_dict_get_int", 
                "setsockopt", 
                "getdns_context_set_edns_do_bit", 
                "getdns_pubkey_pin_create_from_string", 
                "getdns_get_errorstr_by_id", 
                "getdns_context_set_upstream_recursive_servers", 
                "socket", 
                "fwrite", 
                "getdns_list_set_list", 
                "accept", 
                "getdns_dict_set_dict", 
                "getdns_convert_dns_name_to_fqdn", 
                "getdns_context_set_tls_query_padding_blocksize", 
                "getdns_general_sync", 
                "__gmon_start__", 
                "getdns_context_set_use_threads", 
                "fclose", 
                "fgets", 
                "getdns_general", 
                "free", 
                "getdns_service", 
                "getdns_dict_set_int", 
                "getdns_context_set_dns_root_servers", 
                "__assert_fail", 
                "recvfrom", 
                "getdns_context_run", 
                "getdns_context_set_timeout", 
                "getdns_context_set_follow_redirects", 
                "sendto", 
                "fflush", 
                "getdns_dict_set_bindata", 
                "getdns_context_get_dnssec_trust_anchors", 
                "getdns_context_set_suffix", 
                "getdns_fp2rr_list", 
                "getdns_list_destroy", 
                "getdns_dict_remove_name", 
                "__stack_chk_fail", 
                "__printf_chk", 
                "getdns_context_set_idle_timeout", 
                "getdns_address", 
                "strtoul", 
                "getdns_root_trust_anchor", 
                "realloc", 
                "write", 
                "getdns_pretty_print_list", 
                "getdns_list_set_dict", 
                "getdns_list_get_dict", 
                "close", 
                "getdns_list_create_with_context", 
                "__memcpy_chk", 
                "getdns_dict_get_list", 
                "getdns_context_set_namespaces"
            ], 
            "rpm": "getdns-1.0.0-2.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "yes", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/bin/getdns_query"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " System Environment/Libraries", 
            "Name": " getdns", 
            "License": " BSD", 
            "URL": " http://www.getdnsapi.net", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildvm-08.phx2.fedoraproject.org", 
            "Description": "\ngetdns is a modern asynchronous DNS API. It implements DNS entry points\nfrom a design developed and vetted by application developers, in an API\nspecification edited by Paul Hoffman. With the development of this API,\nwe intend to offer application developers a modernized and flexible way\nto access DNS security (DNSSEC) and other powerful new DNS features; a\nparticular hope is to inspire application developers towards innovative\nsecurity solutions in their applications.\n", 
            "Build Date": " Fri 10 Feb 2017 11:51:28 AM EST", 
            "Source RPM": " getdns-1.0.0-2.fc26.src.rpm", 
            "Version": " 1.0.0", 
            "Architecture": " i686", 
            "Signature": " RSA/SHA256, Fri 10 Feb 2017 10:02:24 PM EST, Key ID 812a6b4b64dab85d", 
            "Release": " 2.fc26", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " Modern asynchronous API to the DNS", 
            "Size": " 476938"
        }
    }
}