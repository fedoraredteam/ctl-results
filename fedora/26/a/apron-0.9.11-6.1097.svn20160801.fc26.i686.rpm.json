{
    "results": {
        "usr/lib/libap_ppl_debug_so_0_9_11": {
            "report-functions": [
                "__gmpz_set", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron23add_recycled_generatorsERNS_16Generator_SystemE", 
                "__gmpz_mul", 
                "_ZNSt12length_errorD1Ev", 
                "_ZN23Parma_Polyhedra_Library17Linear_ExpressionC1ENS_14RepresentationE", 
                "itv_linearize_lincons_array_MPQ", 
                "ap_manager_alloc", 
                "_ZN23Parma_Polyhedra_Library14Grid_Generator24permute_space_dimensionsERKSt6vectorINS_8VariableESaIS2_EE", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron24external_memory_in_bytesEv", 
                "_ZN23Parma_Polyhedra_Library9Generator4lineERKNS_17Linear_ExpressionENS_14RepresentationE", 
                "_ZN23Parma_Polyhedra_Library4Grid17set_zero_dim_univEv", 
                "_ZN23Parma_Polyhedra_Library4Grid9constructEjNS_18Degenerate_ElementE", 
                "_ZNK23Parma_Polyhedra_Library10Congruence28throw_dimension_incompatibleEPKcS2_NS_8VariableE", 
                "__gmpz_tdiv_q", 
                "ap_generator0_array_fprint", 
                "__cxa_allocate_exception", 
                "_ZNSt16invalid_argumentC1EPKc", 
                "_ZN23Parma_Polyhedra_Library31Generator_System_const_iterator12skip_forwardEv", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron11is_universeEv", 
                "_ZN23Parma_Polyhedra_Library17Linear_ExpressionC1ENS_8VariableENS_14RepresentationE", 
                "_ZN23Parma_Polyhedra_Library17Linear_ExpressionC1ERKS0_", 
                "itv_lincons_array_clear_MPQ", 
                "ap_interval_alloc", 
                "_ZNK23Parma_Polyhedra_Library14Grid_Generator28throw_dimension_incompatibleEPKcS2_NS_8VariableE", 
                "_ZNK23Parma_Polyhedra_Library4Grid28throw_dimension_incompatibleEPKcS2_RKNS_10CongruenceE", 
                "fwrite", 
                "__gxx_personality_v0", 
                "_ZNK23Parma_Polyhedra_Library4Grid17update_generatorsEv", 
                "ap_lincons0_array_make", 
                "_Znwj", 
                "ap_generator0_array_make", 
                "_ZNK23Parma_Polyhedra_Library4Grid7max_minERKNS_17Linear_ExpressionEPKcR10__gmp_exprIA1_12__mpz_structS8_ESA_RbPNS_9GeneratorE", 
                "_ZN23Parma_Polyhedra_Library4Grid9set_emptyEv", 
                "itv_lincons_array_init_MPQ", 
                "_ZN23Parma_Polyhedra_Library14Grid_Generator9grid_lineERKNS_17Linear_ExpressionENS_14RepresentationE", 
                "_ZN23Parma_Polyhedra_Library4Grid22throw_invalid_argumentEPKcS2_", 
                "__cxa_rethrow", 
                "__gmpz_init", 
                "itv_quasilinearize_lincons_MPQ", 
                "ap_interval_array_alloc", 
                "ap_generic_to_tcons_array", 
                "_ZN23Parma_Polyhedra_Library4Grid18add_grid_generatorERKNS_14Grid_GeneratorE", 
                "_ZNKSt9exception4whatEv", 
                "_ZNK23Parma_Polyhedra_Library10Constraint28throw_dimension_incompatibleEPKcS2_NS_8VariableE", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron15add_constraintsERKNS_17Constraint_SystemE", 
                "__gmpq_canonicalize", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron32bounded_H79_extrapolation_assignERKS0_RKNS_17Constraint_SystemEPj", 
                "_ZN23Parma_Polyhedra_Library14Grid_Generator10grid_pointERKNS_17Linear_ExpressionERK10__gmp_exprIA1_12__mpz_structS6_ENS_14RepresentationE", 
                "ap_manager_raise_exception", 
                "_ZNK23Parma_Polyhedra_Library10Congruence15is_inconsistentEv", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron22BHRZ03_widening_assignERKS0_Pj", 
                "__gmpq_cmp_z", 
                "_ZNK23Parma_Polyhedra_Library4Grid24external_memory_in_bytesEv", 
                "ap_coeff_zero", 
                "_ZN23Parma_Polyhedra_Library17Congruence_System14const_iterator12skip_forwardEv", 
                "ap_interval_set_top", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron19intersection_assignERKS0_", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron21minimized_constraintsEv", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron30add_space_dimensions_and_embedEj", 
                "__gmpq_mul", 
                "_ZN23Parma_Polyhedra_Library10PolyhedronC1ENS_8TopologyEjNS_18Degenerate_ElementE", 
                "ap_abstract0_dimension", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron8containsERKS0_", 
                "_ZNK23Parma_Polyhedra_Library9Generator22throw_invalid_argumentEPKcS2_", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron20minimized_generatorsEv", 
                "__cxa_begin_catch", 
                "_ZN23Parma_Polyhedra_Library4Grid12affine_imageENS_8VariableERKNS_17Linear_ExpressionERK10__gmp_exprIA1_12__mpz_structS7_E", 
                "_ZNK23Parma_Polyhedra_Library4Grid13relation_withERKNS_14Grid_GeneratorE", 
                "ap_manager_set_abort_if_exception", 
                "_ZN23Parma_Polyhedra_Library4Grid21fold_space_dimensionsERKNS_13Variables_SetENS_8VariableE", 
                "__cxa_end_catch", 
                "itv_sat_lincons_is_false_MPQ", 
                "_ZdlPv", 
                "itv_lincons_array_reduce_integer_MPQ", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron27throw_topology_incompatibleEPKcS2_RKS0_", 
                "ap_coeff_set_scalar_int", 
                "_ZN23Parma_Polyhedra_Library9Generator13closure_pointERKNS_17Linear_ExpressionERK10__gmp_exprIA1_12__mpz_structS6_ENS_14RepresentationE", 
                "free", 
                "itv_linexpr_is_quasilinear_MPQ", 
                "__gmpz_fdiv_q", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron13relation_withERKNS_10ConstraintE", 
                "_ZN23Parma_Polyhedra_Library32Constraint_System_const_iterator12skip_forwardEv", 
                "itv_lincons_array_is_quasilinear_MPQ", 
                "_ZN23Parma_Polyhedra_Library10Constraint24permute_space_dimensionsERKSt6vectorINS_8VariableESaIS2_EE", 
                "_ZNK23Parma_Polyhedra_Library4Grid28throw_dimension_incompatibleEPKcS2_RKNS_10ConstraintE", 
                "_ITM_registerTMCloneTable", 
                "_ZN23Parma_Polyhedra_Library16Generator_System6insertERKNS_9GeneratorE", 
                "_ZN23Parma_Polyhedra_Library4Grid32add_space_dimensions_and_projectEj", 
                "__gmpq_clear", 
                "_ZNK23Parma_Polyhedra_Library4Grid21minimized_congruencesEv", 
                "_ZN23Parma_Polyhedra_Library17Linear_Expression19max_space_dimensionEv", 
                "_ZN23Parma_Polyhedra_Library9Generator5pointERKNS_17Linear_ExpressionERK10__gmp_exprIA1_12__mpz_structS6_ENS_14RepresentationE", 
                "ap_lincons0_array_fprint", 
                "_ZNSt11logic_errorC1ERKS_", 
                "ap_generic_asssub_texpr_array", 
                "itv_internal_alloc_MPQ", 
                "_ZN23Parma_Polyhedra_Library4Grid22expand_space_dimensionENS_8VariableEj", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron11constraintsEv", 
                "malloc", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron35bounded_BHRZ03_extrapolation_assignERKS0_RKNS_17Constraint_SystemEPj", 
                "__cxa_atexit", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron15affine_preimageENS_8VariableERKNS_17Linear_ExpressionERK10__gmp_exprIA1_12__mpz_structS7_E", 
                "_ZNKSt11logic_error4whatEv", 
                "_ZNSt11logic_errorD1Ev", 
                "__cxa_throw", 
                "__gmpz_init_set_ui", 
                "__stack_chk_fail", 
                "_ZN23Parma_Polyhedra_Library17Constraint_System6insertERKNS_10ConstraintE", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron16poly_hull_assignERKS0_", 
                "_ZN23Parma_Polyhedra_Library21Grid_Generator_System6insertERKNS_14Grid_GeneratorE", 
                "ap_lincons0_array_clear", 
                "_ZN23Parma_Polyhedra_LibraryeqERKNS_10PolyhedronES2_", 
                "__gmpq_set_z", 
                "ap_scalar_set_infty", 
                "itv_linexpr_set_ap_linexpr0_MPQ", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron30check_space_dimension_overflowEjNS_8TopologyEPKcS3_", 
                "__gmon_start__", 
                "_ZN23Parma_Polyhedra_Library4Grid9constructERNS_21Grid_Generator_SystemE", 
                "__gmpz_set_si", 
                "itv_linexpr_init_MPQ", 
                "__gmpz_swap", 
                "ap_generic_sat_tcons", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron8minimizeEv", 
                "__fprintf_chk", 
                "_ZN23Parma_Polyhedra_Library4InitC1Ev", 
                "_ZNSt16invalid_argumentD1Ev", 
                "__gmpq_set_si", 
                "ap_interval_set_bottom", 
                "__gmpz_lcm", 
                "__assert_fail", 
                "_ZN23Parma_Polyhedra_LibraryeqERKNS_4GridES2_", 
                "_ZNSt9exceptionD2Ev", 
                "_ZN23Parma_Polyhedra_Library17Congruence_System6insertERKNS_10ConstraintE", 
                "__cxa_finalize", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron32add_space_dimensions_and_projectEj", 
                "itv_internal_free_MPQ", 
                "_ZNK23Parma_Polyhedra_Library4Grid15grid_generatorsEv", 
                "_ZN23Parma_Polyhedra_Library4InitD1Ev", 
                "_ZN23Parma_Polyhedra_Library4Grid23add_congruence_no_checkERKNS_10CongruenceE", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron7max_minERKNS_17Linear_ExpressionEbR10__gmp_exprIA1_12__mpz_structS6_ES8_RbRNS_9GeneratorE", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron22throw_invalid_argumentEPKcS2_", 
                "_ZN23Parma_Polyhedra_Library4Grid19intersection_assignERKS0_", 
                "ap_linexpr0_alloc", 
                "_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron35limited_BHRZ03_extrapolation_assignERKS0_RKNS_17Constraint_SystemEPj", 
                "_ZNK23Parma_Polyhedra_Library10Constraint15is_inconsistentEv", 
                "ap_generic_bound_texpr", 
                "ap_abstract0_top", 
                "_ZNSt12length_errorC1EPKc", 
                "_ITM_deregisterTMCloneTable", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron32limited_H79_extrapolation_assignERKS0_RKNS_17Constraint_SystemEPj", 
                "_ZN23Parma_Polyhedra_Library10Congruence16strong_normalizeEv", 
                "_ZN23Parma_Polyhedra_Library9Generator24permute_space_dimensionsERKSt6vectorINS_8VariableESaIS2_EE", 
                "_ZN23Parma_Polyhedra_Library4Grid15widening_assignERKS0_Pj", 
                "_ZN23Parma_Polyhedra_Library10Constraint14sign_normalizeEv", 
                "ap_lincons0_make_unsat", 
                "_ZN23Parma_Polyhedra_Library4Grid23add_constraint_no_checkERKNS_10ConstraintE", 
                "_ZSt20__throw_length_errorPKc", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron13add_generatorERKNS_9GeneratorE", 
                "_ZdaPv", 
                "ap_interval_set_itv_MPQ", 
                "_ZN23Parma_Polyhedra_Library17Congruence_System24permute_space_dimensionsERKSt6vectorINS_8VariableESaIS2_EE", 
                "ap_linexpr0_is_linear", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron21fold_space_dimensionsERKNS_13Variables_SetENS_8VariableE", 
                "itv_linexpr_is_scalar_MPQ", 
                "ap_scalar_reinit", 
                "_Znaj", 
                "ap_generic_meet_intlinearize_tcons_array", 
                "_ZN23Parma_Polyhedra_Library30check_space_dimension_overflowEjjPKcS1_S1_", 
                "_ZN23Parma_Polyhedra_Library4Grid24add_recycled_congruencesERNS_17Congruence_SystemE", 
                "_ZN23Parma_Polyhedra_Library10PolyhedronC2ERKS0_NS_16Complexity_ClassE", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron22expand_space_dimensionENS_8VariableEj", 
                "_ZN23Parma_Polyhedra_Library10PolyhedronC1ENS_8TopologyERKNS_16Generator_SystemE", 
                "_ZN23Parma_Polyhedra_Library4Grid15affine_preimageENS_8VariableERKNS_17Linear_ExpressionERK10__gmp_exprIA1_12__mpz_structS7_E", 
                "ap_scalar_alloc", 
                "itv_quasilinearize_lincons_array_MPQ", 
                "_ZN23Parma_Polyhedra_Library4Grid30add_space_dimensions_and_embedEj", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron19H79_widening_assignERKS0_Pj", 
                "_ZN23Parma_Polyhedra_Library4Grid18upper_bound_assignERKS0_", 
                "__gmpq_init", 
                "_ZN23Parma_Polyhedra_Library17Linear_ExpressionC1ERKS0_NS_14RepresentationE", 
                "__snprintf_chk", 
                "_ZNK23Parma_Polyhedra_Library4Grid8is_emptyEv", 
                "ap_scalar_infty", 
                "itv_lincons_array_set_ap_lincons0_array_MPQ", 
                "__cxa_free_exception", 
                "_ZNSt8ios_base4InitC1Ev", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron13relation_withERKNS_9GeneratorE", 
                "_ZN23Parma_Polyhedra_Library4Grid28add_recycled_grid_generatorsERNS_21Grid_Generator_SystemE", 
                "itv_lincons_set_ap_lincons0_MPQ", 
                "_ZNK23Parma_Polyhedra_Library4Grid13relation_withERKNS_10ConstraintE", 
                "_ZN23Parma_Polyhedra_Library14Grid_Generator9parameterERKNS_17Linear_ExpressionERK10__gmp_exprIA1_12__mpz_structS6_ENS_14RepresentationE", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron17set_zero_dim_univEv", 
                "__gmpz_init_set", 
                "_ZNK23Parma_Polyhedra_Library4Grid11is_universeEv", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron14add_constraintERKNS_10ConstraintE", 
                "_ZNK23Parma_Polyhedra_Library4Grid25minimized_grid_generatorsEv", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron35remove_pending_to_obtain_generatorsEv", 
                "ap_mpq_set_scalar", 
                "_Unwind_Resume", 
                "_ZN23Parma_Polyhedra_Library10PolyhedronC2ENS_8TopologyEjNS_18Degenerate_ElementE", 
                "ap_generic_asssub_linexpr_array", 
                "_ZdlPvj", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron10generatorsEv", 
                "ap_interval_is_leq", 
                "_ZNK23Parma_Polyhedra_Library4Grid11congruencesEv", 
                "__gmpz_clear", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron24add_recycled_constraintsERNS_17Constraint_SystemE", 
                "_ZNSt8ios_base4InitD1Ev", 
                "_ZNK23Parma_Polyhedra_Library4Grid8containsERKS0_", 
                "_ZN23Parma_Polyhedra_Library9Generator3rayERKNS_17Linear_ExpressionENS_14RepresentationE", 
                "ap_scalar_equal", 
                "_ZSt17__throw_bad_allocv", 
                "__gmpq_set", 
                "__gmpz_set_ui", 
                "_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_", 
                "__cxa_get_exception_ptr", 
                "_ZNK23Parma_Polyhedra_Library9Generator28throw_dimension_incompatibleEPKcS2_NS_8VariableE", 
                "_ZN23Parma_Polyhedra_Library4GridC1ERKS0_NS_16Complexity_ClassE", 
                "_ZN23Parma_Polyhedra_Library4Grid28limited_extrapolation_assignERKS0_RKNS_17Congruence_SystemEPj", 
                "ap_generator0_array_clear", 
                "ap_interval_free", 
                "itv_quasilinearize_linexpr_MPQ", 
                "_ZN23Parma_Polyhedra_Library17Congruence_System15insert_verbatimERNS_10CongruenceENS_13Recycle_InputE", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron17update_generatorsEv", 
                "__cxa_throw_bad_array_new_length", 
                "_ZNK23Parma_Polyhedra_Library14Grid_Generator22throw_invalid_argumentEPKcS2_", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron12affine_imageENS_8VariableERKNS_17Linear_ExpressionERK10__gmp_exprIA1_12__mpz_structS7_E"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libap_ppl_debug.so.0.9.11"
        }, 
        "usr/lib/libboxD_debug_so_0_9_11": {
            "report-functions": [
                "__assert_fail", 
                "ap_fpu_init", 
                "ap_interval_free", 
                "__gmon_start__", 
                "itv_eval_linexpr_D", 
                "abort", 
                "itv_set_ap_interval_D", 
                "ap_lincons0_array_make", 
                "itv_lincons_array_set_ap_lincons0_array_D", 
                "free", 
                "ap_coeff_set_scalar_double", 
                "itv_internal_free_D", 
                "ap_generator0_array_make", 
                "ap_scalar_set_infty", 
                "itv_meet_ap_tcons0_array_D", 
                "itv_eval_ap_linexpr0_D", 
                "ap_dimchange_init", 
                "fmin", 
                "mpfr_init2", 
                "itv_boxize_lincons_array_D", 
                "fputs", 
                "itv_eval_cstlincons_D", 
                "ap_generic_asssub_texpr_array", 
                "itv_lincons_array_init_D", 
                "itv_canonicalize_D", 
                "__snprintf_chk", 
                "ap_manager_alloc", 
                "_ITM_registerTMCloneTable", 
                "itv_eval_ap_texpr0_D", 
                "itv_fprint_D", 
                "itv_linexpr_clear_D", 
                "ap_interval_set_itv_D", 
                "ap_linexpr0_coeffref", 
                "itv_lincons_set_ap_lincons0_D", 
                "ap_policy_manager_alloc", 
                "mpfr_get_d", 
                "ap_interval_array_alloc", 
                "mpfr_cmp_d", 
                "ap_interval_set_bottom", 
                "ap_scalar_set_double", 
                "ap_interval_is_leq", 
                "realloc", 
                "ap_interval_alloc", 
                "itv_lincons_array_clear_D", 
                "itv_internal_alloc_D", 
                "ap_lincons0_make_unsat", 
                "ap_manager_raise_exception", 
                "itv_intlinearize_ap_tcons0_array_D", 
                "itv_lincons_array_reduce_integer_D", 
                "ap_linexpr0_copy", 
                "ap_linexpr0_alloc", 
                "ap_coeff_set_scalar_int", 
                "__gmpq_clear", 
                "ap_scalar_reinit", 
                "ap_coeff_reinit", 
                "_ITM_deregisterTMCloneTable", 
                "ap_coeff_set_scalar", 
                "ap_scalar_infty", 
                "malloc", 
                "__stack_chk_fail", 
                "fmax", 
                "itv_linexpr_reinit_D", 
                "__fprintf_chk", 
                "__cxa_finalize", 
                "ap_scalar_neg", 
                "ap_scalar_sgn", 
                "ap_manager_set_abort_if_exception", 
                "ap_generic_to_tcons_array", 
                "itv_linexpr_init_D", 
                "mpfr_clear"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libboxD_debug.so.0.9.11"
        }, 
        "usr/lib/libap_ppl_so_0_9_11": {
            "report-functions": [
                "_ZNK23Parma_Polyhedra_Library4Grid21minimized_congruencesEv", 
                "_ZdlPv", 
                "_ZN23Parma_Polyhedra_Library21Grid_Generator_System6insertERKNS_14Grid_GeneratorE", 
                "_ZN23Parma_Polyhedra_Library17Linear_ExpressionC1ENS_14RepresentationE", 
                "__cxa_free_exception", 
                "_ZdlPvj", 
                "itv_lincons_array_reduce_integer_MPQ", 
                "_Znwj", 
                "_ZNSt11logic_errorD1Ev", 
                "__gmpq_cmp_z", 
                "_ZNKSt9exception4whatEv", 
                "_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_", 
                "_ZNK23Parma_Polyhedra_Library4Grid11is_universeEv", 
                "_ZNK23Parma_Polyhedra_Library4Grid28throw_dimension_incompatibleEPKcS2_RKNS_10CongruenceE", 
                "_ZN23Parma_Polyhedra_Library10Constraint24permute_space_dimensionsERKSt6vectorINS_8VariableESaIS2_EE", 
                "ap_mpq_set_scalar", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron32add_space_dimensions_and_projectEj", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron35remove_pending_to_obtain_generatorsEv", 
                "itv_quasilinearize_lincons_array_MPQ", 
                "ap_manager_set_abort_if_exception", 
                "ap_interval_is_leq", 
                "__gmon_start__", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron16poly_hull_assignERKS0_", 
                "_ZN23Parma_Polyhedra_Library4Grid28add_recycled_grid_generatorsERNS_21Grid_Generator_SystemE", 
                "ap_interval_alloc", 
                "__gmpz_init_set", 
                "_ZN23Parma_Polyhedra_Library17Congruence_System6insertERKNS_10ConstraintE", 
                "_ZN23Parma_Polyhedra_Library4Grid12affine_imageENS_8VariableERKNS_17Linear_ExpressionERK10__gmp_exprIA1_12__mpz_structS7_E", 
                "__gxx_personality_v0", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron15add_constraintsERKNS_17Constraint_SystemE", 
                "itv_internal_free_MPQ", 
                "__cxa_atexit", 
                "_ZN23Parma_Polyhedra_Library10PolyhedronC1ENS_8TopologyERKNS_16Generator_SystemE", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron24external_memory_in_bytesEv", 
                "_ZNK23Parma_Polyhedra_Library4Grid15grid_generatorsEv", 
                "__gmpz_fdiv_q", 
                "ap_interval_set_top", 
                "ap_generator0_array_clear", 
                "__gmpz_set_si", 
                "_ZN23Parma_Polyhedra_Library30check_space_dimension_overflowEjjPKcS1_S1_", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron10generatorsEv", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron17update_generatorsEv", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron12affine_imageENS_8VariableERKNS_17Linear_ExpressionERK10__gmp_exprIA1_12__mpz_structS7_E", 
                "ap_linexpr0_alloc", 
                "ap_scalar_set_infty", 
                "_Znaj", 
                "ap_generic_asssub_linexpr_array", 
                "itv_lincons_array_init_MPQ", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron21fold_space_dimensionsERKNS_13Variables_SetENS_8VariableE", 
                "_ZN23Parma_Polyhedra_Library14Grid_Generator9grid_lineERKNS_17Linear_ExpressionENS_14RepresentationE", 
                "itv_lincons_array_set_ap_lincons0_array_MPQ", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron23add_recycled_generatorsERNS_16Generator_SystemE", 
                "_ZN23Parma_Polyhedra_Library4Grid30add_space_dimensions_and_embedEj", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron21minimized_constraintsEv", 
                "_ZN23Parma_Polyhedra_Library4Grid9constructERNS_21Grid_Generator_SystemE", 
                "ap_generic_bound_texpr", 
                "ap_manager_raise_exception", 
                "__gmpq_set_z", 
                "_ZN23Parma_Polyhedra_Library17Linear_ExpressionC1ERKS0_", 
                "_ZN23Parma_Polyhedra_Library17Congruence_System24permute_space_dimensionsERKSt6vectorINS_8VariableESaIS2_EE", 
                "__gmpz_lcm", 
                "_ZN23Parma_Polyhedra_Library17Congruence_System14const_iterator12skip_forwardEv", 
                "__stack_chk_fail", 
                "_ZN23Parma_Polyhedra_Library4Grid19intersection_assignERKS0_", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron13relation_withERKNS_10ConstraintE", 
                "_ZN23Parma_Polyhedra_Library10Congruence16strong_normalizeEv", 
                "_ZNK23Parma_Polyhedra_Library10Constraint28throw_dimension_incompatibleEPKcS2_NS_8VariableE", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron19intersection_assignERKS0_", 
                "_ZN23Parma_Polyhedra_Library10Constraint14sign_normalizeEv", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron35limited_BHRZ03_extrapolation_assignERKS0_RKNS_17Constraint_SystemEPj", 
                "ap_generator0_array_fprint", 
                "itv_internal_alloc_MPQ", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron13add_generatorERKNS_9GeneratorE", 
                "__cxa_throw_bad_array_new_length", 
                "__gmpz_mul", 
                "_ZNK23Parma_Polyhedra_Library4Grid24external_memory_in_bytesEv", 
                "ap_generic_meet_intlinearize_tcons_array", 
                "_ZN23Parma_Polyhedra_Library4Grid18upper_bound_assignERKS0_", 
                "_ZN23Parma_Polyhedra_LibraryeqERKNS_10PolyhedronES2_", 
                "_ZN23Parma_Polyhedra_Library17Linear_Expression19max_space_dimensionEv", 
                "itv_linearize_lincons_array_MPQ", 
                "_ZN23Parma_Polyhedra_Library4Grid9constructEjNS_18Degenerate_ElementE", 
                "_ZN23Parma_Polyhedra_Library4Grid15affine_preimageENS_8VariableERKNS_17Linear_ExpressionERK10__gmp_exprIA1_12__mpz_structS7_E", 
                "_ZN23Parma_Polyhedra_Library4Grid9set_emptyEv", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron8minimizeEv", 
                "_ZN23Parma_Polyhedra_Library31Generator_System_const_iterator12skip_forwardEv", 
                "ap_scalar_alloc", 
                "_ZNK23Parma_Polyhedra_Library4Grid13relation_withERKNS_10ConstraintE", 
                "_ZN23Parma_Polyhedra_Library4Grid17set_zero_dim_univEv", 
                "_ZNSt12length_errorD1Ev", 
                "__cxa_get_exception_ptr", 
                "__gmpq_set_si", 
                "_ZNK23Parma_Polyhedra_Library4Grid25minimized_grid_generatorsEv", 
                "_ZN23Parma_Polyhedra_Library14Grid_Generator9parameterERKNS_17Linear_ExpressionERK10__gmp_exprIA1_12__mpz_structS6_ENS_14RepresentationE", 
                "itv_lincons_array_clear_MPQ", 
                "_ZN23Parma_Polyhedra_Library9Generator5pointERKNS_17Linear_ExpressionERK10__gmp_exprIA1_12__mpz_structS6_ENS_14RepresentationE", 
                "__cxa_throw", 
                "fwrite", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron13relation_withERKNS_9GeneratorE", 
                "itv_sat_lincons_is_false_MPQ", 
                "ap_abstract0_dimension", 
                "__gmpz_set", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron8containsERKS0_", 
                "itv_quasilinearize_linexpr_MPQ", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron32bounded_H79_extrapolation_assignERKS0_RKNS_17Constraint_SystemEPj", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron15affine_preimageENS_8VariableERKNS_17Linear_ExpressionERK10__gmp_exprIA1_12__mpz_structS7_E", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron22throw_invalid_argumentEPKcS2_", 
                "__snprintf_chk", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron11is_universeEv", 
                "ap_linexpr0_is_linear", 
                "_ZNSt8ios_base4InitD1Ev", 
                "_ZN23Parma_Polyhedra_Library9Generator3rayERKNS_17Linear_ExpressionENS_14RepresentationE", 
                "ap_interval_free", 
                "_ZN23Parma_Polyhedra_Library4Grid28limited_extrapolation_assignERKS0_RKNS_17Congruence_SystemEPj", 
                "ap_manager_alloc", 
                "_ZNSt9exceptionD2Ev", 
                "ap_interval_set_bottom", 
                "_ZN23Parma_Polyhedra_Library10PolyhedronC2ENS_8TopologyEjNS_18Degenerate_ElementE", 
                "itv_quasilinearize_lincons_MPQ", 
                "_ZNK23Parma_Polyhedra_Library14Grid_Generator28throw_dimension_incompatibleEPKcS2_NS_8VariableE", 
                "_ZN23Parma_Polyhedra_Library4Grid24add_recycled_congruencesERNS_17Congruence_SystemE", 
                "_ZNK23Parma_Polyhedra_Library10Constraint15is_inconsistentEv", 
                "ap_scalar_reinit", 
                "itv_linexpr_is_quasilinear_MPQ", 
                "_ZNK23Parma_Polyhedra_Library4Grid8is_emptyEv", 
                "_ITM_deregisterTMCloneTable", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron30check_space_dimension_overflowEjNS_8TopologyEPKcS3_", 
                "_ZN23Parma_Polyhedra_Library17Linear_ExpressionC1ENS_8VariableENS_14RepresentationE", 
                "__gmpq_set", 
                "itv_linexpr_is_scalar_MPQ", 
                "ap_lincons0_array_clear", 
                "_ZN23Parma_Polyhedra_Library14Grid_Generator24permute_space_dimensionsERKSt6vectorINS_8VariableESaIS2_EE", 
                "_ZN23Parma_Polyhedra_Library4Grid18add_grid_generatorERKNS_14Grid_GeneratorE", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron11constraintsEv", 
                "itv_lincons_set_ap_lincons0_MPQ", 
                "__gmpq_canonicalize", 
                "_ZN23Parma_Polyhedra_Library4Grid23add_congruence_no_checkERKNS_10CongruenceE", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron19H79_widening_assignERKS0_Pj", 
                "__cxa_rethrow", 
                "_ZN23Parma_Polyhedra_Library9Generator24permute_space_dimensionsERKSt6vectorINS_8VariableESaIS2_EE", 
                "itv_linexpr_set_ap_linexpr0_MPQ", 
                "itv_linexpr_clear_MPQ", 
                "_ZN23Parma_Polyhedra_Library4Grid15widening_assignERKS0_Pj", 
                "ap_lincons0_make_unsat", 
                "_ZN23Parma_Polyhedra_Library17Congruence_System15insert_verbatimERNS_10CongruenceENS_13Recycle_InputE", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron30add_space_dimensions_and_embedEj", 
                "_ZNK23Parma_Polyhedra_Library4Grid28throw_dimension_incompatibleEPKcS2_RKNS_10ConstraintE", 
                "ap_generic_asssub_texpr_array", 
                "__gmpz_init_set_ui", 
                "_Unwind_Resume", 
                "__gmpq_mul", 
                "ap_generator0_array_make", 
                "ap_coeff_set_scalar_int", 
                "_ZN23Parma_Polyhedra_Library17Constraint_System6insertERKNS_10ConstraintE", 
                "_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron22expand_space_dimensionENS_8VariableEj", 
                "_ZNK23Parma_Polyhedra_Library9Generator22throw_invalid_argumentEPKcS2_", 
                "_ZNSt12length_errorC1EPKc", 
                "_ZNK23Parma_Polyhedra_Library4Grid7max_minERKNS_17Linear_ExpressionEPKcR10__gmp_exprIA1_12__mpz_structS8_ESA_RbPNS_9GeneratorE", 
                "_ZNK23Parma_Polyhedra_Library4Grid8containsERKS0_", 
                "_ZN23Parma_Polyhedra_Library9Generator4lineERKNS_17Linear_ExpressionENS_14RepresentationE", 
                "__cxa_allocate_exception", 
                "__gmpz_clear", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron27throw_topology_incompatibleEPKcS2_RKS0_", 
                "__cxa_end_catch", 
                "_ZNK23Parma_Polyhedra_Library10Congruence15is_inconsistentEv", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron35bounded_BHRZ03_extrapolation_assignERKS0_RKNS_17Constraint_SystemEPj", 
                "_ZNSt16invalid_argumentC1EPKc", 
                "ap_coeff_zero", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron22BHRZ03_widening_assignERKS0_Pj", 
                "_ZN23Parma_Polyhedra_LibraryeqERKNS_4GridES2_", 
                "malloc", 
                "ap_scalar_equal", 
                "ap_abstract0_top", 
                "_ZN23Parma_Polyhedra_Library32Constraint_System_const_iterator12skip_forwardEv", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron20minimized_generatorsEv", 
                "_ZN23Parma_Polyhedra_Library4Grid23add_constraint_no_checkERKNS_10ConstraintE", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron24add_recycled_constraintsERNS_17Constraint_SystemE", 
                "__gmpz_init", 
                "_ZSt20__throw_length_errorPKc", 
                "_ZNK23Parma_Polyhedra_Library9Generator28throw_dimension_incompatibleEPKcS2_NS_8VariableE", 
                "ap_scalar_infty", 
                "__gmpq_clear", 
                "ap_interval_array_alloc", 
                "_ZN23Parma_Polyhedra_Library17Linear_ExpressionC1ERKS0_NS_14RepresentationE", 
                "ap_interval_set_itv_MPQ", 
                "_ZN23Parma_Polyhedra_Library10PolyhedronC2ERKS0_NS_16Complexity_ClassE", 
                "_ZN23Parma_Polyhedra_Library4Grid21fold_space_dimensionsERKNS_13Variables_SetENS_8VariableE", 
                "__cxa_begin_catch", 
                "_ZN23Parma_Polyhedra_Library16Generator_System6insertERKNS_9GeneratorE", 
                "ap_lincons0_array_fprint", 
                "ap_generic_to_tcons_array", 
                "__fprintf_chk", 
                "_ZN23Parma_Polyhedra_Library4InitD1Ev", 
                "_ZN23Parma_Polyhedra_Library9Generator13closure_pointERKNS_17Linear_ExpressionERK10__gmp_exprIA1_12__mpz_structS6_ENS_14RepresentationE", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron26topological_closure_assignEv", 
                "_ZNSt8ios_base4InitC1Ev", 
                "_ZN23Parma_Polyhedra_Library4Grid22expand_space_dimensionENS_8VariableEj", 
                "_ZNK23Parma_Polyhedra_Library4Grid17update_generatorsEv", 
                "__cxa_finalize", 
                "_ZNKSt11logic_error4whatEv", 
                "__gmpq_init", 
                "__gmpz_tdiv_q", 
                "ap_generic_sat_tcons", 
                "_ITM_registerTMCloneTable", 
                "_ZNK23Parma_Polyhedra_Library10Polyhedron7max_minERKNS_17Linear_ExpressionEbR10__gmp_exprIA1_12__mpz_structS6_ES8_RbRNS_9GeneratorE", 
                "_ZN23Parma_Polyhedra_Library4Grid22throw_invalid_argumentEPKcS2_", 
                "__gmpz_set_ui", 
                "itv_lincons_array_is_quasilinear_MPQ", 
                "_ZN23Parma_Polyhedra_Library4InitC1Ev", 
                "_ZN23Parma_Polyhedra_Library4GridC1ERKS0_NS_16Complexity_ClassE", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron32limited_H79_extrapolation_assignERKS0_RKNS_17Constraint_SystemEPj", 
                "itv_linexpr_init_MPQ", 
                "_ZNSt11logic_errorC1ERKS_", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron17set_zero_dim_univEv", 
                "ap_lincons0_array_make", 
                "_ZdaPv", 
                "_ZN23Parma_Polyhedra_Library4Grid32add_space_dimensions_and_projectEj", 
                "__gmpz_swap", 
                "_ZSt17__throw_bad_allocv", 
                "_ZN23Parma_Polyhedra_Library10Polyhedron14add_constraintERKNS_10ConstraintE", 
                "_ZNK23Parma_Polyhedra_Library10Congruence28throw_dimension_incompatibleEPKcS2_NS_8VariableE", 
                "_ZNSt16invalid_argumentD1Ev", 
                "_ZNK23Parma_Polyhedra_Library4Grid13relation_withERKNS_14Grid_GeneratorE", 
                "_ZNK23Parma_Polyhedra_Library14Grid_Generator22throw_invalid_argumentEPKcS2_", 
                "_ZN23Parma_Polyhedra_Library14Grid_Generator10grid_pointERKNS_17Linear_ExpressionERK10__gmp_exprIA1_12__mpz_structS6_ENS_14RepresentationE", 
                "_ZNK23Parma_Polyhedra_Library4Grid11congruencesEv"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libap_ppl.so.0.9.11"
        }, 
        "usr/lib/libpolkaRll_so_0_9_11": {
            "report-functions": [
                "ap_intlinearize_texpr0", 
                "ap_intlinearize_texpr0_array", 
                "ap_lincons0_make_unsat", 
                "_ITM_registerTMCloneTable", 
                "itv_canonicalize_Rll", 
                "ap_generic_asssub_texpr_array", 
                "ap_linexpr0_is_linear", 
                "itv_lincons_array_set_ap_lincons0_array_Rll", 
                "ap_linexpr0_is_real", 
                "ap_dimchange_alloc", 
                "ap_manager_alloc", 
                "ap_generic_meet_intlinearize_tcons_array", 
                "itv_linexpr_init_Rll", 
                "ap_manager_raise_exception", 
                "ap_generic_to_tcons_array", 
                "itv_quasilinearize_lincons_array_Rll", 
                "ap_manager_get_funopt", 
                "itv_internal_alloc_Rll", 
                "itv_lincons_set_ap_lincons0_Rll", 
                "ap_texpr0_array_is_scalar", 
                "itv_set_ap_interval_Rll", 
                "qsort", 
                "ap_generic_asssub_linexpr_array", 
                "ap_linexpr0_alloc", 
                "ap_interval_set_top", 
                "ap_interval_set_itv_Rll", 
                "itv_linexpr_clear_Rll", 
                "itv_quasilinearize_lincons_Rll", 
                "memmove", 
                "abort", 
                "itv_lincons_array_clear_Rll", 
                "ap_linexpr0_array_is_linear", 
                "itv_intlinearize_ap_texpr0_Rll", 
                "ap_linexpr0_is_quasilinear", 
                "ap_texpr0_array_is_interval_linear", 
                "__gmon_start__", 
                "itv_lincons_array_init_Rll", 
                "__gmpz_import", 
                "ap_coeff_set_scalar_int", 
                "itv_lincons_array_is_quasilinear_Rll", 
                "itv_linexpr_set_ap_linexpr0_Rll", 
                "__gmpq_init", 
                "ap_interval_alloc", 
                "_ITM_deregisterTMCloneTable", 
                "itv_internal_free_Rll", 
                "itv_mul_num_Rll", 
                "ap_interval_reinit", 
                "ap_lincons0_array_fprint", 
                "__fprintf_chk", 
                "realloc", 
                "malloc", 
                "free", 
                "itv_eval_ap_texpr0_Rll", 
                "ap_linexpr0_array_free", 
                "__printf_chk", 
                "ap_lincons0_array_clear", 
                "__stack_chk_fail", 
                "__gmpq_canonicalize", 
                "ap_interval_set_bottom", 
                "__gmpq_clear", 
                "itv_lincons_array_reduce_integer_Rll", 
                "__sprintf_chk", 
                "itv_linearize_lincons_array_Rll", 
                "itv_div_num_Rll", 
                "ap_texpr0_is_interval_linear", 
                "ap_lincons0_array_make", 
                "ap_generator0_array_make", 
                "__cxa_finalize", 
                "itv_intlinearize_ap_tcons0_Rll", 
                "ap_linexpr0_free", 
                "__gmpz_set_ui", 
                "ap_interval_array_alloc", 
                "ap_manager_set_abort_if_exception"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libpolkaRll.so.0.9.11"
        }, 
        "usr/lib/liboctD_debug_so_0_9_11": {
            "report-functions": [
                "ap_generic_bound_texpr", 
                "__stack_chk_fail", 
                "ap_generic_meet_intlinearize_tcons_array", 
                "mpfr_cmp_d", 
                "ap_scalar_free", 
                "__snprintf_chk", 
                "ap_scalar_neg", 
                "ap_interval_array_alloc", 
                "ap_manager_alloc", 
                "mpfr_get_d", 
                "free", 
                "ap_linexpr0_free", 
                "ap_generic_to_tcons_array", 
                "ap_interval_set_bottom", 
                "ap_generic_sat_tcons", 
                "fmin", 
                "_ITM_deregisterTMCloneTable", 
                "ap_lincons0_make_unsat", 
                "realloc", 
                "ap_coeff_set_scalar_int", 
                "ap_scalar_cmp", 
                "ap_generator0_array_make", 
                "ap_manager_set_abort_if_exception", 
                "ap_fpu_init", 
                "abort", 
                "mpfr_clear", 
                "ap_interval_free", 
                "malloc", 
                "ap_manager_raise_exception", 
                "__gmon_start__", 
                "ap_scalar_reinit", 
                "ap_lincons0_array_make", 
                "fmax", 
                "ap_interval_alloc", 
                "__fprintf_chk", 
                "mpfr_init2", 
                "ap_generic_asssub_texpr_array", 
                "_ITM_registerTMCloneTable", 
                "ldexp", 
                "ap_lincons0_fprint", 
                "ap_scalar_set_int", 
                "ap_scalar_set_infty", 
                "ap_linexpr0_alloc", 
                "ap_coeff_reduce"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/liboctD_debug.so.0.9.11"
        }, 
        "usr/lib/libapronxx_debug_so_0_9_11": {
            "report-functions": [
                "_ZNSo9_M_insertIlEERSoT_", 
                "mpfr_cmp_d", 
                "_ZNSt8ios_base6xallocEv", 
                "_ZNSt8ios_base4InitC1Ev", 
                "_ZNSt8ios_base4InitD1Ev", 
                "__cxa_finalize", 
                "_ZNSo9_M_insertIdEERSoT_", 
                "mpfr_get_d", 
                "_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate", 
                "ap_abstract1_clear", 
                "_ZNSo9_M_insertImEERSoT_", 
                "ap_manager_free", 
                "mpfr_free_str", 
                "__gmon_start__", 
                "_ZlsRSoPK12__mpq_struct", 
                "_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_i", 
                "mpfr_get_str", 
                "__stack_chk_fail", 
                "__gxx_personality_v0", 
                "free", 
                "strlen", 
                "__cxa_atexit", 
                "_ITM_deregisterTMCloneTable", 
                "_ITM_registerTMCloneTable", 
                "ap_scalar_infty"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libapronxx_debug.so.0.9.11"
        }, 
        "usr/lib/libt1pMPFR_so_0_9_11": {
            "report-functions": [
                "itv_canonicalize_MPFR", 
                "ap_abstract0_meet_lincons_array", 
                "ap_abstract0_dimension", 
                "ap_scalar_set_infty", 
                "ap_texpr0_free", 
                "ap_interval_set_itv_MPFR", 
                "free", 
                "itv_intlinearize_ap_tcons0_array_MPFR", 
                "box_manager_alloc", 
                "__snprintf_chk", 
                "ap_abstract0_bound_linexpr", 
                "mpfr_set_si_2exp", 
                "ap_interval_is_leq", 
                "mpfr_init", 
                "malloc", 
                "ap_abstract0_join", 
                "mpfr_number_p", 
                "ap_interval_alloc_set", 
                "__sprintf_chk", 
                "ap_coeff_set_interval", 
                "strlen", 
                "itv_set_ap_interval_MPFR", 
                "ap_manager_raise_exception", 
                "__errno_location", 
                "realloc", 
                "ap_interval_free", 
                "__printf_chk", 
                "itv_set_ap_coeff_MPFR", 
                "ap_coeff_set_scalar_double", 
                "ap_abstract0_meet", 
                "itv_neg_MPFR", 
                "clock", 
                "ap_abstract0_of_box", 
                "ap_coeff_set_itv_MPFR", 
                "ap_abstract0_bound_dimension", 
                "ap_abstract0_is_leq", 
                "ap_lincons0_print", 
                "ap_abstract0_fprint", 
                "mpfr_neg", 
                "ap_linexpr0_free", 
                "__gmon_start__", 
                "mpfr_equal_p", 
                "mpfr_max", 
                "ap_interval_cmp", 
                "ap_abstract0_is_bottom", 
                "mmap", 
                "mpfr_clear", 
                "__stack_chk_fail", 
                "itv_internal_alloc_MPFR", 
                "_ITM_deregisterTMCloneTable", 
                "mpfr_mul_2si", 
                "ap_scalar_reinit", 
                "mpfr_add", 
                "memmove", 
                "ap_abstract0_top", 
                "mpfr_set_erangeflag", 
                "ap_manager_free", 
                "ap_abstract0_remove_dimensions", 
                "_ITM_registerTMCloneTable", 
                "ap_manager_get_funopt", 
                "mpfr_free_str", 
                "ap_coeff_reinit", 
                "calloc", 
                "ap_dimchange_alloc", 
                "ap_abstract0_of_lincons_array", 
                "itv_sub_MPFR", 
                "ap_texpr0_from_linexpr0", 
                "mpfr_get_d", 
                "abort", 
                "ap_abstract0_is_eq", 
                "ap_abstract0_size", 
                "ap_coeff_init", 
                "mpfr_set_d", 
                "itv_internal_free_MPFR", 
                "mpfr_integer_p", 
                "mpfr_get_si", 
                "close", 
                "itv_lincons_array_clear_MPFR", 
                "ap_linexpr0_alloc", 
                "getcwd", 
                "mpfr_min", 
                "fputs", 
                "strerror", 
                "ap_abstract0_add_dimensions", 
                "mpfr_cmp3", 
                "sysconf", 
                "mpfr_set4", 
                "ap_interval_alloc", 
                "ap_abstract0_copy", 
                "itv_div_MPFR", 
                "mpfr_get_str", 
                "mpfr_div_2ui", 
                "itv_fprint_MPFR", 
                "munmap", 
                "ap_linexpr0_coeffref", 
                "mpfr_cmp_d", 
                "ap_environment_dim_of_var", 
                "__fprintf_chk", 
                "itv_print_MPFR", 
                "ap_lincons0_make_unsat", 
                "mpfr_set_inf", 
                "fflush", 
                "itv_sqrt_MPFR", 
                "mpfr_set_ui_2exp", 
                "ap_lincons0_array_make", 
                "itv_mul_MPFR", 
                "itv_abs_MPFR", 
                "pk_manager_alloc", 
                "ap_double_set_scalar", 
                "ap_lincons0_array_clear", 
                "ap_manager_alloc", 
                "itv_boxize_lincons_array_MPFR", 
                "ap_generic_meetjoin_array", 
                "mpfr_sgn", 
                "open", 
                "__cxa_finalize", 
                "itv_array_set_ap_interval_array_MPFR", 
                "ap_scalar_alloc_set", 
                "mpfr_sub", 
                "fesetround", 
                "ap_abstract0_free"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libt1pMPFR.so.0.9.11"
        }, 
        "usr/lib/libpolkaMPQ_so_0_9_11": {
            "report-functions": [
                "__gmpz_sizeinbase", 
                "itv_div_num_MPQ", 
                "ap_generic_asssub_texpr_array", 
                "_ITM_registerTMCloneTable", 
                "ap_generic_meet_intlinearize_tcons_array", 
                "__gmpz_fdiv_q_2exp", 
                "ap_intlinearize_texpr0", 
                "ap_linexpr0_array_is_linear", 
                "ap_intlinearize_texpr0_array", 
                "ap_manager_alloc", 
                "__gmpz_cdiv_q_2exp", 
                "__gmpz_mul", 
                "__gmpz_init", 
                "__gmpz_add", 
                "memmove", 
                "itv_lincons_array_set_ap_lincons0_array_MPQ", 
                "ap_interval_set_top", 
                "qsort", 
                "__gmpq_set_si", 
                "__cxa_finalize", 
                "__gmpz_mod", 
                "ap_texpr0_array_is_scalar", 
                "__gmpz_fdiv_q", 
                "ap_lincons0_make_unsat", 
                "__fprintf_chk", 
                "ap_linexpr0_is_linear", 
                "__gmpz_divexact", 
                "__gmpz_set", 
                "ap_manager_raise_exception", 
                "itv_internal_free_MPQ", 
                "abort", 
                "ap_linexpr0_free", 
                "itv_lincons_array_clear_MPQ", 
                "ap_texpr0_is_interval_linear", 
                "itv_internal_alloc_MPQ", 
                "__printf_chk", 
                "ap_lincons0_array_make", 
                "ap_manager_get_funopt", 
                "ap_lincons0_array_clear", 
                "ap_linexpr0_alloc", 
                "itv_lincons_array_is_quasilinear_MPQ", 
                "itv_eval_ap_texpr0_MPQ", 
                "ap_interval_alloc", 
                "__gmpz_tdiv_q_2exp", 
                "__gmpz_cmp_si", 
                "itv_lincons_set_ap_lincons0_MPQ", 
                "ap_texpr0_array_is_interval_linear", 
                "__sprintf_chk", 
                "__gmpq_clear", 
                "ap_coeff_reinit", 
                "itv_quasilinearize_lincons_array_MPQ", 
                "ap_abstract0_top", 
                "__gmpz_out_str", 
                "ap_generator0_array_make", 
                "itv_lincons_array_reduce_integer_MPQ", 
                "free", 
                "itv_set_ap_interval_MPQ", 
                "ap_lincons0_array_fprint", 
                "itv_linexpr_init_MPQ", 
                "__gmpz_get_si", 
                "__gmpq_add", 
                "__gmpz_clear", 
                "__gmpq_canonicalize", 
                "ap_interval_reinit", 
                "ap_linexpr0_is_real", 
                "__gmpz_lcm", 
                "itv_intlinearize_ap_texpr0_MPQ", 
                "ap_interval_set_bottom", 
                "__gmpz_sub", 
                "__gmon_start__", 
                "ap_linexpr0_array_free", 
                "itv_quasilinearize_lincons_MPQ", 
                "__stack_chk_fail", 
                "__gmpz_gcd", 
                "__gmpq_cmp", 
                "itv_intlinearize_ap_tcons0_MPQ", 
                "ap_interval_array_alloc", 
                "itv_canonicalize_MPQ", 
                "ap_manager_set_abort_if_exception", 
                "_ITM_deregisterTMCloneTable", 
                "ap_dimchange_alloc", 
                "ap_generic_asssub_linexpr_array", 
                "itv_mul_num_MPQ", 
                "__gmpq_set", 
                "ap_generic_to_tcons_array", 
                "__gmpz_init_set", 
                "__gmpq_init", 
                "__gmpz_cdiv_q", 
                "ap_coeff_set_scalar_int", 
                "itv_linexpr_clear_MPQ", 
                "__gmpz_sub_ui", 
                "__gmpz_cmp", 
                "realloc", 
                "__gmpz_cmp_ui", 
                "itv_linearize_lincons_array_MPQ", 
                "ap_linexpr0_is_quasilinear", 
                "__gmpz_set_ui", 
                "ap_interval_set_itv_MPQ", 
                "itv_linexpr_set_ap_linexpr0_MPQ", 
                "malloc", 
                "itv_lincons_array_init_MPQ"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libpolkaMPQ.so.0.9.11"
        }, 
        "usr/lib/liboctMPQ_so_0_9_11": {
            "report-functions": [
                "ap_manager_raise_exception", 
                "__gmpq_clear", 
                "ap_generic_to_tcons_array", 
                "ap_generic_meet_intlinearize_tcons_array", 
                "ap_interval_free", 
                "__gmpz_import", 
                "ap_scalar_reinit", 
                "_ITM_deregisterTMCloneTable", 
                "__gmpq_mul", 
                "ap_generic_asssub_texpr_array", 
                "__gmpz_clear", 
                "__gmon_start__", 
                "ap_scalar_cmp", 
                "ap_manager_set_abort_if_exception", 
                "__gmpq_mul_2exp", 
                "__gmpz_set_si", 
                "__gmpq_set_ui", 
                "ap_lincons0_array_make", 
                "__snprintf_chk", 
                "ap_coeff_reduce", 
                "mpfr_get_z_2exp", 
                "ap_scalar_neg", 
                "ap_interval_alloc", 
                "__fprintf_chk", 
                "ap_lincons0_make_unsat", 
                "ap_linexpr0_alloc", 
                "abort", 
                "__cxa_finalize", 
                "__gmpq_init", 
                "ap_lincons0_fprint", 
                "ap_scalar_free", 
                "ap_manager_alloc", 
                "__stack_chk_fail", 
                "ap_scalar_set_int", 
                "__gmpz_cdiv_qr", 
                "malloc", 
                "__gmpq_cmp", 
                "ap_scalar_set_infty", 
                "__gmpq_cmp_si", 
                "__gmpq_sub", 
                "ap_fpu_init", 
                "ap_interval_set_bottom", 
                "ap_generic_bound_texpr", 
                "__gmpq_set_si", 
                "ap_coeff_set_scalar_int", 
                "mpfr_number_p", 
                "__gmpz_cmp_ui", 
                "__gmpq_set_d", 
                "__gmpz_get_si", 
                "__gmpq_out_str", 
                "_ITM_registerTMCloneTable", 
                "ap_generator0_array_make", 
                "__gmpq_div_2exp", 
                "__gmpz_init", 
                "__gmpz_cmp", 
                "ap_generic_sat_tcons", 
                "__gmpz_export", 
                "__gmpz_sizeinbase", 
                "realloc", 
                "__gmpq_add", 
                "ap_linexpr0_free", 
                "__gmpq_set"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/liboctMPQ.so.0.9.11"
        }, 
        "usr/lib/libapron_so_0_9_11": {
            "report-functions": [
                "__fprintf_chk", 
                "mpfr_add", 
                "__gmpfr_out_str", 
                "__gmpq_set_d", 
                "__strdup", 
                "__stack_chk_fail", 
                "mpfr_get_str", 
                "__gmpq_set", 
                "__gmpq_out_str", 
                "mpfr_max", 
                "__gmpz_export", 
                "__gmpn_perfect_square_p", 
                "mpfr_ui_div", 
                "__gmpz_gcd", 
                "mpfr_rint_trunc", 
                "__gmpz_cmp", 
                "__gmpz_mod", 
                "__sprintf_chk", 
                "sqrtl", 
                "mpfr_neg", 
                "__gmpq_sub", 
                "mpfr_set4", 
                "__gmpz_root", 
                "__gmpz_sub_ui", 
                "mpfr_init", 
                "memmove", 
                "__gmpz_set", 
                "_ITM_deregisterTMCloneTable", 
                "mpfr_number_p", 
                "__gmpz_sqrt", 
                "__gmpz_cmp_ui", 
                "__gmpz_init", 
                "qsort", 
                "frexpl", 
                "mpfr_swap", 
                "__gmpq_set_si", 
                "mpfr_get_si", 
                "mpfr_set_z", 
                "__gmpz_fdiv_q", 
                "fesetround", 
                "__gmpz_divexact", 
                "mpfr_rint_floor", 
                "__gmpz_lcm", 
                "nextafter", 
                "mpfr_set_d", 
                "mpfr_init2", 
                "mpfr_div_2ui", 
                "mpfr_root", 
                "__gmpz_mul_2exp", 
                "__gmpz_mul", 
                "fputs", 
                "__gmpz_set_ui", 
                "__gmpq_get_str", 
                "mpfr_sub_ui", 
                "mpfr_cmp_d", 
                "mpfr_set_ui_2exp", 
                "__gmpz_init_set", 
                "__gmpq_mul", 
                "__gmpz_tdiv_q", 
                "__gmpz_get_si", 
                "nextafterf", 
                "free", 
                "mpfr_cmp_si_2exp", 
                "calloc", 
                "mpfr_set_prec", 
                "mpfr_get_z", 
                "__gmpq_set_ui", 
                "mpfr_sgn", 
                "__gmpz_add_ui", 
                "__gmpz_out_str", 
                "mpfr_sub", 
                "mpfr_add_ui", 
                "__gmpq_canonicalize", 
                "__gmpz_cdiv_q_2exp", 
                "malloc", 
                "__gmpz_set_d", 
                "__gmpq_div", 
                "__gmpz_cdiv_qr", 
                "mpfr_cmp3", 
                "mpfr_equal_p", 
                "__gmpq_equal", 
                "fmaxl", 
                "mpfr_mul_2si", 
                "mpfr_set_q", 
                "__gmon_start__", 
                "mpfr_min", 
                "__gmpz_get_str", 
                "ldexp", 
                "_ITM_registerTMCloneTable", 
                "floor", 
                "__gmpz_set_si", 
                "ceil", 
                "__gmpz_cdiv_q", 
                "mpfr_mul", 
                "__gmpz_init_set_si", 
                "mpfr_div", 
                "__gmpz_clear", 
                "__gmpz_sizeinbase", 
                "mpfr_get_z_2exp", 
                "mpfr_set_erangeflag", 
                "__gmpq_add", 
                "fminl", 
                "fmax", 
                "__gmpz_sub", 
                "mpfr_get_ld", 
                "__gmpq_cmp", 
                "ldexpl", 
                "mpfr_integer_p", 
                "mpfr_sqrt", 
                "mpfr_clear", 
                "__gmpz_add", 
                "__gmpq_div_2exp", 
                "abort", 
                "__snprintf_chk", 
                "realloc", 
                "__gmpq_mul_2exp", 
                "__gmpq_init", 
                "mpfr_free_str", 
                "sqrt", 
                "mpfr_cmp_q", 
                "mpfr_get_d", 
                "mpfr_rint_ceil", 
                "mpfr_pow_ui", 
                "__cxa_finalize", 
                "nextafterl", 
                "mpfr_set_ld", 
                "__gmpz_import", 
                "strcmp", 
                "strlen", 
                "__gmpq_cmp_si", 
                "snprintf", 
                "__gmpz_pow_ui", 
                "fmin", 
                "__gmpfr_mpfr_get_sj", 
                "__gmpq_clear", 
                "mpfr_set_si_2exp", 
                "__gmpq_inv"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libapron.so.0.9.11"
        }, 
        "usr/lib/libboxD_so_0_9_11": {
            "report-functions": [
                "realloc", 
                "itv_internal_alloc_D", 
                "ap_policy_manager_alloc", 
                "ap_coeff_set_scalar", 
                "abort", 
                "itv_set_ap_interval_D", 
                "itv_boxize_lincons_array_D", 
                "_ITM_registerTMCloneTable", 
                "ap_interval_alloc", 
                "__stack_chk_fail", 
                "ap_generic_to_tcons_array", 
                "__snprintf_chk", 
                "malloc", 
                "ap_fpu_init", 
                "__gmpq_clear", 
                "ap_lincons0_make_unsat", 
                "ap_manager_alloc", 
                "ap_interval_free", 
                "ap_scalar_reinit", 
                "fmin", 
                "itv_lincons_array_clear_D", 
                "ap_linexpr0_copy", 
                "mpfr_set_q", 
                "free", 
                "ap_interval_set_itv_D", 
                "itv_lincons_set_ap_lincons0_D", 
                "ap_interval_is_leq", 
                "itv_eval_cstlincons_D", 
                "ap_scalar_sgn", 
                "ap_generic_asssub_linexpr_array", 
                "itv_canonicalize_D", 
                "ap_manager_raise_exception", 
                "ap_manager_set_abort_if_exception", 
                "__cxa_finalize", 
                "ap_coeff_reinit", 
                "itv_linexpr_clear_D", 
                "_ITM_deregisterTMCloneTable", 
                "ap_coeff_set_scalar_int", 
                "itv_lincons_array_set_ap_lincons0_array_D", 
                "ap_linexpr0_coeffref", 
                "ap_interval_array_alloc", 
                "itv_eval_ap_linexpr0_D", 
                "itv_intlinearize_ap_tcons0_array_D", 
                "itv_linexpr_init_D", 
                "fputs", 
                "ap_scalar_set_double", 
                "itv_internal_free_D", 
                "mpfr_clear", 
                "ap_dimchange_init", 
                "itv_fprint_D", 
                "fmax", 
                "ap_linexpr0_alloc", 
                "itv_meet_ap_tcons0_array_D", 
                "__fprintf_chk", 
                "ap_scalar_neg", 
                "itv_eval_linexpr_D", 
                "mpfr_cmp_d", 
                "ap_generator0_array_make", 
                "itv_lincons_array_init_D", 
                "ap_generic_asssub_texpr_array", 
                "mpfr_init2", 
                "mpfr_get_d", 
                "ap_interval_set_bottom", 
                "itv_eval_ap_texpr0_D", 
                "__gmon_start__", 
                "ap_coeff_set_scalar_double", 
                "ap_lincons0_array_make", 
                "ap_scalar_set_infty"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libboxD.so.0.9.11"
        }, 
        "usr/lib/libt1pMPFR_debug_so_0_9_11": {
            "report-functions": [
                "ap_dimchange_alloc", 
                "ap_abstract0_fprint", 
                "close", 
                "itv_internal_alloc_MPFR", 
                "itv_abs_MPFR", 
                "ap_abstract0_bound_dimension", 
                "mpfr_cmp3", 
                "mpfr_set4", 
                "fflush", 
                "mpfr_integer_p", 
                "ap_abstract0_is_eq", 
                "getcwd", 
                "mpfr_div_2ui", 
                "ap_interval_alloc", 
                "ap_abstract0_dimension", 
                "ap_environment_dim_of_var", 
                "abort", 
                "itv_set_ap_coeff_MPFR", 
                "itv_intlinearize_ap_tcons0_array_MPFR", 
                "ap_interval_cmp", 
                "mpfr_add", 
                "ap_interval_is_leq", 
                "mpfr_set_d", 
                "mpfr_set_inf", 
                "mpfr_set_erangeflag", 
                "ap_lincons0_array_clear", 
                "ap_manager_raise_exception", 
                "ap_abstract0_remove_dimensions", 
                "ap_double_set_scalar", 
                "ap_generic_meetjoin_array", 
                "ap_abstract0_top", 
                "memmove", 
                "itv_fprint_MPFR", 
                "ap_coeff_set_interval", 
                "_ITM_deregisterTMCloneTable", 
                "mpfr_min", 
                "ap_coeff_set_scalar_int", 
                "ap_scalar_alloc_set", 
                "mpfr_mul_2si", 
                "itv_mul_MPFR", 
                "ap_abstract0_meet_lincons_array", 
                "ap_texpr0_from_linexpr0", 
                "itv_array_set_ap_interval_array_MPFR", 
                "__printf_chk", 
                "ap_abstract0_bound_linexpr", 
                "realloc", 
                "sysconf", 
                "mpfr_free_str", 
                "calloc", 
                "mpfr_set_si_2exp", 
                "ap_interval_alloc_set", 
                "mpfr_set_ui_2exp", 
                "strlen", 
                "ap_texpr0_fprint", 
                "munmap", 
                "ap_manager_free", 
                "ap_dimchange_add_invert", 
                "open", 
                "itv_canonicalize_MPFR", 
                "free", 
                "strerror", 
                "mpfr_get_si", 
                "clock", 
                "ap_dimperm_fprint", 
                "ap_scalar_reinit", 
                "ap_abstract0_free", 
                "ap_lincons0_print", 
                "__assert_fail", 
                "ap_lincons0_make_unsat", 
                "mpfr_neg", 
                "box_manager_alloc", 
                "mmap", 
                "ap_coeff_init", 
                "ap_coeff_set_scalar_double", 
                "ap_interval_free", 
                "ap_lincons0_array_fprint", 
                "ap_tcons0_array_fprint", 
                "ap_linexpr0_coeffref", 
                "ap_manager_alloc", 
                "ap_abstract0_is_leq", 
                "itv_div_MPFR", 
                "ap_abstract0_meet", 
                "mpfr_clear", 
                "mpfr_sub", 
                "mpfr_get_d", 
                "ap_texpr0_free", 
                "ap_manager_get_funopt", 
                "itv_boxize_lincons_array_MPFR", 
                "ap_abstract0_of_lincons_array", 
                "pk_manager_alloc", 
                "mpfr_max", 
                "ap_scalar_set_infty", 
                "__gmon_start__", 
                "fesetround", 
                "__cxa_finalize", 
                "__stack_chk_fail", 
                "__errno_location", 
                "__fprintf_chk", 
                "__sprintf_chk", 
                "mpfr_sgn", 
                "itv_sub_MPFR", 
                "ap_linexpr0_free", 
                "fputs", 
                "ap_abstract0_is_bottom", 
                "itv_lincons_array_clear_MPFR", 
                "itv_neg_MPFR", 
                "malloc", 
                "__snprintf_chk", 
                "mpfr_equal_p", 
                "mpfr_cmp_d", 
                "ap_dimchange_fprint", 
                "mpfr_number_p", 
                "itv_set_ap_interval_MPFR", 
                "ap_abstract0_add_dimensions", 
                "mpfr_get_str", 
                "ap_coeff_set_itv_MPFR", 
                "ap_abstract0_of_box", 
                "itv_sqrt_MPFR", 
                "ap_abstract0_size", 
                "mpfr_init", 
                "ap_interval_set_itv_MPFR", 
                "ap_abstract0_copy", 
                "_ITM_registerTMCloneTable", 
                "ap_coeff_reinit", 
                "itv_internal_free_MPFR", 
                "ap_linexpr0_alloc", 
                "ap_lincons0_array_make"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libt1pMPFR_debug.so.0.9.11"
        }, 
        "usr/lib/libap_pkgrid_debug_so_0_9_11": {
            "report-functions": [
                "__gmon_start__", 
                "_ITM_registerTMCloneTable", 
                "pk_free", 
                "__stack_chk_fail", 
                "__cxa_finalize", 
                "ap_ppl_grid_to_lincons_array", 
                "ap_ppl_grid_meet_lincons_array", 
                "ap_scalar_infty", 
                "ap_lincons0_array_clear", 
                "pk_meet_lincons_array", 
                "__gmpq_mul", 
                "ap_reducedproduct_manager_alloc", 
                "ap_ppl_grid_is_bottom", 
                "__gmpz_cmp_ui", 
                "ap_ppl_grid_free", 
                "__gmpz_cdiv_q", 
                "pk_bottom", 
                "lincons0_of_vector", 
                "__assert_fail", 
                "pk_is_bottom", 
                "__gmpq_add", 
                "pk_dimension", 
                "ap_linexpr0_copy", 
                "_ITM_deregisterTMCloneTable", 
                "ap_interval_free", 
                "__gmpq_div", 
                "pk_bound_linexpr", 
                "ap_lincons0_array_make", 
                "__gmpz_set_ui", 
                "pk_approximate", 
                "__gmpz_fdiv_q", 
                "__gmpq_sub", 
                "ap_coeff_neg", 
                "pk_canonicalize", 
                "ap_ppl_grid_canonicalize", 
                "ap_scalar_alloc_set", 
                "ap_ppl_grid_bottom"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libap_pkgrid_debug.so.0.9.11"
        }, 
        "usr/lib/liboctD_so_0_9_11": {
            "report-functions": [
                "ap_generic_bound_texpr", 
                "ap_lincons0_fprint", 
                "ap_interval_alloc", 
                "ap_lincons0_array_make", 
                "mpfr_get_d", 
                "__fprintf_chk", 
                "ap_generic_to_tcons_array", 
                "abort", 
                "mpfr_cmp_d", 
                "ap_scalar_set_int", 
                "ap_interval_array_alloc", 
                "free", 
                "fmax", 
                "mpfr_clear", 
                "malloc", 
                "mpfr_set_q", 
                "ldexp", 
                "ap_generator0_array_make", 
                "ap_generic_sat_tcons", 
                "ap_manager_raise_exception", 
                "ap_interval_set_bottom", 
                "ap_scalar_reinit", 
                "_ITM_registerTMCloneTable", 
                "mpfr_init2", 
                "ap_manager_set_abort_if_exception", 
                "ap_coeff_set_scalar_int", 
                "_ITM_deregisterTMCloneTable", 
                "__stack_chk_fail", 
                "realloc", 
                "ap_scalar_neg", 
                "ap_coeff_reduce", 
                "ap_generic_meet_intlinearize_tcons_array", 
                "__gmon_start__", 
                "ap_lincons0_make_unsat", 
                "ap_generic_asssub_texpr_array", 
                "ap_scalar_free", 
                "fmin", 
                "__cxa_finalize", 
                "ap_manager_alloc", 
                "ap_scalar_cmp", 
                "ap_interval_free", 
                "ap_scalar_set_infty", 
                "ap_linexpr0_free", 
                "__snprintf_chk"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/liboctD.so.0.9.11"
        }, 
        "usr/lib/libboxMPQ_so_0_9_11": {
            "report-functions": [
                "__stack_chk_fail", 
                "__gmpq_div_2exp", 
                "itv_lincons_set_ap_lincons0_MPQ", 
                "itv_internal_free_MPQ", 
                "ap_interval_free", 
                "__gmpq_init", 
                "__gmpq_set_d", 
                "__gmpq_equal", 
                "itv_lincons_array_init_MPQ", 
                "ap_scalar_reinit", 
                "ap_scalar_sgn", 
                "ap_fpu_init", 
                "ap_linexpr0_copy", 
                "itv_canonicalize_MPQ", 
                "ap_generator0_array_make", 
                "__gmpz_init", 
                "ap_scalar_set_infty", 
                "ap_generic_asssub_linexpr_array", 
                "_ITM_registerTMCloneTable", 
                "__gmpz_cdiv_qr", 
                "itv_fprint_MPQ", 
                "ap_linexpr0_alloc", 
                "__gmpz_set_si", 
                "ap_linexpr0_coeffref", 
                "__cxa_finalize", 
                "ap_generic_asssub_texpr_array", 
                "__fprintf_chk", 
                "__gmpq_clear", 
                "itv_lincons_array_reduce_integer_MPQ", 
                "__gmpq_set_si", 
                "ap_coeff_set_scalar_double", 
                "ap_scalar_set_double", 
                "ap_manager_alloc", 
                "__gmpz_clear", 
                "itv_intlinearize_ap_tcons0_array_MPQ", 
                "ap_coeff_set_scalar_int", 
                "ap_coeff_set_scalar", 
                "ap_policy_manager_alloc", 
                "__gmpq_div", 
                "malloc", 
                "free", 
                "mpfr_number_p", 
                "itv_meet_ap_tcons0_array_MPQ", 
                "ap_manager_set_abort_if_exception", 
                "abort", 
                "mpfr_get_z_2exp", 
                "__gmon_start__", 
                "ap_lincons0_make_unsat", 
                "ap_dimchange_init", 
                "_ITM_deregisterTMCloneTable", 
                "itv_linexpr_reinit_MPQ", 
                "ap_manager_raise_exception", 
                "itv_eval_cstlincons_MPQ", 
                "ap_interval_is_leq", 
                "itv_eval_ap_linexpr0_MPQ", 
                "itv_lincons_array_set_ap_lincons0_array_MPQ", 
                "ap_interval_alloc", 
                "itv_eval_linexpr_MPQ", 
                "itv_lincons_array_clear_MPQ", 
                "realloc", 
                "ap_interval_set_itv_MPQ", 
                "itv_eval_ap_texpr0_MPQ", 
                "ap_lincons0_array_make", 
                "__gmpq_mul_2exp", 
                "__snprintf_chk", 
                "__gmpq_set", 
                "__gmpz_get_si", 
                "itv_boxize_lincons_array_MPQ", 
                "itv_linexpr_init_MPQ", 
                "fputs", 
                "itv_linexpr_clear_MPQ", 
                "ap_interval_set_bottom", 
                "__gmpq_cmp", 
                "mpfr_clear", 
                "ap_interval_array_alloc", 
                "itv_internal_alloc_MPQ", 
                "ap_coeff_reinit", 
                "ap_scalar_neg", 
                "itv_set_ap_interval_MPQ"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libboxMPQ.so.0.9.11"
        }, 
        "usr/lib/libap_pkgrid_so_0_9_11": {
            "report-functions": [
                "__gmpz_cdiv_q", 
                "__stack_chk_fail", 
                "__gmpz_cmp_ui", 
                "__gmpq_init", 
                "ap_linexpr0_copy", 
                "pk_free", 
                "pk_bound_linexpr", 
                "__gmpz_set_ui", 
                "ap_lincons0_array_clear", 
                "pk_approximate", 
                "ap_interval_free", 
                "__gmpq_sub", 
                "ap_lincons0_array_make", 
                "pk_canonicalize", 
                "ap_scalar_alloc_set", 
                "__gmpq_mul", 
                "__cxa_finalize", 
                "pk_meet_lincons_array", 
                "__gmon_start__", 
                "pk_is_bottom", 
                "ap_ppl_grid_bottom", 
                "__gmpq_add", 
                "ap_ppl_grid_is_bottom", 
                "lincons0_of_vector", 
                "__gmpq_div", 
                "ap_reducedproduct_manager_alloc", 
                "_ITM_deregisterTMCloneTable", 
                "__gmpq_clear", 
                "pk_bottom", 
                "ap_ppl_grid_free", 
                "_ITM_registerTMCloneTable", 
                "ap_ppl_grid_to_lincons_array", 
                "ap_ppl_grid_meet_lincons_array", 
                "ap_coeff_neg", 
                "__gmpz_fdiv_q", 
                "ap_ppl_grid_canonicalize"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libap_pkgrid.so.0.9.11"
        }, 
        "usr/lib/libpolkaMPQ_debug_so_0_9_11": {
            "report-functions": [
                "ap_manager_raise_exception", 
                "_ITM_registerTMCloneTable", 
                "__gmpz_get_si", 
                "ap_linexpr0_is_quasilinear", 
                "ap_texpr0_array_is_scalar", 
                "__gmpz_init", 
                "ap_intlinearize_texpr0", 
                "ap_interval_set_top", 
                "itv_internal_alloc_MPQ", 
                "ap_lincons0_make_unsat", 
                "__printf_chk", 
                "ap_linexpr0_is_real", 
                "ap_lincons0_array_fprint", 
                "ap_coeff_set_scalar_int", 
                "__gmpz_mul", 
                "__gmpq_set_si", 
                "__gmpz_set_si", 
                "ap_linexpr0_array_is_linear", 
                "ap_interval_set_itv_MPQ", 
                "__stack_chk_fail", 
                "__gmpz_sizeinbase", 
                "ap_generic_meet_intlinearize_tcons_array", 
                "itv_linexpr_is_scalar_MPQ", 
                "__sprintf_chk", 
                "itv_lincons_array_init_MPQ", 
                "itv_linexpr_clear_MPQ", 
                "__gmpz_cmp_si", 
                "ap_lincons0_array_clear", 
                "__gmpz_tdiv_q_2exp", 
                "ap_linexpr0_is_linear", 
                "__gmpz_fdiv_q_2exp", 
                "itv_intlinearize_ap_tcons0_MPQ", 
                "free", 
                "__gmpq_set", 
                "itv_eval_ap_texpr0_MPQ", 
                "ap_manager_get_funopt", 
                "itv_internal_free_MPQ", 
                "__gmpz_mod", 
                "itv_quasilinearize_lincons_MPQ", 
                "__gmpz_sub", 
                "ap_generic_asssub_linexpr_array", 
                "__gmpz_cmp_ui", 
                "__fprintf_chk", 
                "__gmpq_equal", 
                "itv_mul_num_MPQ", 
                "realloc", 
                "itv_linearize_lincons_array_MPQ", 
                "__gmpq_clear", 
                "itv_canonicalize_MPQ", 
                "__gmpq_canonicalize", 
                "itv_set_ap_interval_MPQ", 
                "ap_generic_asssub_texpr_array", 
                "ap_generator0_array_make", 
                "__gmpz_fdiv_q", 
                "__gmpq_add", 
                "ap_abstract0_top", 
                "ap_manager_alloc", 
                "__gmpz_out_str", 
                "memmove", 
                "ap_manager_set_abort_if_exception", 
                "itv_lincons_array_reduce_integer_MPQ", 
                "itv_intlinearize_ap_texpr0_MPQ", 
                "__gmpz_set_ui", 
                "__gmpz_cdiv_q", 
                "__gmpz_sub_ui", 
                "ap_generic_to_tcons_array", 
                "malloc", 
                "ap_interval_set_bottom", 
                "itv_linexpr_set_ap_linexpr0_MPQ", 
                "itv_quasilinearize_lincons_array_MPQ", 
                "__gmpz_divexact", 
                "itv_div_num_MPQ", 
                "__gmpz_cmp", 
                "__gmpz_lcm", 
                "ap_coeff_reinit", 
                "ap_interval_alloc", 
                "__gmon_start__", 
                "__gmpz_init_set", 
                "itv_lincons_array_is_quasilinear_MPQ", 
                "itv_lincons_array_set_ap_lincons0_array_MPQ", 
                "ap_dimchange_alloc", 
                "ap_linexpr0_free", 
                "__gmpz_gcd", 
                "itv_lincons_set_ap_lincons0_MPQ", 
                "itv_linexpr_init_MPQ", 
                "__gmpz_set", 
                "__cxa_finalize", 
                "itv_lincons_array_clear_MPQ", 
                "__assert_fail", 
                "ap_intlinearize_texpr0_array", 
                "_ITM_deregisterTMCloneTable", 
                "ap_lincons0_array_make", 
                "ap_linexpr0_array_free", 
                "ap_interval_reinit", 
                "abort", 
                "ap_linexpr0_alloc", 
                "ap_texpr0_array_is_interval_linear", 
                "ap_texpr0_is_interval_linear", 
                "ap_interval_array_alloc", 
                "__gmpq_init", 
                "__gmpz_cdiv_q_2exp", 
                "__gmpz_add", 
                "__gmpz_clear"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libpolkaMPQ_debug.so.0.9.11"
        }, 
        "usr/lib/libboxMPFR_so_0_9_11": {
            "report-functions": [
                "ap_scalar_reinit", 
                "ap_generic_to_tcons_array", 
                "mpfr_set4", 
                "ap_generator0_array_make", 
                "ap_coeff_set_scalar_int", 
                "itv_lincons_array_clear_MPFR", 
                "itv_boxize_lincons_array_MPFR", 
                "mpfr_max", 
                "itv_meet_ap_tcons0_array_MPFR", 
                "mpfr_cmp3", 
                "ap_interval_free", 
                "itv_set_ap_interval_MPFR", 
                "mpfr_cmp_d", 
                "mpfr_free_str", 
                "ap_interval_is_leq", 
                "ap_generic_asssub_texpr_array", 
                "itv_eval_linexpr_MPFR", 
                "mpfr_set_inf", 
                "itv_internal_free_MPFR", 
                "ap_scalar_set_double", 
                "mpfr_set_erangeflag", 
                "__snprintf_chk", 
                "mpfr_init", 
                "ap_manager_set_abort_if_exception", 
                "itv_intlinearize_ap_tcons0_array_MPFR", 
                "ap_linexpr0_alloc", 
                "itv_lincons_array_set_ap_lincons0_array_MPFR", 
                "ap_linexpr0_copy", 
                "ap_dimchange_init", 
                "mpfr_div", 
                "realloc", 
                "mpfr_set_q", 
                "mpfr_number_p", 
                "ap_lincons0_array_make", 
                "ap_scalar_neg", 
                "mpfr_clear", 
                "ap_interval_array_alloc", 
                "ap_interval_alloc", 
                "__gmpq_clear", 
                "fputs", 
                "itv_linexpr_reinit_MPFR", 
                "ap_fpu_init", 
                "itv_eval_ap_linexpr0_MPFR", 
                "ap_linexpr0_coeffref", 
                "itv_lincons_array_reduce_integer_MPFR", 
                "ap_coeff_set_scalar", 
                "itv_linexpr_clear_MPFR", 
                "mpfr_min", 
                "free", 
                "itv_lincons_array_init_MPFR", 
                "itv_lincons_set_ap_lincons0_MPFR", 
                "itv_eval_cstlincons_MPFR", 
                "ap_scalar_sgn", 
                "malloc", 
                "itv_fprint_MPFR", 
                "ap_interval_set_bottom", 
                "mpfr_neg", 
                "__cxa_finalize", 
                "itv_internal_alloc_MPFR", 
                "itv_linexpr_init_MPFR", 
                "_ITM_deregisterTMCloneTable", 
                "mpfr_get_str", 
                "ap_coeff_reinit", 
                "__fprintf_chk", 
                "_ITM_registerTMCloneTable", 
                "ap_generic_asssub_linexpr_array", 
                "__stack_chk_fail", 
                "itv_canonicalize_MPFR", 
                "ap_coeff_set_scalar_double", 
                "ap_manager_alloc", 
                "ap_lincons0_make_unsat", 
                "ap_interval_set_itv_MPFR", 
                "mpfr_set_d", 
                "ap_manager_raise_exception", 
                "mpfr_equal_p", 
                "ap_scalar_set_infty", 
                "mpfr_get_d", 
                "itv_eval_ap_texpr0_MPFR", 
                "abort", 
                "ap_policy_manager_alloc", 
                "mpfr_get_si"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libboxMPFR.so.0.9.11"
        }, 
        "usr/lib/libt1pMPQ_so_0_9_11": {
            "report-functions": [
                "ap_coeff_reinit", 
                "ap_texpr0_from_linexpr0", 
                "ap_scalar_alloc_set", 
                "mpfr_init2", 
                "__gmpq_out_str", 
                "ap_interval_alloc", 
                "ap_lincons0_array_make", 
                "ap_coeff_set_scalar_int", 
                "close", 
                "ap_linexpr0_coeffref", 
                "itv_div_MPQ", 
                "ap_coeff_set_interval", 
                "abort", 
                "_ITM_registerTMCloneTable", 
                "free", 
                "ap_abstract0_remove_dimensions", 
                "__gmpq_clear", 
                "__gmpq_equal", 
                "__gmon_start__", 
                "ap_generic_meetjoin_array", 
                "ap_abstract0_free", 
                "ap_manager_get_funopt", 
                "ap_dimchange_add_invert", 
                "munmap", 
                "itv_intlinearize_ap_tcons0_array_MPQ", 
                "ap_lincons0_array_clear", 
                "ap_texpr0_free", 
                "ap_scalar_reinit", 
                "itv_internal_free_MPQ", 
                "ap_environment_dim_of_var", 
                "malloc", 
                "__printf_chk", 
                "ap_coeff_set_itv_MPQ", 
                "strerror", 
                "itv_fprint_MPQ", 
                "itv_abs_MPQ", 
                "ap_abstract0_is_bottom", 
                "itv_canonicalize_MPQ", 
                "pk_manager_alloc", 
                "itv_boxize_lincons_array_MPQ", 
                "itv_lincons_array_clear_MPQ", 
                "ap_linexpr0_alloc", 
                "ap_manager_alloc", 
                "strlen", 
                "realloc", 
                "ap_abstract0_bound_linexpr", 
                "clock", 
                "ap_interval_alloc_set", 
                "__gmpq_div_2exp", 
                "box_manager_alloc", 
                "ap_abstract0_of_lincons_array", 
                "ap_interval_free", 
                "ap_manager_free", 
                "ap_interval_set_itv_MPQ", 
                "fflush", 
                "_ITM_deregisterTMCloneTable", 
                "ap_coeff_set_scalar_double", 
                "fesetround", 
                "__gmpq_mul_2exp", 
                "ap_dimchange_alloc", 
                "__stack_chk_fail", 
                "memmove", 
                "ap_abstract0_dimension", 
                "ap_abstract0_top", 
                "itv_sub_MPQ", 
                "__gmpz_set_si", 
                "ap_abstract0_meet_lincons_array", 
                "itv_set_ap_coeff_MPQ", 
                "__gmpz_init", 
                "__gmpq_sub", 
                "__gmpq_set_si", 
                "__gmpz_get_si", 
                "ap_abstract0_join", 
                "itv_mul_MPQ", 
                "__gmpq_set_d", 
                "__cxa_finalize", 
                "getcwd", 
                "ap_abstract0_add_dimensions", 
                "itv_neg_MPQ", 
                "ap_abstract0_size", 
                "ap_double_set_scalar", 
                "ap_scalar_set_infty", 
                "ap_abstract0_copy", 
                "calloc", 
                "itv_set_ap_interval_MPQ", 
                "itv_print_MPQ", 
                "ap_abstract0_bound_dimension", 
                "__gmpq_set", 
                "open", 
                "__gmpz_cdiv_qr", 
                "itv_array_set_ap_interval_array_MPQ", 
                "mpfr_clear", 
                "mpfr_get_d", 
                "__fprintf_chk", 
                "__snprintf_chk", 
                "ap_interval_is_leq", 
                "ap_abstract0_fprint", 
                "ap_abstract0_is_eq", 
                "ap_abstract0_of_box", 
                "__errno_location", 
                "itv_internal_alloc_MPQ", 
                "sysconf", 
                "__gmpq_add", 
                "mpfr_set_q", 
                "ap_interval_cmp", 
                "__sprintf_chk", 
                "ap_abstract0_is_leq", 
                "ap_linexpr0_free", 
                "ap_lincons0_make_unsat", 
                "mmap", 
                "ap_lincons0_print", 
                "ap_coeff_init", 
                "__gmpq_init", 
                "__gmpq_cmp", 
                "ap_manager_raise_exception", 
                "__gmpz_clear"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libt1pMPQ.so.0.9.11"
        }, 
        "usr/lib/libapron_debug_so_0_9_11": {
            "report-functions": [
                "__gmpz_export", 
                "mpfr_get_z_2exp", 
                "mpfr_sub", 
                "mpfr_equal_p", 
                "__gmpz_add", 
                "__gmpq_set_d", 
                "snprintf", 
                "mpfr_cmp_ld", 
                "__gmpq_mul_2exp", 
                "_ITM_registerTMCloneTable", 
                "__gmpz_sub_ui", 
                "__gmpz_out_str", 
                "mpfr_cmp_d", 
                "__gmpz_clear", 
                "mpfr_set_ld", 
                "__sprintf_chk", 
                "malloc", 
                "__fprintf_chk", 
                "mpfr_set_z", 
                "__gmpq_set", 
                "calloc", 
                "__gmpz_add_ui", 
                "sqrt", 
                "__gmpq_canonicalize", 
                "strcmp", 
                "fmin", 
                "mpfr_get_ld", 
                "__gmpq_init", 
                "mpfr_set_ui_2exp", 
                "__gmpfr_mpfr_get_sj", 
                "__gmpz_fdiv_q", 
                "ceil", 
                "__gmpz_mod", 
                "mpfr_clear", 
                "mpfr_div_2ui", 
                "__gmpq_sub", 
                "__gmpz_import", 
                "mpfr_rint_floor", 
                "__gmpq_out_str", 
                "floor", 
                "mpfr_rint_trunc", 
                "nextafter", 
                "frexpl", 
                "__gmpz_gcd", 
                "nextafterl", 
                "__gmpq_equal", 
                "__gmpq_set_si", 
                "fminl", 
                "__gmpz_divexact", 
                "strlen", 
                "mpfr_set_d", 
                "mpfr_mul", 
                "mpfr_get_str", 
                "mpfr_set_prec", 
                "__snprintf_chk", 
                "mpfr_get_z", 
                "__gmpfr_out_str", 
                "__gmpz_cdiv_qr", 
                "qsort", 
                "mpfr_max", 
                "__gmpz_mul_2exp", 
                "__gmpq_div_2exp", 
                "__cxa_finalize", 
                "__gmpq_mul", 
                "mpfr_sgn", 
                "mpfr_set_inf", 
                "mpfr_ui_div", 
                "__gmon_start__", 
                "mpfr_number_p", 
                "__gmpq_div", 
                "mpfr_init", 
                "__gmpz_sub", 
                "__gmpz_init_set_si", 
                "__gmpz_get_si", 
                "__gmpq_cmp_si", 
                "mpfr_swap", 
                "__gmpq_clear", 
                "abort", 
                "sqrtl", 
                "mpfr_sub_ui", 
                "mpfr_div", 
                "mpfr_neg", 
                "mpfr_free_str", 
                "memmove", 
                "__gmpq_set_ui", 
                "_ITM_deregisterTMCloneTable", 
                "mpfr_get_d", 
                "__gmpz_set_si", 
                "nextafterf", 
                "__gmpz_mul", 
                "__gmpz_sizeinbase", 
                "fmax", 
                "ldexpl", 
                "mpfr_mul_2si", 
                "__stack_chk_fail", 
                "mpfr_pow_ui", 
                "mpfr_set_erangeflag", 
                "__assert_fail", 
                "__gmpz_init_set", 
                "__gmpz_lcm", 
                "mpfr_integer_p", 
                "mpfr_set_si_2exp", 
                "mpfr_cmp_si_2exp", 
                "__gmpz_pow_ui", 
                "mpfr_sqrt", 
                "mpfr_init2", 
                "fesetround", 
                "__gmpz_tdiv_q", 
                "fputs", 
                "__gmpq_get_str", 
                "__gmpn_perfect_square_p", 
                "mpfr_get_si", 
                "mpfr_cmp3", 
                "__gmpz_cmp", 
                "__gmpz_get_str", 
                "mpfr_add_ui", 
                "__gmpz_init", 
                "mpfr_cmp_q", 
                "__gmpz_cmp_ui", 
                "mpfr_rint_ceil", 
                "__gmpz_set", 
                "__gmpz_cdiv_q_2exp", 
                "__gmpz_sqrt", 
                "fmaxl", 
                "__gmpz_cdiv_q", 
                "mpfr_root", 
                "ldexp", 
                "mpfr_min", 
                "__gmpz_set_ui", 
                "__gmpq_cmp", 
                "__gmpq_inv", 
                "__strdup", 
                "__gmpq_add", 
                "realloc", 
                "mpfr_set4", 
                "mpfr_set_q", 
                "mpfr_add", 
                "__gmpz_set_d"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libapron_debug.so.0.9.11"
        }, 
        "usr/lib/libpolkaRll_debug_so_0_9_11": {
            "report-functions": [
                "ap_texpr0_is_interval_linear", 
                "__gmpq_clear", 
                "memmove", 
                "ap_intlinearize_texpr0", 
                "ap_texpr0_array_is_scalar", 
                "__printf_chk", 
                "ap_lincons0_make_unsat", 
                "ap_linexpr0_is_real", 
                "_ITM_deregisterTMCloneTable", 
                "ap_interval_set_top", 
                "itv_internal_free_Rll", 
                "ap_interval_set_itv_Rll", 
                "itv_lincons_set_ap_lincons0_Rll", 
                "ap_abstract0_top", 
                "__gmon_start__", 
                "ap_linexpr0_is_quasilinear", 
                "ap_coeff_reinit", 
                "__stack_chk_fail", 
                "malloc", 
                "itv_eval_ap_texpr0_Rll", 
                "ap_generic_asssub_texpr_array", 
                "ap_linexpr0_array_is_linear", 
                "__gmpq_canonicalize", 
                "ap_linexpr0_array_free", 
                "ap_lincons0_array_clear", 
                "__assert_fail", 
                "__sprintf_chk", 
                "itv_intlinearize_ap_tcons0_Rll", 
                "itv_div_num_Rll", 
                "itv_linexpr_init_Rll", 
                "qsort", 
                "itv_set_ap_interval_Rll", 
                "ap_manager_get_funopt", 
                "itv_intlinearize_ap_texpr0_Rll", 
                "ap_generic_to_tcons_array", 
                "itv_lincons_array_reduce_integer_Rll", 
                "abort", 
                "realloc", 
                "ap_linexpr0_free", 
                "ap_generator0_array_make", 
                "__cxa_finalize", 
                "ap_generic_asssub_linexpr_array", 
                "itv_lincons_array_clear_Rll", 
                "ap_interval_set_bottom", 
                "ap_interval_reinit", 
                "itv_mul_num_Rll", 
                "__gmpz_import", 
                "itv_lincons_array_is_quasilinear_Rll", 
                "ap_lincons0_array_fprint", 
                "itv_linexpr_set_ap_linexpr0_Rll", 
                "ap_manager_alloc", 
                "ap_interval_alloc", 
                "free", 
                "itv_quasilinearize_lincons_array_Rll", 
                "itv_linexpr_clear_Rll", 
                "ap_texpr0_array_is_interval_linear", 
                "itv_linexpr_is_scalar_Rll", 
                "itv_lincons_array_set_ap_lincons0_array_Rll", 
                "itv_quasilinearize_lincons_Rll", 
                "itv_linearize_lincons_array_Rll", 
                "__gmpz_set_ui", 
                "ap_interval_array_alloc", 
                "itv_canonicalize_Rll", 
                "itv_lincons_array_init_Rll", 
                "_ITM_registerTMCloneTable", 
                "ap_coeff_set_scalar_int", 
                "ap_lincons0_array_make", 
                "ap_linexpr0_alloc", 
                "__fprintf_chk", 
                "ap_manager_raise_exception", 
                "itv_internal_alloc_Rll", 
                "ap_intlinearize_texpr0_array", 
                "ap_generic_meet_intlinearize_tcons_array", 
                "ap_dimchange_alloc", 
                "ap_manager_set_abort_if_exception"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libpolkaRll_debug.so.0.9.11"
        }, 
        "usr/lib/libboxMPQ_debug_so_0_9_11": {
            "report-functions": [
                "__gmpq_init", 
                "ap_linexpr0_alloc", 
                "itv_canonicalize_MPQ", 
                "ap_interval_array_alloc", 
                "__snprintf_chk", 
                "itv_internal_alloc_MPQ", 
                "ap_generic_to_tcons_array", 
                "ap_generic_asssub_linexpr_array", 
                "__gmpq_equal", 
                "ap_generator0_array_make", 
                "ap_coeff_set_scalar_double", 
                "__gmpq_set_d", 
                "itv_linexpr_init_MPQ", 
                "ap_lincons0_array_make", 
                "itv_lincons_array_clear_MPQ", 
                "ap_scalar_set_infty", 
                "ap_generic_asssub_texpr_array", 
                "ap_scalar_sgn", 
                "ap_manager_raise_exception", 
                "itv_lincons_array_reduce_integer_MPQ", 
                "ap_interval_free", 
                "itv_eval_linexpr_MPQ", 
                "__gmpq_out_str", 
                "ap_linexpr0_copy", 
                "ap_coeff_reinit", 
                "realloc", 
                "__gmpz_cdiv_qr", 
                "mpfr_clear", 
                "__gmpq_mul_2exp", 
                "itv_lincons_set_ap_lincons0_MPQ", 
                "__gmpq_set", 
                "ap_coeff_set_scalar", 
                "ap_scalar_reinit", 
                "free", 
                "ap_interval_set_bottom", 
                "itv_meet_ap_tcons0_array_MPQ", 
                "itv_boxize_lincons_array_MPQ", 
                "itv_set_ap_interval_MPQ", 
                "abort", 
                "mpfr_get_z_2exp", 
                "ap_interval_is_leq", 
                "ap_scalar_neg", 
                "__stack_chk_fail", 
                "_ITM_registerTMCloneTable", 
                "__gmpq_div", 
                "itv_lincons_array_init_MPQ", 
                "ap_fpu_init", 
                "__gmpq_cmp", 
                "ap_dimchange_init", 
                "mpfr_number_p", 
                "fputs", 
                "_ITM_deregisterTMCloneTable", 
                "ap_interval_alloc", 
                "__gmpz_clear", 
                "__gmpq_set_si", 
                "ap_scalar_infty", 
                "__gmon_start__", 
                "__cxa_finalize", 
                "ap_lincons0_make_unsat", 
                "itv_linexpr_clear_MPQ", 
                "ap_linexpr0_coeffref", 
                "ap_interval_set_itv_MPQ", 
                "itv_eval_ap_linexpr0_MPQ", 
                "__gmpq_clear", 
                "ap_scalar_set_double", 
                "__fprintf_chk", 
                "ap_coeff_set_scalar_int", 
                "__assert_fail", 
                "__gmpz_set_si", 
                "itv_internal_free_MPQ", 
                "itv_lincons_array_set_ap_lincons0_array_MPQ", 
                "ap_manager_alloc", 
                "ap_manager_set_abort_if_exception", 
                "itv_fprint_MPQ", 
                "itv_eval_ap_texpr0_MPQ", 
                "__gmpz_get_si", 
                "ap_policy_manager_alloc", 
                "itv_linexpr_reinit_MPQ", 
                "malloc", 
                "__gmpz_init", 
                "itv_intlinearize_ap_tcons0_array_MPQ"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libboxMPQ_debug.so.0.9.11"
        }, 
        "usr/lib/libboxMPFR_debug_so_0_9_11": {
            "report-functions": [
                "realloc", 
                "ap_coeff_reinit", 
                "itv_eval_cstlincons_MPFR", 
                "ap_scalar_reinit", 
                "itv_linexpr_reinit_MPFR", 
                "ap_generic_asssub_texpr_array", 
                "_ITM_deregisterTMCloneTable", 
                "__stack_chk_fail", 
                "itv_eval_linexpr_MPFR", 
                "ap_coeff_set_scalar_int", 
                "ap_scalar_set_infty", 
                "itv_lincons_array_set_ap_lincons0_array_MPFR", 
                "ap_coeff_set_scalar_double", 
                "ap_policy_manager_alloc", 
                "mpfr_div", 
                "itv_fprint_MPFR", 
                "itv_boxize_lincons_array_MPFR", 
                "free", 
                "ap_scalar_sgn", 
                "__assert_fail", 
                "fputs", 
                "malloc", 
                "__gmon_start__", 
                "ap_linexpr0_alloc", 
                "itv_linexpr_init_MPFR", 
                "ap_generic_to_tcons_array", 
                "mpfr_get_si", 
                "mpfr_set_q", 
                "ap_lincons0_make_unsat", 
                "itv_linexpr_clear_MPFR", 
                "mpfr_get_d", 
                "ap_interval_free", 
                "mpfr_number_p", 
                "abort", 
                "itv_internal_alloc_MPFR", 
                "ap_scalar_infty", 
                "mpfr_min", 
                "ap_scalar_neg", 
                "ap_dimchange_init", 
                "mpfr_max", 
                "ap_manager_set_abort_if_exception", 
                "mpfr_integer_p", 
                "mpfr_init", 
                "ap_linexpr0_copy", 
                "ap_lincons0_array_make", 
                "mpfr_clear", 
                "mpfr_set4", 
                "mpfr_set_d", 
                "mpfr_equal_p", 
                "itv_lincons_set_ap_lincons0_MPFR", 
                "itv_eval_ap_texpr0_MPFR", 
                "itv_intlinearize_ap_tcons0_array_MPFR", 
                "mpfr_free_str", 
                "ap_coeff_set_scalar", 
                "itv_meet_ap_tcons0_array_MPFR", 
                "ap_interval_set_itv_MPFR", 
                "itv_set_ap_interval_MPFR", 
                "ap_linexpr0_coeffref", 
                "mpfr_cmp3", 
                "mpfr_get_str", 
                "mpfr_cmp_d", 
                "itv_eval_ap_linexpr0_MPFR", 
                "ap_scalar_set_double", 
                "ap_generic_asssub_linexpr_array", 
                "__cxa_finalize", 
                "mpfr_set_inf", 
                "ap_fpu_init", 
                "mpfr_set_erangeflag", 
                "ap_generator0_array_make", 
                "ap_interval_is_leq", 
                "itv_lincons_array_init_MPFR", 
                "ap_interval_array_alloc", 
                "_ITM_registerTMCloneTable", 
                "ap_manager_alloc", 
                "__gmpq_clear", 
                "__snprintf_chk", 
                "__fprintf_chk", 
                "itv_lincons_array_reduce_integer_MPFR", 
                "itv_lincons_array_clear_MPFR", 
                "ap_interval_set_bottom", 
                "ap_interval_alloc", 
                "itv_internal_free_MPFR", 
                "ap_manager_raise_exception"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libboxMPFR_debug.so.0.9.11"
        }, 
        "usr/lib/libapronxx_so_0_9_11": {
            "report-functions": [
                "strlen", 
                "__cxa_atexit", 
                "mpfr_get_str", 
                "ap_abstract1_clear", 
                "_ZlsRSoPK12__mpq_struct", 
                "__stack_chk_fail", 
                "ap_abstract0_free", 
                "_ITM_registerTMCloneTable", 
                "mpfr_cmp_d", 
                "_ZNSt8ios_base6xallocEv", 
                "ap_scalar_infty", 
                "mpfr_free_str", 
                "_ITM_deregisterTMCloneTable", 
                "free", 
                "__gxx_personality_v0", 
                "_ZNSo9_M_insertIlEERSoT_", 
                "_ZNSt8ios_base4InitD1Ev", 
                "_ZNSo9_M_insertImEERSoT_", 
                "_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_i", 
                "_ZNSo9_M_insertIdEERSoT_", 
                "_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate", 
                "_ZNSt8ios_base4InitC1Ev", 
                "__gmon_start__", 
                "mpfr_get_d"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libapronxx.so.0.9.11"
        }, 
        "usr/lib/libt1pD_so_0_9_11": {
            "report-functions": [
                "ap_abstract0_top", 
                "ap_abstract0_fprint", 
                "ap_abstract0_is_bottom", 
                "itv_internal_free_D", 
                "ap_abstract0_meet_lincons_array", 
                "box_manager_alloc", 
                "_ITM_deregisterTMCloneTable", 
                "ap_scalar_set_infty", 
                "itv_array_set_ap_interval_array_D", 
                "itv_intlinearize_ap_tcons0_array_D", 
                "ap_coeff_reinit", 
                "ap_texpr0_free", 
                "__gmon_start__", 
                "ap_abstract0_meet", 
                "itv_boxize_lincons_array_D", 
                "ldexp", 
                "ap_abstract0_is_eq", 
                "ap_double_set_scalar", 
                "ap_manager_alloc", 
                "ap_abstract0_bound_linexpr", 
                "ap_coeff_set_interval", 
                "getcwd", 
                "ap_abstract0_copy", 
                "itv_fprint_D", 
                "close", 
                "__stack_chk_fail", 
                "ap_abstract0_is_leq", 
                "fesetround", 
                "memmove", 
                "ap_interval_is_leq", 
                "ap_linexpr0_free", 
                "fmin", 
                "ap_manager_get_funopt", 
                "strerror", 
                "realloc", 
                "ap_dimchange_alloc", 
                "itv_canonicalize_D", 
                "itv_internal_alloc_D", 
                "clock", 
                "ap_scalar_reinit", 
                "ap_abstract0_dimension", 
                "itv_abs_D", 
                "ap_interval_cmp", 
                "ap_lincons0_array_make", 
                "ap_linexpr0_alloc", 
                "calloc", 
                "munmap", 
                "ap_generic_meetjoin_array", 
                "__snprintf_chk", 
                "ap_interval_free", 
                "ap_lincons0_make_unsat", 
                "ap_abstract0_bound_dimension", 
                "itv_sub_D", 
                "ap_scalar_alloc_set", 
                "strlen", 
                "__printf_chk", 
                "ap_coeff_init", 
                "abort", 
                "mmap", 
                "ap_abstract0_remove_dimensions", 
                "ap_coeff_set_scalar_int", 
                "ap_interval_alloc", 
                "itv_neg_D", 
                "itv_set_ap_coeff_D", 
                "ap_coeff_set_scalar_double", 
                "__cxa_finalize", 
                "open", 
                "ap_abstract0_size", 
                "itv_mul_D", 
                "ap_coeff_set_itv_D", 
                "itv_lincons_array_clear_D", 
                "ap_interval_set_itv_D", 
                "ap_dimchange_add_invert", 
                "free", 
                "ap_manager_raise_exception", 
                "__sprintf_chk", 
                "ap_linexpr0_coeffref", 
                "pk_manager_alloc", 
                "ap_abstract0_free", 
                "itv_sqrt_D", 
                "malloc", 
                "ap_texpr0_from_linexpr0", 
                "sysconf", 
                "ap_abstract0_of_lincons_array", 
                "ap_lincons0_array_clear", 
                "ap_interval_alloc_set", 
                "itv_set_ap_interval_D", 
                "ap_abstract0_add_dimensions", 
                "ap_abstract0_of_box", 
                "ap_abstract0_join", 
                "ap_manager_free", 
                "fmax", 
                "ap_environment_dim_of_var", 
                "itv_print_D", 
                "itv_div_D", 
                "_ITM_registerTMCloneTable", 
                "fflush", 
                "__fprintf_chk"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libt1pD.so.0.9.11"
        }, 
        "complexity": {
            "r2 aa": "failed: ERROR: Cannot find radare2 in PATH"
        }, 
        "usr/lib/libt1pMPQ_debug_so_0_9_11": {
            "report-functions": [
                "ap_double_set_scalar", 
                "ap_linexpr0_free", 
                "__gmpz_set_si", 
                "ap_abstract0_meet_lincons_array", 
                "ap_environment_dim_of_var", 
                "realloc", 
                "__gmpq_sub", 
                "ap_linexpr0_coeffref", 
                "itv_fprint_MPQ", 
                "itv_set_ap_coeff_MPQ", 
                "ap_abstract0_top", 
                "calloc", 
                "ap_interval_is_leq", 
                "__gmpq_cmp", 
                "mpfr_get_d", 
                "itv_array_set_ap_interval_array_MPQ", 
                "itv_lincons_array_clear_MPQ", 
                "__snprintf_chk", 
                "ap_dimchange_add_invert", 
                "malloc", 
                "itv_neg_MPQ", 
                "itv_sqrt_MPQ", 
                "__sprintf_chk", 
                "ap_tcons0_array_fprint", 
                "open", 
                "__cxa_finalize", 
                "ap_lincons0_array_fprint", 
                "mpfr_clear", 
                "ap_generic_meetjoin_array", 
                "itv_canonicalize_MPQ", 
                "__gmpz_get_si", 
                "ap_coeff_set_interval", 
                "_ITM_deregisterTMCloneTable", 
                "ap_scalar_alloc_set", 
                "ap_abstract0_bound_linexpr", 
                "ap_abstract0_bound_dimension", 
                "ap_abstract0_free", 
                "__gmpq_set_d", 
                "__gmpq_set", 
                "ap_scalar_reinit", 
                "mpfr_init2", 
                "ap_lincons0_array_make", 
                "ap_abstract0_is_eq", 
                "__gmpq_set_si", 
                "itv_set_ap_interval_MPQ", 
                "itv_abs_MPQ", 
                "itv_sub_MPQ", 
                "__gmpz_cdiv_qr", 
                "ap_texpr0_fprint", 
                "__assert_fail", 
                "ap_abstract0_meet", 
                "ap_linexpr0_alloc", 
                "ap_coeff_set_itv_MPQ", 
                "__gmon_start__", 
                "ap_interval_alloc", 
                "__gmpq_init", 
                "strlen", 
                "clock", 
                "box_manager_alloc", 
                "ap_manager_get_funopt", 
                "ap_abstract0_add_dimensions", 
                "ap_manager_free", 
                "ap_abstract0_of_lincons_array", 
                "fflush", 
                "__gmpq_out_str", 
                "ap_coeff_set_scalar_double", 
                "ap_abstract0_size", 
                "ap_coeff_set_scalar_int", 
                "ap_dimperm_fprint", 
                "itv_boxize_lincons_array_MPQ", 
                "ap_interval_alloc_set", 
                "ap_abstract0_is_bottom", 
                "close", 
                "__printf_chk", 
                "fesetround", 
                "itv_mul_MPQ", 
                "free", 
                "ap_abstract0_fprint", 
                "__stack_chk_fail", 
                "ap_manager_alloc", 
                "pk_manager_alloc", 
                "__errno_location", 
                "memmove", 
                "itv_internal_alloc_MPQ", 
                "itv_div_MPQ", 
                "ap_abstract0_dimension", 
                "ap_dimchange_alloc", 
                "getcwd", 
                "strerror", 
                "ap_interval_cmp", 
                "ap_abstract0_is_leq", 
                "itv_internal_free_MPQ", 
                "munmap", 
                "ap_abstract0_join", 
                "abort", 
                "_ITM_registerTMCloneTable", 
                "__gmpq_add", 
                "ap_lincons0_print", 
                "ap_interval_set_itv_MPQ", 
                "ap_lincons0_array_clear", 
                "ap_abstract0_remove_dimensions", 
                "ap_interval_free", 
                "ap_manager_raise_exception", 
                "sysconf", 
                "itv_print_MPQ", 
                "__gmpz_init", 
                "ap_lincons0_make_unsat", 
                "ap_scalar_set_infty", 
                "mpfr_set_q", 
                "__gmpq_clear", 
                "mmap", 
                "__gmpq_mul_2exp", 
                "ap_coeff_reinit", 
                "ap_texpr0_free", 
                "ap_texpr0_from_linexpr0", 
                "ap_dimchange_fprint", 
                "ap_abstract0_copy", 
                "__fprintf_chk", 
                "__gmpq_equal", 
                "ap_abstract0_of_box", 
                "itv_intlinearize_ap_tcons0_array_MPQ", 
                "ap_coeff_init"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libt1pMPQ_debug.so.0.9.11"
        }, 
        "usr/lib/libt1pD_debug_so_0_9_11": {
            "report-functions": [
                "ap_tcons0_array_fprint", 
                "itv_neg_D", 
                "ap_linexpr0_free", 
                "ldexp", 
                "ap_interval_free", 
                "ap_texpr0_free", 
                "__snprintf_chk", 
                "ap_abstract0_is_leq", 
                "itv_array_set_ap_interval_array_D", 
                "ap_abstract0_join", 
                "ap_abstract0_meet", 
                "fmax", 
                "__gmon_start__", 
                "ap_interval_alloc_set", 
                "__assert_fail", 
                "ap_dimperm_fprint", 
                "ap_manager_get_funopt", 
                "ap_abstract0_fprint", 
                "ap_abstract0_dimension", 
                "ap_abstract0_meet_lincons_array", 
                "itv_sqrt_D", 
                "itv_abs_D", 
                "calloc", 
                "ap_manager_free", 
                "itv_lincons_array_clear_D", 
                "itv_set_ap_interval_D", 
                "ap_abstract0_of_box", 
                "ap_environment_dim_of_var", 
                "ap_linexpr0_coeffref", 
                "itv_print_D", 
                "itv_mul_D", 
                "itv_intlinearize_ap_tcons0_array_D", 
                "__sprintf_chk", 
                "ap_abstract0_copy", 
                "fesetround", 
                "ap_dimchange_add_invert", 
                "ap_dimchange_fprint", 
                "ap_abstract0_bound_dimension", 
                "ap_scalar_set_infty", 
                "ap_lincons0_print", 
                "strerror", 
                "itv_internal_free_D", 
                "ap_texpr0_from_linexpr0", 
                "ap_coeff_reinit", 
                "sysconf", 
                "ap_lincons0_array_clear", 
                "ap_scalar_reinit", 
                "ap_coeff_set_scalar_double", 
                "__fprintf_chk", 
                "ap_generic_meetjoin_array", 
                "fflush", 
                "ap_abstract0_is_eq", 
                "realloc", 
                "itv_internal_alloc_D", 
                "ap_coeff_set_itv_D", 
                "ap_double_set_scalar", 
                "itv_boxize_lincons_array_D", 
                "ap_abstract0_add_dimensions", 
                "clock", 
                "pk_manager_alloc", 
                "fmin", 
                "__errno_location", 
                "ap_abstract0_top", 
                "itv_div_D", 
                "ap_scalar_alloc_set", 
                "itv_set_ap_coeff_D", 
                "open", 
                "ap_manager_raise_exception", 
                "ap_abstract0_free", 
                "ap_lincons0_array_make", 
                "ap_coeff_set_interval", 
                "memmove", 
                "ap_interval_alloc", 
                "ap_abstract0_of_lincons_array", 
                "getcwd", 
                "ap_texpr0_fprint", 
                "mmap", 
                "__cxa_finalize", 
                "itv_fprint_D", 
                "abort", 
                "ap_linexpr0_alloc", 
                "ap_interval_is_leq", 
                "box_manager_alloc", 
                "ap_abstract0_size", 
                "ap_manager_alloc", 
                "__stack_chk_fail", 
                "_ITM_deregisterTMCloneTable", 
                "ap_interval_cmp", 
                "ap_dimchange_alloc", 
                "ap_interval_set_itv_D", 
                "close", 
                "munmap", 
                "strlen", 
                "ap_coeff_init", 
                "_ITM_registerTMCloneTable", 
                "ap_abstract0_is_bottom", 
                "ap_lincons0_array_fprint", 
                "malloc", 
                "ap_coeff_set_scalar_int", 
                "ap_lincons0_make_unsat", 
                "__printf_chk", 
                "itv_canonicalize_D", 
                "ap_abstract0_remove_dimensions", 
                "itv_sub_D"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libt1pD_debug.so.0.9.11"
        }, 
        "usr/lib/liboctMPQ_debug_so_0_9_11": {
            "report-functions": [
                "__gmpq_out_str", 
                "__gmpz_cmp_ui", 
                "ap_lincons0_array_make", 
                "__snprintf_chk", 
                "__gmon_start__", 
                "__gmpz_cdiv_qr", 
                "__gmpq_set_d", 
                "ap_lincons0_make_unsat", 
                "abort", 
                "__gmpq_add", 
                "malloc", 
                "ap_generic_meet_intlinearize_tcons_array", 
                "ap_lincons0_fprint", 
                "__stack_chk_fail", 
                "ap_scalar_set_int", 
                "__fprintf_chk", 
                "ap_scalar_cmp", 
                "ap_fpu_init", 
                "__gmpq_sub", 
                "realloc", 
                "__gmpq_clear", 
                "ap_interval_set_bottom", 
                "ap_scalar_free", 
                "ap_interval_array_alloc", 
                "_ITM_registerTMCloneTable", 
                "__gmpq_init", 
                "ap_linexpr0_alloc", 
                "__assert_fail", 
                "_ITM_deregisterTMCloneTable", 
                "__gmpz_set_si", 
                "__gmpz_import", 
                "ap_manager_raise_exception", 
                "__gmpq_cmp", 
                "ap_coeff_set_scalar_int", 
                "ap_scalar_neg", 
                "ap_interval_free", 
                "ap_generator0_array_make", 
                "__gmpq_div_2exp", 
                "__cxa_finalize", 
                "__gmpz_get_si", 
                "ap_manager_set_abort_if_exception", 
                "__gmpz_sizeinbase", 
                "ap_coeff_reduce", 
                "ap_manager_alloc", 
                "ap_generic_asssub_texpr_array", 
                "ap_generic_to_tcons_array", 
                "free", 
                "__gmpz_clear", 
                "ap_scalar_reinit", 
                "__gmpq_set_ui", 
                "__gmpz_cmp", 
                "__gmpq_cmp_si", 
                "__gmpz_init", 
                "ap_generic_bound_texpr", 
                "ap_linexpr0_free", 
                "mpfr_number_p", 
                "__gmpz_export", 
                "ap_generic_sat_tcons", 
                "__gmpq_mul", 
                "__gmpq_mul_2exp", 
                "ap_scalar_set_infty", 
                "__gmpq_set", 
                "ap_interval_alloc"
            ], 
            "rpm": "apron-0.9.11-6.1097.svn20160801.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/liboctMPQ_debug.so.0.9.11"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " Unspecified", 
            "Name": " apron", 
            "License": " LGPLv2+ and GPLv2+", 
            "URL": " http://apron.cri.ensmp.fr/library/", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildhw-05.phx2.fedoraproject.org", 
            "Description": "\nThe APRON library is dedicated to the static analysis of the numerical\nvariables of a program by Abstract Interpretation.  The aim of such an\nanalysis is to infer invariants about these variables, like 1<=x+y<=z,\nwhich holds during any execution of the program.\n\nThe APRON library is intended to be a common interface to various\nunderlying libraries/abstract domains and to provide additional services\nthat can be implemented independently from the underlying\nlibrary/abstract domain.\n", 
            "Build Date": " Fri 24 Mar 2017 03:14:57 PM EDT", 
            "Source RPM": " apron-0.9.11-6.1097.svn20160801.fc26.src.rpm", 
            "Version": " 0.9.11", 
            "Architecture": " i686", 
            "Signature": " RSA/SHA256, Sat 25 Mar 2017 02:10:07 PM EDT, Key ID 812a6b4b64dab85d", 
            "Release": " 6.1097.svn20160801.fc26", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " Numerical abstract domain library", 
            "Size": " 6381850"
        }
    }
}