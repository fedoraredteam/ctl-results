{
    "results": {
        "complexity": {
            "r2 aa": "failed: ERROR: Cannot find radare2 in PATH"
        }, 
        "usr/lib/libfdproto_so_1_2_0": {
            "report-functions": [
                "__vsnprintf_chk", 
                "__vfprintf_chk", 
                "strlen", 
                "clock_gettime", 
                "strftime", 
                "rand", 
                "__fprintf_chk", 
                "strerror", 
                "localtime_r", 
                "__gmon_start__", 
                "calloc", 
                "__stack_chk_fail", 
                "pthread_rwlock_rdlock", 
                "strcmp", 
                "pthread_rwlock_unlock", 
                "__strdup", 
                "pthread_getspecific", 
                "pthread_key_create", 
                "pthread_self", 
                "pthread_rwlock_destroy", 
                "time", 
                "_ITM_deregisterTMCloneTable", 
                "pthread_cond_wait", 
                "pthread_mutex_unlock", 
                "putchar", 
                "pthread_mutex_lock", 
                "pthread_rwlock_init", 
                "free", 
                "__gcc_personality_v0", 
                "__printf_chk", 
                "__xpg_basename", 
                "idna_to_ascii_8z", 
                "sysconf", 
                "pthread_cond_timedwait", 
                "snprintf", 
                "gai_strerror", 
                "memcmp", 
                "__errno_location", 
                "__snprintf_chk", 
                "memchr", 
                "pthread_cond_destroy", 
                "pthread_cond_signal", 
                "srand48", 
                "pthread_mutex_init", 
                "__memcpy_chk", 
                "_ITM_registerTMCloneTable", 
                "usleep", 
                "malloc", 
                "fflush", 
                "realloc", 
                "idna_strerror", 
                "getnameinfo", 
                "__assert_fail", 
                "isatty", 
                "__cxa_finalize", 
                "pthread_cancel", 
                "pthread_cond_init", 
                "__sprintf_chk", 
                "pthread_create", 
                "_Unwind_Resume", 
                "lrand48", 
                "pthread_join", 
                "pthread_setspecific", 
                "pthread_mutex_destroy"
            ], 
            "rpm": "freeDiameter-1.2.0-9.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libfdproto.so.1.2.0"
        }, 
        "usr/lib/libfdcore_so_1_2_0": {
            "report-functions": [
                "_ITM_deregisterTMCloneTable", 
                "fd_fifo_post_int", 
                "fd_dict_get_error_cmd", 
                "fd_dictfct_Time_dump", 
                "strcasecmp", 
                "fd_dict_getval", 
                "close", 
                "gnutls_certificate_set_x509_crl_file", 
                "fd_dict_search", 
                "fd_list_move_end", 
                "fd_msg_parse_buffer", 
                "time", 
                "fd_msg_dump_summary", 
                "gnutls_x509_crt_check_hostname", 
                "getpeername", 
                "gnutls_dh_params_import_pkcs3", 
                "fread", 
                "gnutls_x509_crt_list_import", 
                "pthread_cond_signal", 
                "gnutls_session_is_resumed", 
                "fopen", 
                "gnutls_x509_crt_import", 
                "gnutls_credentials_set", 
                "pthread_cond_destroy", 
                "_ITM_registerTMCloneTable", 
                "pthread_rwlock_rdlock", 
                "gnutls_x509_crt_list_import2", 
                "gnutls_check_version", 
                "free", 
                "pthread_cond_init", 
                "fd_msg_sess_get", 
                "fd_msg_dispatch", 
                "gnutls_certificate_allocate_credentials", 
                "isatty", 
                "gnutls_db_set_ptr", 
                "gnutls_x509_crt_get_issuer_dn", 
                "fd_sa_sdump_numeric", 
                "fd_msg_rt_get", 
                "fd_rtd_init", 
                "sctp_freepaddrs", 
                "fd_fifo_timedget_int", 
                "gnutls_db_set_remove_function", 
                "fileno", 
                "globfree", 
                "pthread_mutex_destroy", 
                "fd_msg_anscb_gettimeout", 
                "gnutls_db_set_retrieve_function", 
                "fd_dump_extend", 
                "fd_os_is_valid_DiameterIdentity", 
                "fd_dictfct_Address_interpret", 
                "pthread_rwlock_wrlock", 
                "bind", 
                "pthread_cond_wait", 
                "writev", 
                "pthread_mutex_unlock", 
                "gnutls_transport_set_pull_function", 
                "gnutls_session_set_ptr", 
                "getifaddrs", 
                "fd_msg_rt_associate", 
                "gnutls_db_set_store_function", 
                "random", 
                "getaddrinfo", 
                "lrand48", 
                "gnutls_handshake", 
                "gnutls_session_set_data", 
                "pthread_mutex_init", 
                "pthread_mutex_lock", 
                "fd_os_almostcasesrch_int", 
                "fd_dump_extend_hexdump", 
                "shutdown", 
                "pthread_cancel", 
                "gnutls_global_deinit", 
                "fd_msg_anscb_get", 
                "fd_msg_avp_value_interpret", 
                "__gmon_start__", 
                "malloc", 
                "fd_fifo_move", 
                "sysconf", 
                "gnutls_certificate_verify_peers2", 
                "fd_msg_new", 
                "freeaddrinfo", 
                "gnutls_init", 
                "__stack_chk_fail", 
                "pthread_self", 
                "accept", 
                "pthread_cond_broadcast", 
                "glob", 
                "fd_fifo_getstats", 
                "pthread_setcanceltype", 
                "fd_msg_source_get", 
                "gnutls_certificate_type_get", 
                "fd_fifo_get_int", 
                "fd_list_insert_before", 
                "gnutls_x509_crl_list_import2", 
                "fd_msg_pmdl_get", 
                "gnutls_transport_set_errno", 
                "sendmsg", 
                "__strdup", 
                "__sprintf_chk", 
                "fd_log_va", 
                "gethostname", 
                "pthread_rwlock_init", 
                "pthread_detach", 
                "fd_msg_answ_getq", 
                "fd_sess_start", 
                "gnutls_deinit", 
                "fd_msg_source_set", 
                "__fprintf_chk", 
                "fd_list_init", 
                "gnutls_record_recv", 
                "setsockopt", 
                "fwrite", 
                "gnutls_dh_params_deinit", 
                "sleep", 
                "__assert_fail", 
                "fd_msg_new_answer_from_req", 
                "gnutls_priority_set_direct", 
                "fputc", 
                "gnutls_handshake_set_timeout", 
                "gnutls_certificate_get_peers", 
                "fd_msg_is_routable", 
                "recvmsg", 
                "__snprintf_chk", 
                "fd_msg_bufferize", 
                "gnutls_bye", 
                "clock_gettime", 
                "fd_msg_answ_associate", 
                "gnutls_priority_init", 
                "gnutls_x509_trust_list_init", 
                "fd_msg_avp_value_encode", 
                "strcmp", 
                "feof", 
                "pthread_attr_init", 
                "snprintf", 
                "fd_rtd_candidate_reorder", 
                "fd_dict_get_vendorid_list", 
                "gnutls_transport_set_ptr", 
                "fd_msg_avp_new", 
                "gnutls_x509_trust_list_deinit", 
                "fd_log_threadname", 
                "gnutls_session_get_id", 
                "fd_sa_dump", 
                "gai_strerror", 
                "gnutls_transport_set_vec_push_function", 
                "__gcc_personality_v0", 
                "gnutls_x509_crt_init", 
                "fd_fifo_post_noblock", 
                "connect", 
                "gnutls_record_send", 
                "gnutls_session_get_data2", 
                "gnutls_dh_params_init", 
                "recv", 
                "listen", 
                "pthread_attr_setdetachstate", 
                "fd_msg_hdr", 
                "dlsym", 
                "ferror", 
                "fd_fifo_del", 
                "memcmp", 
                "fd_fifo_select", 
                "fd_list_insert_after", 
                "pthread_create", 
                "gnutls_certificate_set_verify_function", 
                "dlclose", 
                "fd_dictfct_UTF8String_dump", 
                "fd_msg_search_avp", 
                "gnutls_x509_trust_list_verify_crt", 
                "__cxa_finalize", 
                "fd_dictfct_Time_encode", 
                "os0dup_int", 
                "pthread_rwlock_destroy", 
                "clearerr", 
                "gnutls_x509_trust_list_verify_named_crt", 
                "gnutls_global_init", 
                "__errno_location", 
                "gnutls_certificate_server_set_request", 
                "usleep", 
                "pthread_cond_timedwait", 
                "pthread_rwlock_unlock", 
                "fd_os_validate_DiameterIdentity", 
                "sscanf", 
                "fd_msg_source_setrr", 
                "fd_sess_getsid", 
                "fd_dict_new", 
                "fd_msg_avp_add", 
                "fd_disp_unregister_all", 
                "gnutls_transport_set_pull_timeout_function", 
                "gnutls_x509_crt_deinit", 
                "fd_msg_avp_setvalue", 
                "gnutls_x509_trust_list_add_cas", 
                "__memcpy_chk", 
                "exit", 
                "fd_dictfct_Address_encode", 
                "gnutls_x509_crl_get_issuer_dn", 
                "gnutls_server_name_set", 
                "gnutls_x509_crt_get_dn", 
                "fd_rtd_candidate_add", 
                "select", 
                "fd_dict_fini", 
                "fd_msg_avp_hdr", 
                "dlerror", 
                "fd_msg_free", 
                "socket", 
                "pthread_testcancel", 
                "calloc", 
                "fd_fifo_new", 
                "fd_list_unlink", 
                "fd_dictfct_Address_dump", 
                "fd_msg_anscb_associate", 
                "fd_fifo_dump", 
                "strchr", 
                "fd_log", 
                "sctp_getpaddrs", 
                "gnutls_dh_params_generate2", 
                "fd_dict_init", 
                "pthread_join", 
                "_Unwind_Resume", 
                "sctp_bindx", 
                "strerror", 
                "gnutls_priority_set", 
                "realloc", 
                "gnutls_certificate_set_x509_trust_file", 
                "gnutls_error_is_fatal", 
                "gnutls_x509_trust_list_add_crls", 
                "strlen", 
                "fd_sess_new", 
                "__fdelt_chk", 
                "fd_msg_dump_full", 
                "fd_fifo_tryget_int", 
                "__xpg_basename", 
                "fd_msg_browse_internal", 
                "gnutls_priority_deinit", 
                "dlopen", 
                "fd_msg_sess_set", 
                "fd_rtd_candidate_del", 
                "freeifaddrs", 
                "fclose", 
                "fd_libproto_fini", 
                "fd_msg_dump_treeview", 
                "fd_libproto_init", 
                "gnutls_strerror", 
                "fd_dictfct_Time_interpret", 
                "gnutls_certificate_free_credentials", 
                "stpcpy", 
                "gnutls_certificate_set_x509_key_file", 
                "sctp_connectx", 
                "fd_msg_parse_rules", 
                "_IO_getc", 
                "gnutls_session_get_ptr", 
                "fd_rtd_candidate_extract", 
                "fd_os_cmp_int", 
                "getsockopt", 
                "fd_dict_gettype"
            ], 
            "rpm": "freeDiameter-1.2.0-9.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libfdcore.so.1.2.0"
        }, 
        "usr/bin/freeDiameterd-1_2_0": {
            "report-functions": [
                "__libc_start_main", 
                "pthread_create", 
                "fd_log_threadname", 
                "fd_core_wait_shutdown_complete", 
                "__stack_chk_fail", 
                "sigwait", 
                "gnutls_global_set_log_level", 
                "getopt_long", 
                "puts", 
                "_ITM_registerTMCloneTable", 
                "exit", 
                "strtol", 
                "fd_event_send", 
                "pthread_join", 
                "fd_log", 
                "pthread_sigmask", 
                "strcmp", 
                "fd_core_initialize", 
                "sigaddset", 
                "fwrite", 
                "fd_core_parseconf", 
                "__errno_location", 
                "__xpg_basename", 
                "__gmon_start__", 
                "_ITM_deregisterTMCloneTable", 
                "fd_log_va", 
                "strerror", 
                "__cxa_finalize", 
                "sigemptyset", 
                "fd_core_start", 
                "__printf_chk", 
                "malloc", 
                "pthread_cancel", 
                "fd_core_shutdown", 
                "sigfillset", 
                "setlocale", 
                "__fprintf_chk"
            ], 
            "rpm": "freeDiameter-1.2.0-9.fc26.i686.rpm", 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "yes", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/bin/freeDiameterd-1.2.0"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " Unspecified", 
            "Name": " freeDiameter", 
            "License": " BSD", 
            "URL": " http://www.freediameter.net/", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildvm-25.phx2.fedoraproject.org", 
            "Description": "\nfreeDiameter is an open source Diameter protocol implementation. It provides\nan extensible platform for deploying a Diameter network for your\nAuthentication, Authorization and Accounting needs.\n", 
            "Build Date": " Fri 10 Feb 2017 11:15:30 AM EST", 
            "Source RPM": " freeDiameter-1.2.0-9.fc26.src.rpm", 
            "Version": " 1.2.0", 
            "Architecture": " i686", 
            "Signature": " RSA/SHA256, Fri 10 Feb 2017 08:30:03 PM EST, Key ID 812a6b4b64dab85d", 
            "Release": " 9.fc26", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " A Diameter protocol open implementation", 
            "Size": " 673654"
        }
    }
}