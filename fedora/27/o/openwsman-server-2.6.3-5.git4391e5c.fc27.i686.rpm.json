{
    "results": {
        "usr/sbin/openwsmand": {
            "report-functions": [
                "strtol", 
                "getsockname", 
                "snprintf", 
                "u_option_context_new", 
                "u_option_context_free", 
                "fcntl", 
                "dispatch_inbound_call", 
                "closedir", 
                "close", 
                "__assert_fail", 
                "__libc_start_main", 
                "TLS_server_method", 
                "getcwd", 
                "pthread_mutex_init", 
                "readdir", 
                "listen", 
                "open", 
                "u_free", 
                "dlsym", 
                "strrchr", 
                "cimxml_message_destroy", 
                "ws_context_get_runtime", 
                "openlog", 
                "opendir", 
                "time", 
                "u_option_context_set_ignore_unknown_options", 
                "strcmp", 
                "setsockopt", 
                "SSL_read", 
                "fopen", 
                "debug_full", 
                "pthread_cond_init", 
                "SSL_free", 
                "__syslog_chk", 
                "SSL_accept", 
                "u_buf_append", 
                "SSL_new", 
                "strncmp", 
                "iniparser_getstr", 
                "dup", 
                "iniparser_getstring", 
                "calloc", 
                "getdtablesize", 
                "SSL_set_fd", 
                "u_buf_load", 
                "__ctype_tolower_loc", 
                "chdir", 
                "strdup", 
                "wsman_notification_manager", 
                "ws_base64_decode", 
                "__vsnprintf_chk", 
                "__cxa_finalize", 
                "pthread_create", 
                "accept", 
                "CIM_Indication_call", 
                "wsman_soap_message_destroy", 
                "closelog", 
                "wsman_soap_message_new", 
                "memchr", 
                "pthread_attr_setdetachstate", 
                "dlopen", 
                "__memcpy_chk", 
                "__snprintf_chk", 
                "debug_add_handler", 
                "wsman_init_plugins", 
                "ws_set_context_enumIdleTimeout", 
                "ow_lnode_create", 
                "bind", 
                "iniparser_find_entry", 
                "__xstat", 
                "sigemptyset", 
                "strcspn", 
                "select", 
                "iniparser_new", 
                "SSL_CTX_use_PrivateKey_file", 
                "__ctype_b_loc", 
                "__errno_location", 
                "u_buf_free", 
                "u_buf_ptr", 
                "fputc", 
                "wsman_event_init", 
                "getpeername", 
                "iniparser_free", 
                "u_buf_steal", 
                "fork", 
                "wsman_plugins_unload", 
                "rename", 
                "iniparser_getint", 
                "fsync", 
                "read", 
                "puts", 
                "remove", 
                "wsman_server_set_subscription_repos", 
                "strstr", 
                "_ITM_registerTMCloneTable", 
                "u_error_free", 
                "freopen", 
                "wsman_check_identify", 
                "free", 
                "send", 
                "connect", 
                "u_zalloc", 
                "strspn", 
                "mkdir", 
                "__fprintf_chk", 
                "write", 
                "pthread_attr_init", 
                "SSL_get_error", 
                "mktime", 
                "u_option_context_parse", 
                "u_strdup", 
                "strncasecmp", 
                "setsid", 
                "getpwnam", 
                "u_strdup_printf", 
                "u_buf_set", 
                "iniparser_getboolean", 
                "ow_list_create", 
                "strlen", 
                "wsman_dispatch_list_new", 
                "malloc", 
                "strftime", 
                "fwrite", 
                "exit", 
                "inet_ntoa", 
                "__gmon_start__", 
                "cimxml_message_new", 
                "socket", 
                "_ITM_deregisterTMCloneTable", 
                "setgid", 
                "SSL_write", 
                "SSL_CTX_set_options", 
                "strtoul", 
                "__fxstat", 
                "ow_list_ins_after", 
                "strerror", 
                "fputs", 
                "memcmp", 
                "u_buf_len", 
                "getpid", 
                "u_malloc", 
                "localtime", 
                "fclose", 
                "u_path_is_absolute", 
                "recv", 
                "debug_destroy_handlers", 
                "fgets", 
                "SSL_CTX_new", 
                "__vfprintf_chk", 
                "sscanf", 
                "setuid", 
                "__stack_chk_fail", 
                "strchr", 
                "execv", 
                "u_buf_create", 
                "lseek", 
                "OPENSSL_init_ssl", 
                "fflush", 
                "u_option_context_add_main_entries", 
                "SSL_CTX_use_certificate_file", 
                "wsman_server_auxiliary_loop_thread"
            ], 
            "rpm": "openwsman-server-2.6.3-5.git4391e5c.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "yes", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/sbin/openwsmand"
        }, 
        "usr/lib/openwsman/plugins/libwsman_identify_plugin_so_1_0_0": {
            "report-functions": [
                "_ITM_registerTMCloneTable", 
                "ow_lnode_create", 
                "u_malloc", 
                "_ITM_deregisterTMCloneTable", 
                "__gmon_start__", 
                "do_serialize_string", 
                "ow_list_ins_before", 
                "ow_list_create"
            ], 
            "rpm": "openwsman-server-2.6.3-5.git4391e5c.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "no, not found!", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/openwsman/plugins/libwsman_identify_plugin.so.1.0.0"
        }, 
        "usr/lib/openwsman/plugins/libwsman_test_so_1_0_0": {
            "report-functions": [
                "ws_xml_add_child_format", 
                "ws_xml_destroy_doc", 
                "ws_xml_get_doc_root", 
                "__cxa_finalize", 
                "ow_list_ins_before", 
                "time", 
                "ws_xml_create_doc", 
                "u_free", 
                "u_malloc", 
                "_ITM_registerTMCloneTable", 
                "localtime_r", 
                "do_serialize_struct", 
                "_ITM_deregisterTMCloneTable", 
                "ow_lnode_create", 
                "__gmon_start__", 
                "ow_list_create", 
                "ws_xml_set_node_text", 
                "do_serialize_string", 
                "__stack_chk_fail", 
                "debug_full"
            ], 
            "rpm": "openwsman-server-2.6.3-5.git4391e5c.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/openwsman/plugins/libwsman_test.so.1.0.0"
        }, 
        "usr/lib/libwsman_server_so_1_0_0": {
            "report-functions": [
                "strncpy", 
                "wsman_get_subsrepos_opset", 
                "ow_list_ins_before", 
                "ow_list_create", 
                "u_strdup", 
                "__gmon_start__", 
                "wsman_get_eventpool_opset", 
                "ow_list_delete", 
                "__stack_chk_fail", 
                "u_free", 
                "ws_xml_destroy_doc", 
                "dlsym", 
                "wse_notification_manager", 
                "pthread_mutex_unlock", 
                "ow_lnode_destroy", 
                "continue_working", 
                "wsman_timeouts_manager", 
                "strlen", 
                "pthread_mutex_init", 
                "ws_xml_get_child", 
                "__cxa_finalize", 
                "malloc", 
                "ws_xml_get_soap_body", 
                "dispatch_inbound_call", 
                "gettimeofday", 
                "iniparser_new", 
                "_ITM_registerTMCloneTable", 
                "ow_lnode_create", 
                "ws_xml_read_memory", 
                "dlopen", 
                "u_strdup_printf", 
                "pthread_cond_init", 
                "soap_destroy", 
                "alphasort", 
                "scandir", 
                "wsman_soap_message_destroy", 
                "iniparser_getstring", 
                "u_buf_construct", 
                "u_malloc", 
                "wsman_soap_message_new", 
                "_ITM_deregisterTMCloneTable", 
                "pthread_cond_timedwait", 
                "CIM_Indication_call", 
                "time_expired", 
                "pthread_mutex_lock", 
                "ws_create_runtime", 
                "debug_full", 
                "ow_list_destroy", 
                "wsman_set_expiretime", 
                "ws_context_get_runtime", 
                "ow_list_destroy_nodes", 
                "wsman_heartbeat_generator"
            ], 
            "rpm": "openwsman-server-2.6.3-5.git4391e5c.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "no, only unprotected functions found!", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libwsman_server.so.1.0.0"
        }, 
        "usr/lib/openwsman/authenticators/libwsman_file_auth_so_1_0_0": {
            "report-functions": [
                "crypt", 
                "__cxa_finalize", 
                "_ITM_deregisterTMCloneTable", 
                "__gmon_start__", 
                "__stack_chk_fail", 
                "sscanf", 
                "fclose", 
                "strlen", 
                "debug_full", 
                "fgets", 
                "_ITM_registerTMCloneTable"
            ], 
            "rpm": "openwsman-server-2.6.3-5.git4391e5c.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "no, only unprotected functions found!", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/openwsman/authenticators/libwsman_file_auth.so.1.0.0"
        }, 
        "usr/lib/openwsman/plugins/libwsman_ruby_plugin_so": {
            "report-functions": [
                "rb_undef_method", 
                "rb_define_class", 
                "__assert_fail", 
                "perror", 
                "wsmc_transport_set_auth_request_func", 
                "filter_initialize", 
                "wsmc_action_renew", 
                "wsman_transport_set_crlcheck", 
                "wsman_transport_set_proxy_username", 
                "filter_set_simple", 
                "wsmc_build_envelope_from_response", 
                "wsman_transport_set_capath", 
                "ow_list_create", 
                "wsman_get_action", 
                "ws_xml_dump_doc", 
                "wsman_transport_get_last_error_string", 
                "wsman_transport_set_certhumbprint", 
                "rb_rescue", 
                "rb_define_const", 
                "rb_funcall", 
                "ws_context_get_runtime", 
                "wsmc_action_get", 
                "wsman_transport_get_caoid", 
                "wsman_transport_get_auth_method", 
                "wsman_get_selector", 
                "_ITM_registerTMCloneTable", 
                "wsman_transport_set_password", 
                "rb_check_type", 
                "rb_str_new_cstr", 
                "ws_xml_get_attr_ns", 
                "wsman_transport_set_crlfile", 
                "rb_define_singleton_method", 
                "wsman_transport_get_password", 
                "rb_iv_get", 
                "ws_xml_dump_memory_enc", 
                "rb_yield", 
                "wsman_transport_get_capath", 
                "rb_undef_alloc_func", 
                "ws_xml_dump_memory_node_tree_enc", 
                "ruby_script", 
                "rb_define_alias", 
                "free", 
                "wsman_get_msg_from_op", 
                "wsmc_action_delete", 
                "soap_get_op_soap", 
                "ws_create_ep_context", 
                "ws_xml_get_node_name_ns", 
                "ws_xml_get_soap_envelope", 
                "ws_xml_is_node_qname", 
                "wsman_is_auth_method", 
                "wsmc_action_invoke", 
                "filter_destroy", 
                "wsmc_get_encoding", 
                "rb_big2ulong", 
                "wsmc_get_user", 
                "epr_from_string", 
                "rb_big2long", 
                "rb_int2big", 
                "ws_xml_duplicate_tree", 
                "rb_str_append", 
                "wsman_transport_get_verify_peer", 
                "st_lookup", 
                "wsmc_get_port", 
                "epr_deserialize", 
                "wsman_generate_fault", 
                "rb_gc_writebarrier_unprotect", 
                "st_init_numtable", 
                "wsman_transport_set_caoid", 
                "wsman_get_max_elements", 
                "ws_xml_get_attr_name", 
                "ws_xml_get_attr_value", 
                "wsmc_set_encoding", 
                "rb_string_value_ptr", 
                "wsmc_get_password", 
                "wsmc_create_from_uri", 
                "ws_xml_get_node_doc", 
                "__sprintf_chk", 
                "wsman_get_class_name", 
                "ws_xml_destroy_doc", 
                "wsman_transport_set_proxy_password", 
                "rb_check_array_type", 
                "wsmc_action_enumerate", 
                "soap_destroy", 
                "wsmc_action_release", 
                "ws_xml_unlink_node", 
                "strcmp", 
                "ws_get_soap_context", 
                "wsman_transport_set_agent", 
                "rb_ary_entry", 
                "strlen", 
                "wsman_transport_get_agent", 
                "wsman_transport_get_cert", 
                "wsman_get_max_envelope_size", 
                "wsman_status_init", 
                "wsmc_release", 
                "wsmc_get_hostname", 
                "rb_obj_classname", 
                "wsman_transport_get_proxy", 
                "ws_destroy_context", 
                "wsman_transport_set_cert", 
                "pthread_mutex_unlock", 
                "wsman_parse_enum_request", 
                "wsmc_transport_get_auth_name", 
                "rb_intern", 
                "wsman_get_maxsize_from_op", 
                "ow_lnode_create", 
                "ws_set_context_enumIdleTimeout", 
                "wsmc_get_response_code", 
                "pthread_mutex_lock", 
                "ws_xml_get_soap_header", 
                "ws_xml_create_doc", 
                "wsman_transport_get_crlfile", 
                "rb_ivar_set", 
                "wsmc_action_delete_from_epr", 
                "strdup", 
                "ws_xml_find_in_tree", 
                "ws_xml_set_node_text", 
                "rb_data_object_wrap", 
                "wsman_get_method_args", 
                "rb_raise", 
                "wsman_transport_set_key", 
                "wsman_send_request", 
                "filter_set_assoc", 
                "wsman_transport_set_cainfo", 
                "wsman_transport_get_userName", 
                "wsman_transport_get_crlcheck", 
                "wsman_transport_set_proxy", 
                "wsman_transport_get_proxy_username", 
                "wsmc_action_unsubscribe", 
                "do_serialize_struct", 
                "wsmc_transport_get_auth_value", 
                "ws_xml_set_ns", 
                "ws_create_context", 
                "ws_xml_get_node_text", 
                "wsmc_action_identify", 
                "wsman_transport_get_verify_host", 
                "rb_ivar_get", 
                "rb_gv_set", 
                "abort", 
                "wsman_transport_set_auth_method", 
                "ws_xml_add_node_attr", 
                "wsmc_action_get_from_epr", 
                "wsman_transport_set_userName", 
                "wsman_get_selectors_from_epr", 
                "wsman_get_selector_list_from_filter", 
                "wsman_get_option_set", 
                "wsman_create_response_envelope", 
                "rb_num2long", 
                "st_insert", 
                "wsmc_fault_destroy", 
                "ws_xml_get_child_count_by_qname", 
                "wsman_transport_set_timeout", 
                "ws_xml_dump_node_tree", 
                "ws_xml_add_child", 
                "wsmc_transport_fini", 
                "wsman_transport_get_proxyauth", 
                "rb_const_get", 
                "__gmon_start__", 
                "rb_str_new", 
                "ws_xml_remove_node_attr", 
                "wsmc_get_fault_data", 
                "ow_list_ins_before", 
                "rb_define_method", 
                "ws_xml_get_node_local_name", 
                "rb_define_class_under", 
                "ws_xml_get_soap_body", 
                "wsmc_get_enum_context", 
                "__cxa_finalize", 
                "rb_funcallv_public", 
                "wsman_get_resource_uri", 
                "ruby_finalize", 
                "soap_set_op_doc", 
                "ws_xml_get_node_parent", 
                "wsmc_get_scheme", 
                "rb_define_virtual_variable", 
                "ws_xml_find_node_attr", 
                "rb_iv_set", 
                "rb_inspect", 
                "ws_xml_get_node_attr", 
                "ws_xml_get_node_attr_count", 
                "wsmc_action_subscribe", 
                "wsmc_action_create_fromtext", 
                "__stack_chk_fail", 
                "ruby_vsnprintf", 
                "_ITM_deregisterTMCloneTable", 
                "u_malloc", 
                "rb_define_readonly_variable", 
                "wsman_get_method_name", 
                "rb_require", 
                "wsman_get_selector_list", 
                "rb_define_alloc_func", 
                "ws_xml_set_node_name", 
                "wsmc_get_last_error", 
                "rb_protect", 
                "wsman_transport_get_proxy_password", 
                "wsman_get_fragment_string", 
                "wsman_transport_close_transport", 
                "soap_get_op_doc", 
                "wsmc_get_fault_string", 
                "wsmc_action_put_fromtext", 
                "rb_sym2id", 
                "st_delete", 
                "calloc", 
                "ws_xml_set_node_lang", 
                "wsman_transport_get_timeout", 
                "wsmc_create", 
                "wsman_transport_get_cainfo", 
                "wsman_transport_set_verify_peer", 
                "rb_str_cat", 
                "ruby_init", 
                "wsman_transport_set_verify_host", 
                "ws_xml_dump_memory_node_tree", 
                "rb_define_module_function", 
                "ws_xml_get_child", 
                "rb_id2name", 
                "wsmc_transport_init", 
                "wsmc_get_path", 
                "rb_uint2big", 
                "ws_xml_get_node_name_ns_prefix", 
                "wsmc_set_dumpfile", 
                "ws_xml_add_prev_sibling", 
                "debug_full", 
                "wsmc_fault_new", 
                "rb_obj_is_kind_of", 
                "wsmc_action_pull", 
                "rb_funcallv", 
                "wsman_transport_set_proxyauth", 
                "wsman_transport_get_certhumbprint", 
                "xml_parser_node_get", 
                "ruby_init_loadpath", 
                "wsmc_check_for_fault", 
                "u_free", 
                "rb_define_module", 
                "malloc", 
                "rb_num2ulong", 
                "rb_str_cat_cstr", 
                "ws_xml_get_doc_root", 
                "ws_xml_get_soap_element", 
                "wsman_transport_get_key"
            ], 
            "rpm": "openwsman-server-2.6.3-5.git4391e5c.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/openwsman/plugins/libwsman_ruby_plugin.so"
        }, 
        "usr/lib/openwsman/authenticators/libwsman_pam_auth_so_1_0_0": {
            "report-functions": [
                "debug_full", 
                "pam_acct_mgmt", 
                "pam_authenticate", 
                "_ITM_registerTMCloneTable", 
                "strdup", 
                "pam_end", 
                "pam_strerror", 
                "__gmon_start__", 
                "__stack_chk_fail", 
                "__cxa_finalize", 
                "_ITM_deregisterTMCloneTable"
            ], 
            "rpm": "openwsman-server-2.6.3-5.git4391e5c.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/openwsman/authenticators/libwsman_pam_auth.so.1.0.0"
        }, 
        "usr/lib/openwsman/plugins/libwsman_cim_plugin_so_1_0_0": {
            "report-functions": [
                "wsman_get_option_set", 
                "ow_list_sort", 
                "ws_xml_get_node_text", 
                "ws_xml_destroy_doc", 
                "ow_list_ins_before", 
                "ow_lnode_create", 
                "ws_xml_get_child", 
                "wsman_check_status", 
                "ow_hash_delete", 
                "ws_xml_add_child_sort", 
                "native_new_CMPIArgs", 
                "u_log_write_ex", 
                "ws_destroy_context", 
                "gettimeofday", 
                "check_envelope_size", 
                "__snprintf_chk", 
                "strcasecmp", 
                "wsman_get_resource_uri", 
                "wsman_get_fragment_type", 
                "strtod", 
                "strtol", 
                "__cxa_finalize", 
                "wsman_create_response_envelope", 
                "wsman_epr_selector_cb", 
                "ow_list_create", 
                "value2Chars", 
                "soap_get_op_doc", 
                "u_malloc", 
                "wsman_get_class_name", 
                "soap_set_op_doc", 
                "ws_xml_add_empty_child_format", 
                "u_zalloc", 
                "iniparser_getstr", 
                "wsman_status_init", 
                "newCMPIObjectPath", 
                "ow_hash_scan_begin", 
                "wsman_get_selector_list", 
                "ow_hnode_destroy", 
                "u_strdup_printf", 
                "ws_xml_add_node_attr", 
                "native_new_CMPIInstance", 
                "ow_hash_free", 
                "ws_xml_get_child_count_by_qname", 
                "native_new_CMPIString", 
                "ws_create_ep_context", 
                "ws_xml_get_soap_body", 
                "ws_xml_find_node_attr", 
                "ws_xml_get_attr_value", 
                "_ITM_registerTMCloneTable", 
                "wsman_get_msg_from_op", 
                "cmciConnect2", 
                "strtoul", 
                "ow_hash_lookup", 
                "strtoull", 
                "debug_full", 
                "native_new_CMPIArray", 
                "xml_parser_node_remove", 
                "strtoll", 
                "wsman_generate_fault", 
                "u_parse_list", 
                "iniparser_getboolean", 
                "wsman_get_fragment_string", 
                "wsman_get_max_elements", 
                "strstr", 
                "ws_xml_get_node_doc", 
                "ow_hash_scan_next", 
                "_ITM_deregisterTMCloneTable", 
                "strrchr", 
                "ws_deserialize_uint32", 
                "u_free", 
                "wsman_get_max_envelope_size", 
                "__gmon_start__", 
                "iniparser_getstring", 
                "ws_xml_add_child_format", 
                "xml_parser_node_get", 
                "wsman_parse_enum_request", 
                "ws_xml_set_node_text", 
                "wsman_get_action", 
                "soap_get_op_soap", 
                "ws_xml_add_child", 
                "do_serialize_struct", 
                "u_strdup", 
                "wsman_get_method_name", 
                "__stack_chk_fail", 
                "wsman_get_method_args"
            ], 
            "rpm": "openwsman-server-2.6.3-5.git4391e5c.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/openwsman/plugins/libwsman_cim_plugin.so.1.0.0"
        }, 
        "usr/lib/openwsman/plugins/libredirect_so_1_0_0": {
            "report-functions": [
                "ws_xml_destroy_doc", 
                "debug_full", 
                "ws_xml_duplicate_doc", 
                "iniparser_free", 
                "wsmc_release", 
                "iniparser_getint", 
                "iniparser_getstr", 
                "do_serialize_struct", 
                "ow_list_create", 
                "wsmc_get_enum_context", 
                "wsman_send_request", 
                "__cxa_finalize", 
                "soap_get_op_soap", 
                "wsmand_options_get_config_file", 
                "_ITM_deregisterTMCloneTable", 
                "wsman_transport_set_verify_peer", 
                "ws_xml_get_soap_header", 
                "wsman_transport_set_verify_host", 
                "strlen", 
                "wsman_generate_fault", 
                "soap_set_op_doc", 
                "ws_xml_get_node_text", 
                "wsman_get_msg_from_op", 
                "wsman_is_fault_envelope", 
                "ow_list_ins_before", 
                "calloc", 
                "ws_xml_add_child", 
                "strncat", 
                "wsman_transport_set_auth_method", 
                "wsman_transport_set_cert", 
                "iniparser_new", 
                "ws_xml_get_soap_body", 
                "wsmc_build_envelope_from_response", 
                "u_zalloc", 
                "free", 
                "wsman_transport_get_last_error_string", 
                "soap_get_op_doc", 
                "wsman_transport_set_cainfo", 
                "__strncpy_chk", 
                "wsman_get_fault_status_from_doc", 
                "wsmc_create", 
                "__gmon_start__", 
                "ow_lnode_create", 
                "ws_xml_get_child", 
                "_ITM_registerTMCloneTable", 
                "strtol", 
                "ws_create_ep_context"
            ], 
            "rpm": "openwsman-server-2.6.3-5.git4391e5c.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "no, not found!", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/openwsman/plugins/libredirect.so.1.0.0"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " System Environment/Daemons", 
            "Name": " openwsman-server", 
            "License": " BSD", 
            "URL": " http://www.openwsman.org/", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildvm-19.phx2.fedoraproject.org", 
            "Description": "\nOpenwsman Server and service libraries\n", 
            "Build Date": " Fri 04 Aug 2017 02:53:48 AM EDT", 
            "Source RPM": " openwsman-2.6.3-5.git4391e5c.fc27.src.rpm", 
            "Version": " 2.6.3", 
            "Architecture": " i686", 
            "Signature": " RSA/SHA256, Fri 04 Aug 2017 10:57:22 PM EDT, Key ID f55e7430f5282ee4", 
            "Release": " 5.git4391e5c.fc27", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " Openwsman Server and service libraries", 
            "Size": " 469499"
        }
    }
}