{
    "results": {
        "usr/lib/libOpenNI_jni_so": {
            "report-functions": [
                "xnRegisterToPixelFormatChange", 
                "xnNodeInfoGetCreationInfo", 
                "xnSetRealProperty", 
                "_Znwj", 
                "xnGetDeviceName", 
                "xnGetIRMetaData", 
                "xnGetStatusString", 
                "xnCreateDevice", 
                "xnNodeQueryAddSupportedMapOutputMode", 
                "__cxa_guard_release", 
                "xnGetSceneMetaData", 
                "xnLoadScriptFromFile", 
                "xnEnumerateExistingNodesByType", 
                "xnRegisterToPoseDetected", 
                "xnIsNewDataAvailable", 
                "xnGetSupportedWaveOutputModesCount", 
                "xnNodeQuerySetCreationInfo", 
                "xnUnregisterFromPoseDetected", 
                "xnGetPlayerSource", 
                "xnNodeQueryAllocate", 
                "xnNodeInfoListGetCurrent", 
                "xnGetDeviceMaxDepth", 
                "xnStartSkeletonTracking", 
                "xnUnregisterFromUserExit", 
                "xnNodeInfoGetDescription", 
                "_Unwind_Resume", 
                "xnSaveSkeletonCalibrationDataToFile", 
                "xnLockedNodeEndChanges", 
                "xnEnumerateLicenses", 
                "xnStopSkeletonTracking", 
                "xnGetGlobalMirror", 
                "xnCreateIRGenerator", 
                "xnCanFrameSyncWith", 
                "xnGetGlobalErrorState", 
                "xnGetUserPixels", 
                "xnSetMapOutputMode", 
                "xnWaitAndUpdateData", 
                "xnUnregisterFromGestureReadyForNextIntermediateStage", 
                "xnGetGeneralIntRange", 
                "xnGetSkeletonJointOrientation", 
                "xnRegisterToOutOfPose", 
                "xnAddLicense", 
                "xnGetMapOutputMode", 
                "xnSeekPlayerToFrame", 
                "xnTellPlayerFrame", 
                "xnProductionNodeRelease", 
                "xnGetUserPosition", 
                "xnIsPixelFormatSupported", 
                "xnRegisterToHandTouchingFOVEdge", 
                "xnGetSupportedMapOutputModes", 
                "xnGetNumberOfUsers", 
                "xnEnumerationErrorsFree", 
                "xnStopGeneratingAll", 
                "xnGetPoseStatus", 
                "xnRegisterToNodeErrorStateChange", 
                "xnSetGeneralIntValue", 
                "xnGetDepthMap", 
                "xnGetBytesPerPixelForPixelFormat", 
                "xnStopTrackingAll", 
                "xnGetIntProperty", 
                "xnNodeInfoGetRefHandle", 
                "xnAddNeededNode", 
                "xnFindExistingRefNodeByType", 
                "xnGetSupportedWaveOutputModes", 
                "xnGetImageMap", 
                "xnGetRefNodeHandleByName", 
                "xnSetSkeletonProfile", 
                "xnIsGestureAvailable", 
                "xnUnregisterFromCalibrationStart", 
                "xnRegisterToGestureChange", 
                "_ZdlPvj", 
                "xnContextRunXmlScriptFromFileEx", 
                "xnUnregisterFromPowerLineFrequencyChange", 
                "xnGetNumberOfAvailableGestures", 
                "xnNodeInfoListRemove", 
                "xnNodeInfoListAppend", 
                "xnGetAllAvailablePoses", 
                "xnRegisterToViewPointChange", 
                "xnNodeInfoListGetNext", 
                "xnNodeQuerySetMaxVersion", 
                "xnGetNodeName", 
                "xnGetDataSize", 
                "xnUnregisterFromOutOfPose", 
                "xnGetAllActiveGestures", 
                "__cxa_throw_bad_array_new_length", 
                "xnOSFree", 
                "xnNodeInfoListAdd", 
                "xnStartGeneratingAll", 
                "xnProductionNodeTypeToString", 
                "xnRemoveNeededNode", 
                "xnScriptNodeRun", 
                "xnLockNodeForChanges", 
                "xnGetPowerLineFrequency", 
                "xnIsCapabilitySupported", 
                "xnUnregisterFromViewPointChange", 
                "xnEncodeData", 
                "xnNodeInfoListFree", 
                "xnRegisterToCalibrationComplete", 
                "xnNodeInfoListGetFirst", 
                "xnNodeQueryAddNeededNode", 
                "xnGetCodecID", 
                "_ZdaPv", 
                "xnEnumerateAllGestures", 
                "xnGetBytesPerPixel", 
                "xnNodeInfoSetInstanceName", 
                "xnInit", 
                "xnRegisterToPoseDetectionInProgress", 
                "xnEnumeratePlayerNodes", 
                "xnAllocateSceneMetaData", 
                "xnIsSkeletonCalibrated", 
                "xnConvertProjectiveToRealWorld", 
                "xnSetCropping", 
                "xnRegisterToNodeDestruction", 
                "xnUnregisterFromCroppingChange", 
                "xnUnregisterFromPixelFormatChange", 
                "xnSetUserPosition", 
                "xnRegisterToGestureReadyForNextIntermediateStage", 
                "xnGetStringProperty", 
                "xnIsJointActive", 
                "xnRegisterToUserPositionChange", 
                "xnEnumerationErrorsClear", 
                "xnRemoveNodeFromRecording", 
                "xnRegisterToWaveOutputModeChanges", 
                "xnUnregisterFromUserPositionChange", 
                "xnGetSkeletonJointPosition", 
                "xnRequestSkeletonCalibration", 
                "xnCreateProductionTree", 
                "xnAllocateAudioMetaData", 
                "xnGetRefContextFromNodeHandle", 
                "xnEnumerateActiveJoints", 
                "xnSaveSkeletonCalibrationData", 
                "xnGetWaveOutputMode", 
                "xnSetPlayerRepeat", 
                "xnRegisterUserCallbacks", 
                "xnEnumerateExistingNodes", 
                "xnCreateUserGenerator", 
                "xnRegisterToJointConfigurationChange", 
                "xnGetSkeletonJoint", 
                "xnNodeInfoListIteratorIsValid", 
                "xnUnregisterGestureCallbacks", 
                "xnIsGenerating", 
                "xnRegisterToCalibrationInProgress", 
                "xnNodeInfoGetInstanceName", 
                "xnUnregisterFromGestureChange", 
                "xnIsPlayerAtEOF", 
                "xnSetPixelFormat", 
                "xnCreateScriptNode", 
                "xnResetSkeleton", 
                "xnGetAudioBuffer", 
                "xnDecodeData", 
                "xnInitFromXmlFileEx", 
                "xnSetStringProperty", 
                "xnCreateHandsGenerator", 
                "xnUnregisterFromNodeErrorStateChange", 
                "xnIsGestureProgressSupported", 
                "xnStartGenerating", 
                "xnGetGeneralIntValue", 
                "xnGetNodeInfo", 
                "xnNodeInfoListAllocate", 
                "xnRegisterToGenerationRunningChange", 
                "xnRegisterToGlobalErrorStateChange", 
                "xnTellPlayerTimestamp", 
                "xnUnlockNodeForChanges", 
                "xnIsPoseSupported", 
                "xnRegisterToUserExit", 
                "xnSetPowerLineFrequency", 
                "xnCreateGestureGenerator", 
                "xnGetRecorderDestination", 
                "xnStartPoseDetection", 
                "__stack_chk_fail", 
                "xnGetSupportedUserPositionsCount", 
                "xnAddGesture", 
                "xnNodeQueryAddSupportedCapability", 
                "xnUnregisterFromNewDataAvailable", 
                "xnGetCropping", 
                "xnLoadSkeletonCalibrationData", 
                "xnResolutionGetFromXYRes", 
                "xnUnregisterFromGeneralIntValueChange", 
                "xnSetIntProperty", 
                "xnEnumerationErrorsIteratorIsValid", 
                "xnStopGenerating", 
                "xnGetLabelMap", 
                "xnIsProfileAvailable", 
                "xnNodeQueryFilterList", 
                "xnGetVendorSpecificData", 
                "xnRegisterToNewDataAvailable", 
                "xnCreatePlayer", 
                "xnGetFrameID", 
                "xnGetUsers", 
                "xnGetPlaybackSpeed", 
                "xnUnregisterUserCallbacks", 
                "xnGetUserCoM", 
                "xnIsDataNew", 
                "xnUnregisterFromNodeDestruction", 
                "xnCreateImageGenerator", 
                "xnWaitAnyUpdateAll", 
                "xnUnregisterFromDepthFieldOfViewChange", 
                "xnFrameSyncWith", 
                "xnContextOpenFileRecordingEx", 
                "xnResolutionGetYRes", 
                "xnSetViewPoint", 
                "xnUnregisterFromFrameSyncChange", 
                "xnEnumerationErrorsGetFirst", 
                "xnIsJointAvailable", 
                "xnNodeInfoListClear", 
                "xnUnregisterHandCallbacks", 
                "xnIsSkeletonCalibrationData", 
                "xnRegisterToMirrorChange", 
                "xnRegisterToNodeCreation", 
                "_ITM_deregisterTMCloneTable", 
                "xnGetSerialNumber", 
                "xnConvertRealWorldToProjective", 
                "__gxx_personality_v0", 
                "__strcpy_chk", 
                "xnNodeInfoListAddNode", 
                "_Znaj", 
                "xnRecord", 
                "xnRegisterGestureCallbacks", 
                "xnCreateDepthGenerator", 
                "xnGetIRMap", 
                "xnUnregisterFromWaveOutputModeChanges", 
                "xnGetDepthMetaData", 
                "xnStopFrameSyncWith", 
                "xnUnregisterFromJointConfigurationChange", 
                "xnNodeQuerySetMinVersion", 
                "xnSetMirror", 
                "xnResolutionGetName", 
                "xnUnregisterFromMirrorChange", 
                "__cxa_guard_acquire", 
                "xnGetFloor", 
                "xnGetNodeErrorState", 
                "xnUnregisterFromGenerationRunningChange", 
                "xnContextAddRef", 
                "xnCreateAudioGenerator", 
                "xnEnumerationErrorsToString", 
                "xnAddNodeToRecording", 
                "__cxa_finalize", 
                "xnUnregisterFromUserReEnter", 
                "xnSetTrackingSmoothing", 
                "__cxa_guard_abort", 
                "xnStopTracking", 
                "xnRegisterHandCallbacks", 
                "xnSetJointActive", 
                "xnRegisterToCroppingChange", 
                "xnRegisterToPowerLineFrequencyChange", 
                "xnClearSkeletonCalibrationData", 
                "xnScriptNodeGetSupportedFormat", 
                "xnResolutionGetFromName", 
                "xnIsMirrored", 
                "xnRegisterToEndOfFileReached", 
                "xnIsFrameSyncedWith", 
                "xnNodeQuerySetExistingNodeOnly", 
                "xnGetData", 
                "xnIsTypeDerivedFrom", 
                "xnRemoveGesture", 
                "xnIsTypeGenerator", 
                "xnUnregisterFromPoseDetectionInProgress", 
                "xnGetSupportedMapOutputModesCount", 
                "xnNodeQuerySetSupportedMinUserPositions", 
                "xnGetRecorderFormat", 
                "xnWaitNoneUpdateAll", 
                "xnAllocateDepthMetaData", 
                "xnGetGeneralProperty", 
                "xnSetGlobalMirror", 
                "xnContextRelease", 
                "xnSetWaveOutputMode", 
                "xnEnumerateProductionTrees", 
                "xnNodeQuerySetNonExistingNodeOnly", 
                "xnNodeInfoListAddNodeFromList", 
                "xnSetPlaybackSpeed", 
                "xnNodeInfoGetNeededNodes", 
                "xnSetRecorderDestination", 
                "xnNeedPoseForSkeletonCalibration", 
                "xnNodeQuerySetName", 
                "_ITM_registerTMCloneTable", 
                "xnLoadScriptFromString", 
                "xnPlayerReadNext", 
                "xnResolutionGetXRes", 
                "xnGetVersion", 
                "xnRegisterToUserReEnter", 
                "xnGetNumberOfPoses", 
                "xnNodeInfoListIsEmpty", 
                "xnUnregisterFromMapOutputModeChange", 
                "xnSetGeneralProperty", 
                "xnGetPixelCoordinatesInViewPoint", 
                "__gmon_start__", 
                "xnGetPlayerSupportedFormat", 
                "xnUnregisterFromEndOfFileReached", 
                "xnRegisterToGeneralIntValueChange", 
                "xnUnregisterFromHandTouchingFOVEdge", 
                "xnSetPlayerSource", 
                "xnStartTracking", 
                "xnRegisterToGestureIntermediateStageCompleted", 
                "xnRegisterToCalibrationStart", 
                "xnIsViewPointAs", 
                "xnStopPoseDetection", 
                "xnGetDepthFieldOfView", 
                "xnRegisterToDepthFieldOfViewChange", 
                "xnStopSinglePoseDetection", 
                "xnCreateSceneAnalyzer", 
                "xnRegisterToFrameSyncChange", 
                "xnUnregisterFromNodeCreation", 
                "xnAbortSkeletonCalibration", 
                "xnSeekPlayerToTimeStamp", 
                "xnGetPlayerNumFrames", 
                "xnSetSkeletonSmoothing", 
                "xnNodeQuerySetVendor", 
                "xnGetRealProperty", 
                "xnIsSkeletonCalibrating", 
                "xnGetSkeletonCalibrationPose", 
                "xnContextRunXmlScriptEx", 
                "xnOSMalloc", 
                "xnAllocateImageMetaData", 
                "xnAllocateIRMetaData", 
                "xnRegisterToMapOutputModeChange", 
                "xnEnumerationErrorsAllocate", 
                "xnResetViewPoint", 
                "xnGetTimestamp", 
                "xnLoadSkeletonCalibrationDataFromFile", 
                "xnCreatePoint3D", 
                "xnUnregisterFromGestureIntermediateStageCompleted", 
                "xnProductionNodeAddRef", 
                "xnNodeInfoGetTreeStringRepresentation", 
                "xnGetImageMetaData", 
                "xnGetPixelFormat", 
                "xnCreateAnyProductionTree", 
                "xnUnregisterFromCalibrationComplete", 
                "xnUnregisterFromGlobalErrorStateChange", 
                "xnUnregisterFromCalibrationInProgress", 
                "xnWaitOneUpdateAll", 
                "xnLockedNodeStartChanges", 
                "xnIsSkeletonTracking", 
                "xnCreateRecorder", 
                "xnIsViewPointSupported", 
                "xnOSMemSet", 
                "xnGetAudioMetaData", 
                "xnCreateCodec"
            ], 
            "rpm": "openni-1.5.7.10-11.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libOpenNI.jni.so"
        }, 
        "usr/bin/niReg": {
            "report-functions": [
                "xnLogSetMaskMinSeverity", 
                "xnLogSetConsoleOutput", 
                "xnGetStatusString", 
                "_ITM_deregisterTMCloneTable", 
                "__libc_start_main", 
                "__cxa_finalize", 
                "_ITM_registerTMCloneTable", 
                "putchar", 
                "__gmon_start__", 
                "strcmp", 
                "puts", 
                "xnPrintRegisteredModules", 
                "xnRegisterModule", 
                "xnUnregisterModule"
            ], 
            "rpm": "openni-1.5.7.10-11.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "yes", 
                " Stack protected": "no, not found!", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/bin/niReg"
        }, 
        "usr/lib/libnimRecorder_so": {
            "report-functions": [
                "_ZdlPvj", 
                "_Znwj", 
                "memset", 
                "__cxa_finalize", 
                "xnProductionNodeRelease", 
                "xnGetCodecID", 
                "xnNodeInfoListAdd", 
                "xnForceShutdown", 
                "__stack_chk_fail", 
                "xnDecodeData", 
                "xnAddNeededNode", 
                "xnOSMemCmp", 
                "xnRemoveNeededNode", 
                "strlen", 
                "xnIsTypeDerivedFrom", 
                "xnOSFree", 
                "xnGetStatusString", 
                "xnLoggerWrite", 
                "_ZdaPv", 
                "xnOSCalloc", 
                "xnOSCreateCriticalSection", 
                "xnCreateCodec", 
                "xnOSStrCopy", 
                "xnOSLeaveCriticalSection", 
                "xnOSStrFormat", 
                "__gxx_personality_v0", 
                "xnOSMemCopy", 
                "xnEncodeData", 
                "xnLogWrite", 
                "xnOSCloseCriticalSection", 
                "xnOSStrCRC32", 
                "xnGetMapOutputMode", 
                "atan", 
                "xnContextUnregisterFromShutdown", 
                "xnContextAddRef", 
                "__cxa_pure_virtual", 
                "xnGetRefNodeHandleByName", 
                "xnProductionNodeAddRef", 
                "xnNodeInfoListFree", 
                "_ITM_deregisterTMCloneTable", 
                "_ZSt9terminatev", 
                "_Unwind_Resume", 
                "xnEnumerationErrorsFree", 
                "xnGetRefContextFromNodeHandle", 
                "__cxa_atexit", 
                "xnContextRelease", 
                "__gmon_start__", 
                "strcmp", 
                "xnContextRegisterForShutdown", 
                "_Znaj", 
                "xnOSStrCmp", 
                "xnOSMemSet", 
                "xnOSStrDup", 
                "xnVersionCompare", 
                "xnIsTypeGenerator", 
                "__dynamic_cast", 
                "xnOSEnterCriticalSection"
            ], 
            "rpm": "openni-1.5.7.10-11.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "no, only unprotected functions found!", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libnimRecorder.so"
        }, 
        "usr/lib/libnimCodecs_so": {
            "report-functions": [
                "xnGetStatusString", 
                "jpeg_set_defaults", 
                "xnNodeInfoListAdd", 
                "__stack_chk_fail", 
                "__gxx_personality_v0", 
                "jpeg_read_header", 
                "xnUnregisterFromCroppingChange", 
                "xnLoggerWrite", 
                "_setjmp", 
                "xnIsCapabilitySupported", 
                "jpeg_destroy_compress", 
                "_Znwj", 
                "xnGetNodeInfo", 
                "jpeg_start_decompress", 
                "xnGetMapOutputMode", 
                "jpeg_finish_compress", 
                "xnGetDeviceMaxDepth", 
                "_ITM_registerTMCloneTable", 
                "_ZdlPvj", 
                "xnContextRelease", 
                "jpeg_start_compress", 
                "xnLogWrite", 
                "xnOSMemSet", 
                "jpeg_write_scanlines", 
                "jpeg_CreateDecompress", 
                "__cxa_atexit", 
                "jpeg_CreateCompress", 
                "xnGetPixelFormat", 
                "_Unwind_Resume", 
                "jpeg_std_error", 
                "xnForceShutdown", 
                "xnContextRegisterForShutdown", 
                "jpeg_read_scanlines", 
                "__cxa_finalize", 
                "xnOSMemCopy", 
                "xnUnregisterFromMapOutputModeChange", 
                "__cxa_pure_virtual", 
                "xnNodeInfoListFree", 
                "xnProductionNodeRelease", 
                "__strcpy_chk", 
                "__longjmp_chk", 
                "jpeg_resync_to_restart", 
                "xnGetRefContextFromNodeHandle", 
                "xnRegisterToMapOutputModeChange", 
                "jpeg_finish_decompress", 
                "_ITM_deregisterTMCloneTable", 
                "jpeg_destroy_decompress", 
                "xnIsTypeDerivedFrom", 
                "__dynamic_cast", 
                "xnGetRefNodeHandleByName", 
                "xnRegisterToCroppingChange", 
                "xnContextUnregisterFromShutdown", 
                "xnGetNodeName", 
                "jpeg_set_quality", 
                "xnEnumerationErrorsFree", 
                "xnGetCropping", 
                "__gmon_start__", 
                "xnContextAddRef"
            ], 
            "rpm": "openni-1.5.7.10-11.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libnimCodecs.so"
        }, 
        "usr/lib/libNiSampleModule_so": {
            "report-functions": [
                "xnOSWaitForThreadExit", 
                "xnOSEnterCriticalSection", 
                "xnGetRefContextFromNodeHandle", 
                "xnContextUnregisterFromShutdown", 
                "xnContextRelease", 
                "xnIsTypeDerivedFrom", 
                "_ITM_deregisterTMCloneTable", 
                "xnContextAddRef", 
                "xnOSCloseCriticalSection", 
                "xnProductionNodeAddRef", 
                "_ITM_registerTMCloneTable", 
                "_ZdaPv", 
                "xnNodeInfoListFree", 
                "xnOSLeaveCriticalSection", 
                "__gmon_start__", 
                "_ZSt9terminatev", 
                "xnProductionNodeRelease", 
                "xnNodeInfoListAdd", 
                "__cxa_pure_virtual", 
                "_Znaj", 
                "xnEnumerationErrorsFree", 
                "xnForceShutdown", 
                "__cxa_finalize", 
                "xnOSSleep", 
                "xnContextRegisterForShutdown", 
                "__cxa_atexit", 
                "_Unwind_Resume", 
                "_ZdlPvj", 
                "__dynamic_cast", 
                "xnOSCreateThread", 
                "xnOSCreateCriticalSection", 
                "__stack_chk_fail"
            ], 
            "rpm": "openni-1.5.7.10-11.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libNiSampleModule.so"
        }, 
        "usr/lib/libOpenNI_so": {
            "report-functions": [
                "semget", 
                "chdir", 
                "dirname", 
                "pthread_mutex_lock", 
                "libusb_get_device_descriptor", 
                "___tls_get_addr", 
                "libusb_interrupt_transfer", 
                "open", 
                "__errno_location", 
                "_Znwj", 
                "_ZN12TiXmlElement12SetAttributeEPKcS1_", 
                "write", 
                "libusb_free_config_descriptor", 
                "lseek", 
                "pthread_join", 
                "libusb_kernel_driver_active", 
                "malloc", 
                "libusb_close", 
                "shutdown", 
                "strrchr", 
                "_ZN13TiXmlDocument5ParseEPKcP16TiXmlParsingData13TiXmlEncoding", 
                "__strcpy_chk", 
                "exit", 
                "__realpath_chk", 
                "free", 
                "_ZNK9TiXmlNode17FirstChildElementEv", 
                "semctl", 
                "_ZN9TiXmlNode14InsertEndChildERKS_", 
                "strtok", 
                "_ZdlPv", 
                "__printf_chk", 
                "libusb_submit_transfer", 
                "pthread_setschedparam", 
                "execv", 
                "_exit", 
                "_ITM_registerTMCloneTable", 
                "bind", 
                "libusb_init", 
                "__cxa_throw_bad_array_new_length", 
                "_Znaj", 
                "_ZNK12TiXmlElement7GetTextEv", 
                "pthread_mutex_init", 
                "libusb_bulk_transfer", 
                "libusb_release_interface", 
                "semtimedop", 
                "__sprintf_chk", 
                "pthread_mutex_timedlock", 
                "_ZdlPvj", 
                "fsync", 
                "tcgetattr", 
                "waitpid", 
                "memmove", 
                "_Unwind_Resume", 
                "calloc", 
                "isalpha", 
                "shm_unlink", 
                "_ZNK9TiXmlNode17FirstChildElementEPKc", 
                "libusb_cancel_transfer", 
                "dlclose", 
                "semop", 
                "strtol", 
                "realloc", 
                "_ZNSt8ios_base4InitC1Ev", 
                "fcntl", 
                "getpid", 
                "__udivdi3", 
                "_ZdaPv", 
                "_ZdaPvj", 
                "libusb_free_device_list", 
                "select", 
                "libusb_open", 
                "strcasecmp", 
                "__cxa_guard_acquire", 
                "libusb_attach_kernel_driver", 
                "pthread_mutexattr_init", 
                "unlink", 
                "getcwd", 
                "libusb_detach_kernel_driver", 
                "libusb_control_transfer", 
                "shm_open", 
                "recv", 
                "libusb_get_active_config_descriptor", 
                "setsockopt", 
                "dlerror", 
                "__stack_chk_fail", 
                "_ZSt9terminatev", 
                "pthread_cond_timedwait", 
                "backtrace", 
                "listen", 
                "__cxa_finalize", 
                "_ZNK9TiXmlNode18NextSiblingElementEv", 
                "pthread_cond_init", 
                "mmap", 
                "__gmon_start__", 
                "globfree64", 
                "__divdi3", 
                "glob64", 
                "close", 
                "sscanf", 
                "getenv", 
                "libusb_get_bus_number", 
                "libusb_alloc_transfer", 
                "__cxa_pure_virtual", 
                "pthread_mutex_unlock", 
                "_ZN13TiXmlDocumentC1Ev", 
                "__fdelt_chk", 
                "posix_memalign", 
                "libusb_get_device_list", 
                "_ZNK12TiXmlElement9AttributeEPKcPd", 
                "time", 
                "_ZNSt8ios_base4InitD1Ev", 
                "usleep", 
                "libusb_set_interface_alt_setting", 
                "connect", 
                "ungetc", 
                "pthread_mutexattr_settype", 
                "ftruncate", 
                "tcsetattr", 
                "dlopen", 
                "strchr", 
                "fork", 
                "strcpy", 
                "pthread_mutexattr_destroy", 
                "ftok", 
                "libusb_claim_interface", 
                "sendto", 
                "_ZNK13TiXmlDocument8SaveFileEPKc", 
                "gethostbyname", 
                "__cxa_guard_abort", 
                "puts", 
                "strtod", 
                "__gxx_personality_v0", 
                "mkdir", 
                "libusb_get_device_address", 
                "libusb_ref_device", 
                "send", 
                "read", 
                "__cxa_guard_release", 
                "pthread_mutex_destroy", 
                "dlsym", 
                "pthread_cond_wait", 
                "pthread_cancel", 
                "_ZN12TiXmlElementC1EPKc", 
                "libusb_free_transfer", 
                "pthread_create", 
                "_IO_getc", 
                "accept", 
                "pthread_cond_broadcast", 
                "_ZNK9TiXmlNode18NextSiblingElementEPKc", 
                "lseek64", 
                "pthread_cond_destroy", 
                "open64", 
                "tan", 
                "libusb_exit", 
                "__cxa_atexit", 
                "_ZNK12TiXmlElement9AttributeEPKc", 
                "__dynamic_cast", 
                "backtrace_symbols", 
                "_ZN13TiXmlDocument8LoadFileEPKc13TiXmlEncoding", 
                "_ZN12TiXmlElementD1Ev", 
                "getsockopt", 
                "_ZN9TiXmlNodeD2Ev", 
                "pthread_self", 
                "socket", 
                "__xpg_basename", 
                "localtime", 
                "libusb_unref_device", 
                "strlen", 
                "inet_addr", 
                "strncpy", 
                "strncat", 
                "access", 
                "libusb_get_device", 
                "recvfrom", 
                "__vsnprintf_chk", 
                "_ZN9TiXmlNode11RemoveChildEPS_", 
                "clock_gettime", 
                "__xstat64", 
                "memcmp", 
                "pthread_timedjoin_np", 
                "libusb_handle_events_timeout", 
                "munmap", 
                "setsid", 
                "strcmp", 
                "_ITM_deregisterTMCloneTable"
            ], 
            "rpm": "openni-1.5.7.10-11.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libOpenNI.so"
        }, 
        "usr/bin/niLicense": {
            "report-functions": [
                "_ITM_registerTMCloneTable", 
                "xnGetStatusString", 
                "xnLogInitSystem", 
                "__gmon_start__", 
                "puts", 
                "strcmp", 
                "putchar", 
                "xnPrintRegisteredLicenses", 
                "_ITM_deregisterTMCloneTable", 
                "__libc_start_main", 
                "__cxa_finalize", 
                "xnRegisterGlobalLicense", 
                "__stack_chk_fail", 
                "__printf_chk", 
                "xnUnregisterGlobalLicense", 
                "xnOSStrNCopy"
            ], 
            "rpm": "openni-1.5.7.10-11.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "yes", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/bin/niLicense"
        }, 
        "usr/lib/libnimMockNodes_so": {
            "report-functions": [
                "xnGetBytesPerPixelForPixelFormat", 
                "__stack_chk_fail", 
                "__dynamic_cast", 
                "xnLogWrite", 
                "__cxa_atexit", 
                "xnOSMemSet", 
                "xnContextAddRef", 
                "xnOSStrDup", 
                "xnOSMallocAligned", 
                "_ZdaPv", 
                "xnOSStrNCopy", 
                "xnOSFree", 
                "xnOSMemCopy", 
                "xnOSStrCopy", 
                "xnOSEnterCriticalSection", 
                "xnRegisterToNodeCreation", 
                "xnOSLeaveCriticalSection", 
                "_Znwj", 
                "_Znaj", 
                "xnGetRefContextFromNodeHandle", 
                "_ZdlPvj", 
                "__gmon_start__", 
                "xnUnregisterFromNodeDestruction", 
                "xnForceShutdown", 
                "xnOSStrCRC32", 
                "xnGetRefNodeHandleByName", 
                "__cxa_pure_virtual", 
                "xnOSCloseCriticalSection", 
                "strlen", 
                "xnOSCreateCriticalSection", 
                "xnEnumerationErrorsFree", 
                "_ITM_deregisterTMCloneTable", 
                "xnRegisterToNodeDestruction", 
                "xnOSFreeAligned", 
                "xnOSMalloc", 
                "_Unwind_Resume", 
                "xnOSMemCmp", 
                "strcmp", 
                "xnProductionNodeAddRef", 
                "xnNodeInfoListFree", 
                "xnGetNodeName", 
                "_ITM_registerTMCloneTable", 
                "__cxa_finalize", 
                "__cxa_throw_bad_array_new_length", 
                "xnContextUnregisterFromShutdown", 
                "xnContextRelease", 
                "xnIsTypeDerivedFrom", 
                "__gxx_personality_v0", 
                "xnUnregisterFromNodeCreation", 
                "xnContextRegisterForShutdown"
            ], 
            "rpm": "openni-1.5.7.10-11.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libnimMockNodes.so"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " System Environment/Libraries", 
            "Name": " openni", 
            "License": " ASL 2.0 and BSD", 
            "URL": " http://www.openni.org", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildvm-19.phx2.fedoraproject.org", 
            "Description": "\nOpenNI (Open Natural Interaction) is a multi-language, cross-platform\nframework that defines APIs for writing applications utilizing Natural\nInteraction. OpenNI APIs are composed of a set of interfaces for writing NI\napplications. The main purpose of OpenNI is to form a standard API that\nenables communication with both:\n * Vision and audio sensors\n * Vision and audio perception middleware\n", 
            "Build Date": " Fri 04 Aug 2017 02:30:07 AM EDT", 
            "Source RPM": " openni-1.5.7.10-11.fc27.src.rpm", 
            "Version": " 1.5.7.10", 
            "Architecture": " i686", 
            "Signature": " RSA/SHA256, Fri 04 Aug 2017 02:43:52 AM EDT, Key ID f55e7430f5282ee4", 
            "Release": " 11.fc27", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " Library for human-machine Natural Interaction", 
            "Size": " 1385994"
        }
    }
}