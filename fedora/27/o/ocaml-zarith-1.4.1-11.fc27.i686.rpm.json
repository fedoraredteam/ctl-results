{
    "results": {
        "usr/lib/ocaml/stublibs/dllzarith_so": {
            "report-functions": [
                "__stack_chk_fail", 
                "caml_failwith", 
                "__gmpz_clear", 
                "caml_copy_nativeint", 
                "__gmpz_nextprime", 
                "__gmpn_sqr", 
                "__gmpn_sub_n", 
                "__gmpz_realloc2", 
                "caml_string_length", 
                "caml_copy_int32", 
                "__gmpz_root", 
                "__gmon_start__", 
                "__cxa_finalize", 
                "_ITM_deregisterTMCloneTable", 
                "caml_serialize_int_1", 
                "free", 
                "caml_copy_int64", 
                "__gmpn_sqrtrem", 
                "caml_alloc_string", 
                "_ITM_registerTMCloneTable", 
                "__gmpn_get_str", 
                "caml_register_custom_operations", 
                "__gmpz_probab_prime_p", 
                "caml_serialize_int_4", 
                "__gmpn_lshift", 
                "caml_raise_zero_divide", 
                "__gmpz_powm_sec", 
                "__gmpn_mul", 
                "caml_raise_constant", 
                "__gmpn_divexact", 
                "caml_copy_string", 
                "__gmpn_scan1", 
                "__gmpn_gcd", 
                "__gmpz_init", 
                "__gmpz_invert", 
                "__gmpn_gcdext", 
                "caml_deserialize_uint_1", 
                "__gmpn_mul_1", 
                "__gmpn_tdiv_qr", 
                "__gmpz_powm", 
                "__gmpz_pow_ui", 
                "caml_alloc_small", 
                "__gmpn_add_n", 
                "caml_alloc_custom", 
                "__gmpn_mul_n", 
                "caml_deserialize_uint_4", 
                "strlen", 
                "__gmpn_popcount", 
                "__gmpn_rshift", 
                "caml_named_value", 
                "caml_local_roots", 
                "__gmpn_perfect_square_p", 
                "caml_invalid_argument", 
                "strncpy", 
                "caml_hash_mix_uint32", 
                "malloc", 
                "__gmpn_set_str"
            ], 
            "rpm": "ocaml-zarith-1.4.1-11.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: 'NoneType' object is not iterable"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "no, only unprotected functions found!", 
                " Immediate binding": "no, not found!"
            }, 
            "filename": "usr/lib/ocaml/stublibs/dllzarith.so"
        }, 
        "usr/lib/ocaml/zarith/zarith_cmxs": {
            "report-functions": [
                "_ITM_registerTMCloneTable", 
                "__cxa_finalize"
            ], 
            "rpm": "ocaml-zarith-1.4.1-11.fc27.i686.rpm", 
            "complexity": {
                "r2aa": {
                    "afCc": null, 
                    "afC": null
                }
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "no, not found!", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "no, not found!"
            }, 
            "filename": "usr/lib/ocaml/zarith/zarith.cmxs"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " Unspecified", 
            "Name": " ocaml-zarith", 
            "License": " LGPLv2 with exceptions", 
            "URL": " http://forge.ocamlcore.org/projects/zarith", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildhw-05.phx2.fedoraproject.org", 
            "Description": "\nThis library implements arithmetic and logical operations over\narbitrary-precision integers.\n\nThe module is simply named \"Z\".  Its interface is similar to that of the\nInt32, Int64 and Nativeint modules from the OCaml standard library, with\nsome additional functions.  See the file z.mlip for documentation.\n\nThe implementation uses GMP (the GNU Multiple Precision arithmetic\nlibrary) to compute over big integers.  However, small integers are\nrepresented as unboxed Caml integers, to save space and improve\nperformance.  Big integers are allocated in the Caml heap, bypassing\nGMP's memory management and achieving better GC behavior than e.g. the\nMLGMP library.  Computations on small integers use a special, faster\npath (coded in assembly for some platforms and functions) eschewing\ncalls to GMP, while computations on large integers use the low-level\nMPN functions from GMP.\n\nArbitrary-precision integers can be compared correctly using OCaml's\npolymorphic comparison operators (=, <, >, etc.).\n\nAdditional features include:\n- a module Q for rationals, built on top of Z (see q.mli)\n- a compatibility layer Big_int_Z that implements the same API as Big_int,\n  but uses Z internally\n", 
            "Build Date": " Mon 07 Aug 2017 02:21:44 PM EDT", 
            "Source RPM": " ocaml-zarith-1.4.1-11.fc27.src.rpm", 
            "Version": " 1.4.1", 
            "Architecture": " i686", 
            "Signature": " RSA/SHA256, Wed 09 Aug 2017 10:12:17 AM EDT, Key ID f55e7430f5282ee4", 
            "Release": " 11.fc27", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " OCaml interface to GMP", 
            "Size": " 194205"
        }
    }
}