{
    "results": {
        "complexity": {
            "r2aa": {
                "afCc": 1, 
                "afC": 23
            }
        }, 
        "usr/bin/Broker": {
            "report-functions": [
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm", 
                "mkdir", 
                "__cxa_finalize", 
                "_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_", 
                "pthread_mutex_unlock", 
                "close", 
                "_Znam", 
                "_ZNSt6localeD1Ev", 
                "xmlTextWriterEndDocument", 
                "gethostname", 
                "pthread_mutexattr_init", 
                "__cxa_pure_virtual", 
                "__cxa_throw", 
                "putchar", 
                "_ZNSt13basic_filebufIcSt11char_traitsIcEEC1Ev", 
                "xmlParseFile", 
                "bind", 
                "_ZNSt8__detail15_List_node_base7_M_hookEPS0_", 
                "_ZNSo9_M_insertIdEERSoT_", 
                "__cxa_rethrow", 
                "__sprintf_chk", 
                "_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base", 
                "free", 
                "xmlCheckVersion", 
                "memset", 
                "pthread_mutex_destroy", 
                "send", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm", 
                "rand", 
                "_ZSt13set_terminatePFvvE", 
                "strerror", 
                "__cxa_free_exception", 
                "strtol", 
                "__cxa_allocate_exception", 
                "_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm", 
                "pthread_mutexattr_destroy", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm", 
                "strcmp", 
                "_ZdlPv", 
                "pthread_join", 
                "_ZNSt6localeC1Ev", 
                "pthread_cond_wait", 
                "_ZSt20__throw_length_errorPKc", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc", 
                "fclose", 
                "opendir", 
                "pthread_create", 
                "_ZNSolsEi", 
                "xmlTextWriterStartElement", 
                "closedir", 
                "_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate", 
                "_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev", 
                "__cxa_end_catch", 
                "fopen", 
                "pthread_cond_destroy", 
                "listen", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEPKcmm", 
                "_ZdaPv", 
                "__cxa_atexit", 
                "__gmon_start__", 
                "inet_ntop", 
                "_ZNKSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE3strEv", 
                "__cxa_guard_release", 
                "connect", 
                "_ZNSt8ios_baseC2Ev", 
                "_ZNSt13basic_filebufIcSt11char_traitsIcEED1Ev", 
                "_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcmm", 
                "srand", 
                "nanosleep", 
                "pthread_cond_broadcast", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc", 
                "xmlTextWriterEndElement", 
                "xmlFreeTextWriter", 
                "_Znwm", 
                "getcwd", 
                "localtime", 
                "__dynamic_cast", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm", 
                "time", 
                "_ZNSo5flushEv", 
                "_ZdlPvm", 
                "xmlDocGetRootElement", 
                "fork", 
                "unlink", 
                "strdup", 
                "_ITM_deregisterTMCloneTable", 
                "__gxx_personality_v0", 
                "__xstat", 
                "xmlCleanupParser", 
                "_ZNSt12__basic_fileIcED1Ev", 
                "inet_addr", 
                "fgets", 
                "xmlFreeDoc", 
                "__stack_chk_fail", 
                "__libc_start_main", 
                "pthread_cond_init", 
                "feof", 
                "_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E", 
                "xmlTextWriterWriteAttribute", 
                "_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode", 
                "malloc", 
                "pthread_mutex_lock", 
                "memcmp", 
                "execvp", 
                "_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l", 
                "_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev", 
                "memmove", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_", 
                "_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc", 
                "_ZNKSt12__basic_fileIcE7is_openEv", 
                "_ZSt24__throw_out_of_range_fmtPKcz", 
                "_ZNSt13basic_filebufIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode", 
                "strncmp", 
                "__cxa_throw_bad_array_new_length", 
                "getifaddrs", 
                "__strncpy_chk", 
                "exit", 
                "recv", 
                "_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE7_M_syncEPcmm", 
                "xmlNewTextWriterDoc", 
                "_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_", 
                "__errno_location", 
                "_ZNSirsERi", 
                "pthread_mutexattr_settype", 
                "pthread_mutex_init", 
                "__cxa_guard_abort", 
                "_Unwind_Resume", 
                "__cxa_begin_catch", 
                "getenv", 
                "_ZNSt8ios_baseD2Ev", 
                "_ZNKSt9exception4whatEv", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm", 
                "_ZNSt8ios_base4InitC1Ev", 
                "strftime", 
                "_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_", 
                "_ZNSt9exceptionD1Ev", 
                "xmlGetProp", 
                "_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv", 
                "pthread_self", 
                "_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base", 
                "calloc", 
                "strtok", 
                "strchr", 
                "_ZNSt8ios_base4InitD1Ev", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_", 
                "_ZSt19__throw_logic_errorPKc", 
                "socket", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc", 
                "inet_ntoa", 
                "__printf_chk", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_", 
                "__cxa_guard_acquire", 
                "_ZSt16__throw_bad_castv", 
                "_ZNKSt5ctypeIcE13_M_widen_initEv", 
                "_ZSt17__throw_bad_allocv", 
                "xmlTextWriterStartDocument", 
                "strlen", 
                "isolat1ToUTF8", 
                "accept", 
                "_ZNSi10_M_extractIdEERSiRT_", 
                "gethostbyname", 
                "memcpy", 
                "readdir", 
                "_ITM_registerTMCloneTable"
            ], 
            "rpm": "libsbw-2.11.1-16.20160916svn589.fc27.x86_64.rpm", 
            "find-libc-functions": [
                "GI___obstack_vprintf", 
                "GI___vasprintf", 
                "GI___vdprintf", 
                "GI___vfprintf", 
                "GI___vfwprintf", 
                "GI___vsnprintf", 
                "GI___vsprintf", 
                "GI___vswprintf", 
                "GI___vsyslog", 
                "__longjmp", 
                "_fprintf", 
                "_printf", 
                "_snprintf", 
                "_sprintf", 
                "_vfprintf", 
                "_vprintf", 
                "_vsnprintf", 
                "_vsprintf", 
                "asprintf", 
                "confstr", 
                "dprintf", 
                "explicit_bzero", 
                "fdelt", 
                "fgets", 
                "fgets_unlocked", 
                "fgetws", 
                "fgetws_unlocked", 
                "fprintf", 
                "fread", 
                "fread_unlocked", 
                "fwprintf", 
                "getcwd", 
                "getdomainname", 
                "getgroups", 
                "gethostname", 
                "getlogin_r", 
                "gets", 
                "getwd", 
                "longjmp", 
                "mbsnrtowcs", 
                "mbsrtowcs", 
                "mbstowcs", 
                "memcpy", 
                "memmove", 
                "mempcpy", 
                "memset", 
                "obstack_printf", 
                "obstack_vprintf", 
                "poll", 
                "ppoll", 
                "pread64", 
                "pread", 
                "printf", 
                "ptsname_r", 
                "read", 
                "readlink", 
                "readlinkat", 
                "realpath", 
                "recv", 
                "recvfrom", 
                "snprintf", 
                "sprintf", 
                "stpcpy", 
                "stpncpy", 
                "strcat", 
                "strcpy", 
                "strncat", 
                "strncpy", 
                "swprintf", 
                "syslog", 
                "ttyname_r", 
                "vasprintf", 
                "vdprintf", 
                "vfprintf", 
                "vfwprintf", 
                "vprintf", 
                "vsnprintf", 
                "vsprintf", 
                "vswprintf", 
                "vsyslog", 
                "vwprintf", 
                "wcpcpy", 
                "wcpncpy", 
                "wcrtomb", 
                "wcscat", 
                "wcscpy", 
                "wcsncat", 
                "wcsncpy", 
                "wcsnrtombs", 
                "wcsrtombs", 
                "wcstombs", 
                "wctomb", 
                "wmemcpy", 
                "wmemmove", 
                "wmempcpy", 
                "wmemset", 
                "wprintf"
            ], 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "yes", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/bin/Broker"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " Unspecified", 
            "Name": " libsbw", 
            "License": " BSD", 
            "URL": " http://sourceforge.net/projects/sbw/", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildhw-04.phx2.fedoraproject.org", 
            "Description": "\nThe Systems Biology Workbench (SBW) is a framework for application\nintercommunications. It uses a broker-based, distributed,\nmessage-passing architecture, supports many languages\nincluding Java, C++, Perl & Python, and runs under Linux,OSX & Win32.\nBy default, the Broker opens a port for inter-Broker communications\nby searching for the first free port in the range 10102 through 10202,\ninclusive.\nBy default, in Fedora this port range is not opened.\nSee man-page for further informations.\n\nlibSBW is the C++ Broker port from the original SBW Broker (written in Java)\nto C++. The current version implements all the functionality for the local side.\nMeaning if you will just use the Broker on a single machine you should be fine\nusing the C++ Broker.\n", 
            "Build Date": " Thu 03 Aug 2017 04:01:56 PM EDT", 
            "Source RPM": " libsbw-2.11.1-16.20160916svn589.fc27.src.rpm", 
            "Version": " 2.11.1", 
            "Architecture": " x86_64", 
            "Signature": " RSA/SHA256, Fri 04 Aug 2017 01:18:25 PM EDT, Key ID f55e7430f5282ee4", 
            "Release": " 16.20160916svn589.fc27", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " C++ Broker library", 
            "Size": " 1318790"
        }
    }
}