{
    "results": {
        "usr/lib/libdfu_so_1_0_1": {
            "report-functions": [
                "g_usb_device_reset", 
                "g_set_error_literal", 
                "g_type_register_static_simple", 
                "elf32_newehdr", 
                "g_strchomp", 
                "g_propagate_error", 
                "g_list_free", 
                "elf_memory", 
                "g_str_has_prefix", 
                "g_usb_device_get_pid", 
                "g_unix_input_stream_new", 
                "g_ptr_array_new_with_free_func", 
                "__gmon_start__", 
                "g_ptr_array_remove", 
                "elf_version", 
                "g_bytes_get_size", 
                "g_hash_table_size", 
                "g_main_loop_unref", 
                "g_usb_interface_get_class", 
                "g_checksum_free", 
                "g_direct_hash", 
                "g_str_hash", 
                "g_checksum_update", 
                "g_type_check_instance_cast", 
                "g_bytes_equal", 
                "g_return_if_fail_warning", 
                "elf_getshdrstrndx", 
                "g_usb_device_get_release", 
                "g_usb_device_control_transfer", 
                "g_once_init_leave", 
                "elf_end", 
                "g_string_free", 
                "g_object_unref", 
                "g_usb_context_get_type", 
                "g_string_truncate", 
                "g_file_get_type", 
                "g_source_remove", 
                "g_bytes_compare", 
                "g_hash_table_new_full", 
                "g_usb_context_enumerate", 
                "g_usb_device_open", 
                "__gcc_personality_v0", 
                "gelf_getclass", 
                "elf_ndxscn", 
                "g_string_new", 
                "g_bytes_new_from_bytes", 
                "g_assertion_message_expr", 
                "elf_getdata", 
                "g_hash_table_insert", 
                "elf_begin", 
                "as_utils_version_from_uint16", 
                "g_intern_static_string", 
                "g_hash_table_destroy", 
                "gelf_getsym", 
                "syscall", 
                "g_main_loop_quit", 
                "g_getenv", 
                "g_usb_device_get_vid", 
                "__cxa_finalize", 
                "g_strdup_printf", 
                "g_usb_device_set_interface_alt", 
                "__stack_chk_fail", 
                "g_usb_device_claim_interface", 
                "g_usb_device_get_interfaces", 
                "g_str_has_suffix", 
                "g_object_ref", 
                "g_checksum_new", 
                "g_ptr_array_add", 
                "g_signal_new", 
                "elf_nextscn", 
                "g_hash_table_new", 
                "g_free", 
                "g_malloc0_n", 
                "g_error_matches", 
                "g_file_load_contents", 
                "elf_kind", 
                "g_bytes_unref", 
                "g_object_remove_weak_pointer", 
                "g_usb_interface_get_subclass", 
                "g_set_error", 
                "_ITM_registerTMCloneTable", 
                "g_error_free", 
                "g_strfreev", 
                "g_cclosure_marshal_VOID__UINT", 
                "gelf_getshdr", 
                "g_hash_table_remove", 
                "g_hash_table_lookup", 
                "g_ptr_array_set_size", 
                "g_usb_device_close", 
                "g_usb_device_get_string_descriptor", 
                "g_str_equal", 
                "g_usb_context_new", 
                "g_usb_interface_get_protocol", 
                "g_strsplit", 
                "elf_flagphdr", 
                "g_type_check_class_cast", 
                "g_usleep", 
                "g_signal_emit", 
                "g_bytes_new", 
                "g_usb_interface_get_extra", 
                "g_ptr_array_unref", 
                "g_main_loop_run", 
                "g_strdup", 
                "g_file_get_basename", 
                "g_object_new", 
                "g_ascii_strtoull", 
                "g_usb_interface_get_alternate", 
                "g_bytes_ref", 
                "g_main_loop_new", 
                "g_file_replace_contents", 
                "g_list_length", 
                "g_malloc0", 
                "g_ptr_array_new", 
                "_ITM_deregisterTMCloneTable", 
                "g_usb_device_get_product_index", 
                "g_usb_interface_get_number", 
                "g_hash_table_get_keys", 
                "g_type_class_peek_parent", 
                "strlen", 
                "g_usb_device_error_quark", 
                "g_string_append", 
                "elf_errmsg", 
                "elf32_getshdr", 
                "elf_newdata", 
                "elf_strptr", 
                "lseek64", 
                "g_signal_connect_data", 
                "elf_newscn", 
                "g_hash_table_unref", 
                "g_timeout_add", 
                "g_type_add_instance_private", 
                "g_strcmp0", 
                "g_log", 
                "g_prefix_error", 
                "g_input_stream_read_bytes", 
                "g_once_init_enter", 
                "g_usb_device_get_platform_id", 
                "g_strndup", 
                "g_string_insert_c", 
                "g_direct_equal", 
                "g_strstr_len", 
                "g_bytes_new_take", 
                "g_checksum_get_digest", 
                "elf_update", 
                "g_type_check_instance_is_a", 
                "g_cclosure_marshal_VOID__OBJECT", 
                "g_string_append_printf", 
                "g_bytes_get_data", 
                "g_usb_interface_get_index", 
                "_Unwind_Resume", 
                "g_quark_from_static_string", 
                "g_signal_handler_disconnect", 
                "g_type_class_adjust_private_offset", 
                "g_bytes_new_static", 
                "g_object_add_weak_pointer"
            ], 
            "rpm": "libdfu-0.9.7-1.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libdfu.so.1.0.1"
        }, 
        "usr/bin/dfu-tool": {
            "report-functions": [
                "textdomain", 
                "g_intern_static_string", 
                "g_ptr_array_add", 
                "dfu_patch_apply", 
                "g_strv_length", 
                "g_strdup_printf", 
                "close", 
                "g_option_context_new", 
                "dfu_image_get_alt_setting", 
                "dfu_status_to_string", 
                "dfu_firmware_get_image_by_name", 
                "dfu_device_get_targets", 
                "dfu_device_open", 
                "g_source_set_name_by_id", 
                "__stack_chk_fail", 
                "g_bytes_new", 
                "dfu_firmware_add_image", 
                "dfu_device_upload", 
                "g_string_new", 
                "as_utils_version_from_uint16", 
                "dfu_cipher_encrypt_devo", 
                "dfu_firmware_write_file", 
                "g_type_register_static_simple", 
                "g_ascii_strtoull", 
                "g_type_check_instance_is_a", 
                "g_object_new", 
                "dfu_element_set_padding_value", 
                "g_usb_device_get_vid", 
                "g_print", 
                "dfu_firmware_get_format", 
                "dfu_device_get_runtime_vid", 
                "g_malloc0", 
                "g_ptr_array_unref", 
                "dfu_device_set_transfer_size", 
                "dfu_cipher_kind_to_string", 
                "bindtextdomain", 
                "_ITM_deregisterTMCloneTable", 
                "g_bytes_unref", 
                "g_object_ref", 
                "dfu_version_to_string", 
                "g_usb_device_get_pid", 
                "dfu_firmware_set_metadata", 
                "g_return_if_fail_warning", 
                "dfu_context_get_device_by_vid_pid", 
                "g_unix_signal_add_full", 
                "dfu_firmware_new", 
                "g_set_error_literal", 
                "dfu_firmware_set_release", 
                "g_option_context_free", 
                "g_object_set_data_full", 
                "g_string_set_size", 
                "dfu_cipher_decrypt_devo", 
                "g_cancellable_cancel", 
                "dfu_patch_to_string", 
                "g_signal_connect_data", 
                "dfu_mode_to_string", 
                "g_source_remove", 
                "g_once_init_leave", 
                "dfu_device_wait_for_replug", 
                "dfu_device_get_usb_dev", 
                "dfu_device_get_mode", 
                "g_setenv", 
                "g_option_context_set_summary", 
                "__gcc_personality_v0", 
                "dfu_device_attach", 
                "dfu_context_new", 
                "g_string_append", 
                "dfu_device_get_transfer_size", 
                "g_strcmp0", 
                "dfu_device_get_target_by_alt_name", 
                "dfu_firmware_get_size", 
                "dfu_state_to_string", 
                "g_ptr_array_new_with_free_func", 
                "g_file_set_contents", 
                "g_object_unref", 
                "open64", 
                "g_error_free", 
                "_Unwind_Resume", 
                "g_bytes_get_size", 
                "g_string_append_printf", 
                "dfu_device_get_status", 
                "dfu_target_get_alt_name_for_display", 
                "g_format_size_full", 
                "g_strnfill", 
                "g_type_class_peek_parent", 
                "g_string_insert_c", 
                "g_set_application_name", 
                "g_timeout_add", 
                "dfu_image_set_name", 
                "dfu_device_get_serial_number", 
                "g_str_has_suffix", 
                "dfu_firmware_get_release", 
                "dfu_firmware_format_to_string", 
                "g_type_class_adjust_private_offset", 
                "dfu_firmware_get_image", 
                "g_strsplit", 
                "strlen", 
                "dfu_device_get_version", 
                "dfu_firmware_parse_file", 
                "dfu_firmware_format_from_string", 
                "memcmp", 
                "g_file_get_contents", 
                "dfu_cipher_encrypt_xtea", 
                "bind_textdomain_codeset", 
                "dfu_device_get_display_name", 
                "dfu_sector_to_string", 
                "dfu_device_download", 
                "dfu_firmware_set_format", 
                "_ITM_registerTMCloneTable", 
                "dfu_firmware_get_images", 
                "dfu_patch_new", 
                "__cxa_finalize", 
                "dfu_device_get_target_by_alt_setting", 
                "dfu_image_get_element", 
                "dfu_image_set_alt_setting", 
                "dfu_element_get_contents", 
                "dfu_patch_export", 
                "__gmon_start__", 
                "dfu_device_detach", 
                "g_set_error", 
                "dfu_target_download", 
                "dfu_firmware_set_pid", 
                "g_log", 
                "g_option_context_parse", 
                "g_option_context_add_main_entries", 
                "g_malloc", 
                "g_assertion_message_expr", 
                "g_strdup", 
                "g_ptr_array_sort", 
                "dfu_firmware_remove_metadata", 
                "dfu_target_get_cipher_kind", 
                "dfu_target_get_sectors", 
                "g_free", 
                "g_type_check_instance_cast", 
                "dfu_target_get_alt_setting", 
                "dfu_patch_create", 
                "write", 
                "dfu_context_get_devices", 
                "dfu_device_get_quirks_as_string", 
                "dfu_cipher_decrypt_xtea", 
                "dfu_error_quark", 
                "g_string_free", 
                "g_main_loop_run", 
                "g_cancellable_new", 
                "dfu_device_get_runtime_pid", 
                "dfu_firmware_get_pid", 
                "g_main_loop_quit", 
                "g_usb_device_get_release", 
                "dfu_context_get_device_default", 
                "g_file_new_for_path", 
                "g_option_context_get_help", 
                "dfu_image_get_size", 
                "dcgettext", 
                "g_type_check_class_cast", 
                "dfu_device_get_state", 
                "dfu_firmware_set_vid", 
                "dfu_image_get_elements", 
                "__libc_start_main", 
                "dfu_element_set_target_size", 
                "dfu_device_close", 
                "g_once_init_enter", 
                "g_main_loop_unref", 
                "dfu_firmware_get_image_default", 
                "dfu_target_upload", 
                "dfu_patch_import", 
                "g_main_loop_new", 
                "g_error_matches", 
                "dfu_context_enumerate", 
                "dfu_element_set_address", 
                "dfu_firmware_to_string", 
                "dfu_firmware_get_vid", 
                "g_bytes_get_data"
            ], 
            "rpm": "libdfu-0.9.7-1.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "yes", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/bin/dfu-tool"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " Unspecified", 
            "Name": " libdfu", 
            "License": " GPLv2+", 
            "URL": " https://github.com/hughsie/fwupd", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildvm-20.phx2.fedoraproject.org", 
            "Description": "\nA library for updating USB devices using DFU.\n", 
            "Build Date": " Mon 04 Sep 2017 01:32:35 PM EDT", 
            "Source RPM": " fwupd-0.9.7-1.fc27.src.rpm", 
            "Version": " 0.9.7", 
            "Architecture": " i686", 
            "Signature": " RSA/SHA256, Mon 04 Sep 2017 01:46:33 PM EDT, Key ID f55e7430f5282ee4", 
            "Release": " 1.fc27", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " A library for DFU", 
            "Size": " 229960"
        }
    }
}