{
    "results": {
        "usr/lib64/libatf-c++_so_1_0_0": {
            "find-libc-functions": [
                "GI___obstack_vprintf", 
                "GI___vasprintf", 
                "GI___vdprintf", 
                "GI___vfprintf", 
                "GI___vfwprintf", 
                "GI___vsnprintf", 
                "GI___vsprintf", 
                "GI___vswprintf", 
                "GI___vsyslog", 
                "__longjmp", 
                "_fprintf", 
                "_printf", 
                "_snprintf", 
                "_sprintf", 
                "_vfprintf", 
                "_vprintf", 
                "_vsnprintf", 
                "_vsprintf", 
                "asprintf", 
                "confstr", 
                "dprintf", 
                "explicit_bzero", 
                "fdelt", 
                "fgets", 
                "fgets_unlocked", 
                "fgetws", 
                "fgetws_unlocked", 
                "fprintf", 
                "fread", 
                "fread_unlocked", 
                "fwprintf", 
                "getcwd", 
                "getdomainname", 
                "getgroups", 
                "gethostname", 
                "getlogin_r", 
                "gets", 
                "getwd", 
                "longjmp", 
                "mbsnrtowcs", 
                "mbsrtowcs", 
                "mbstowcs", 
                "memcpy", 
                "memmove", 
                "mempcpy", 
                "memset", 
                "obstack_printf", 
                "obstack_vprintf", 
                "poll", 
                "ppoll", 
                "pread64", 
                "pread", 
                "printf", 
                "ptsname_r", 
                "read", 
                "readlink", 
                "readlinkat", 
                "realpath", 
                "recv", 
                "recvfrom", 
                "snprintf", 
                "sprintf", 
                "stpcpy", 
                "stpncpy", 
                "strcat", 
                "strcpy", 
                "strncat", 
                "strncpy", 
                "swprintf", 
                "syslog", 
                "ttyname_r", 
                "vasprintf", 
                "vdprintf", 
                "vfprintf", 
                "vfwprintf", 
                "vprintf", 
                "vsnprintf", 
                "vsprintf", 
                "vswprintf", 
                "vsyslog", 
                "vwprintf", 
                "wcpcpy", 
                "wcpncpy", 
                "wcrtomb", 
                "wcscat", 
                "wcscpy", 
                "wcsncat", 
                "wcsncpy", 
                "wcsnrtombs", 
                "wcsrtombs", 
                "wcstombs", 
                "wctomb", 
                "wmemcpy", 
                "wmemmove", 
                "wmempcpy", 
                "wmemset", 
                "wprintf"
            ], 
            "filename": "usr/lib64/libatf-c++.so.1.0.0", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "report-functions": [
                "__atf_config_reinit", 
                "_ZNSt6localeD1Ev", 
                "regfree", 
                "atf_fs_stat_is_other_writable", 
                "atf_check_result_exited", 
                "_ITM_deregisterTMCloneTable", 
                "_ZNSt13runtime_errorD1Ev", 
                "atf_tc_check_errno", 
                "strlen", 
                "atf_fs_stat_get_type", 
                "__errno_location", 
                "__cxa_throw", 
                "__cxa_rethrow", 
                "atf_libc_error_code", 
                "atf_check_result_signaled", 
                "atf_fs_rmdir", 
                "_ZNSt8ios_baseD2Ev", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm", 
                "_ZSt24__throw_out_of_range_fmtPKcz", 
                "atf_tc_expect_pass", 
                "atf_fs_stat_is_owner_executable", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm", 
                "atf_libc_error_msg", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc", 
                "_Unwind_Resume", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm", 
                "atf_utils_copy_file", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm", 
                "_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc", 
                "atf_fs_path_init_fmt", 
                "atf_process_stream_init_inherit", 
                "__cxa_call_unexpected", 
                "_ZdlPvm", 
                "atf_process_status_termsig", 
                "atf_process_child_stdout", 
                "closedir", 
                "_ZdaPv", 
                "atf_fs_stat_is_owner_readable", 
                "atf_text_to_bool", 
                "atf_fs_stat_fini", 
                "unlink", 
                "_ZNSt13runtime_errorC2EPKc", 
                "atf_process_status_fini", 
                "atf_check_build_cpp", 
                "_ZSt19__throw_logic_errorPKc", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc", 
                "atf_build_cxx_o", 
                "atf_tc_expect_timeout", 
                "_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base", 
                "atf_fs_path_cstring", 
                "atf_check_result_stdout", 
                "atf_utils_fork", 
                "atf_process_status_signaled", 
                "strrchr", 
                "regexec", 
                "_ZNSi10_M_extractIlEERSiRT_", 
                "_Znam", 
                "atf_tc_pass", 
                "atf_check_build_cxx_o", 
                "atf_utils_free_charpp", 
                "strerror", 
                "atf_build_cpp", 
                "memcpy", 
                "atf_process_status_exited", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofEPKcmm", 
                "atf_check_result_exitcode", 
                "atf_process_stream_init_redirect_path", 
                "atf_fs_stat_is_group_writable", 
                "_ZNSt9bad_allocD1Ev", 
                "__cxa_begin_catch", 
                "atf_is_error", 
                "__cxa_end_catch", 
                "atf_fs_exists", 
                "atf_fs_stat_get_device", 
                "_ZSt20__throw_length_errorPKc", 
                "atf_utils_compare_file", 
                "_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E", 
                "atf_process_stream_fini", 
                "_ZNSt8ios_base4InitD1Ev", 
                "atf_fs_stat_is_group_executable", 
                "memcmp", 
                "__cxa_throw_bad_array_new_length", 
                "atf_env_set", 
                "atf_fs_stat_is_group_readable", 
                "atf_process_status_coredump", 
                "atf_fs_path_leaf_name", 
                "atf_error_free", 
                "atf_check_exec_array", 
                "atf_check_result_termsig", 
                "atf_tc_run", 
                "_ZNSt7__cxx1119basic_istringstreamIcSt11char_traitsIcESaIcEED1Ev", 
                "_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_", 
                "atf_tc_get_config_var", 
                "readdir", 
                "_ZNSt8ios_baseC2Ev", 
                "__stack_chk_fail", 
                "atf_error_format", 
                "atf_tc_fail_nonfatal", 
                "atf_tc_require_errno", 
                "atf_fs_path_branch_path", 
                "atf_process_stream_init_redirect_fd", 
                "__cxa_allocate_exception", 
                "atf_fs_stat_get_size", 
                "_ZNSt13runtime_errorD2Ev", 
                "_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l", 
                "atf_fs_path_is_absolute", 
                "atf_build_c_o", 
                "atf_equal_fs_path_fs_path", 
                "atf_tc_skip", 
                "strcmp", 
                "_ZNSt13runtime_errorC1EPKc", 
                "atf_tc_init", 
                "atf_fs_path_append_fmt", 
                "atf_fs_stat_get_inode", 
                "atf_utils_wait", 
                "atf_tc_has_md_var", 
                "_ZNSt8ios_base4InitC1Ev", 
                "__cxa_pure_virtual", 
                "atf_fs_path_to_absolute", 
                "_ZNSt6localeC1Ev", 
                "atf_dynstr_fini", 
                "_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", 
                "__cxa_atexit", 
                "regcomp", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEPKcmm", 
                "__cxa_free_exception", 
                "_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base", 
                "atf_process_stream_init_connect", 
                "atf_tc_cleanup", 
                "atf_tc_expect_exit", 
                "atf_config_get", 
                "_Znwm", 
                "atf_check_result_fini", 
                "atf_env_unset", 
                "atf_fs_path_is_root", 
                "atf_utils_redirect", 
                "atf_tc_expect_death", 
                "atf_fs_eaccess", 
                "atf_fs_stat_get_mode", 
                "kill", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm", 
                "atf_dynstr_cstring", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm", 
                "atf_fs_stat_copy", 
                "_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate", 
                "getopt", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcmm", 
                "atf_process_child_wait", 
                "atf_fs_path_copy", 
                "atf_fs_stat_is_other_executable", 
                "atf_tc_get_md_var", 
                "atf_fs_path_fini", 
                "_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE7_M_syncEPcmm", 
                "atf_tc_fini", 
                "atf_env_has", 
                "atf_utils_file_exists", 
                "__gmon_start__", 
                "_ZNSo5flushEv", 
                "atf_fs_stat_is_other_readable", 
                "atf_process_status_exitstatus", 
                "atf_tc_has_config_var", 
                "_ZNKSt13runtime_error4whatEv", 
                "atf_fs_stat_init", 
                "atf_check_build_c_o", 
                "_ITM_registerTMCloneTable", 
                "__gxx_personality_v0", 
                "atf_tc_get_config_var_wd", 
                "atf_tc_require_prog", 
                "atf_utils_grep_file", 
                "atf_tc_set_md_var", 
                "atf_process_child_pid", 
                "atf_env_get", 
                "atf_tc_expect_signal", 
                "tolower", 
                "atf_utils_create_file", 
                "atf_fs_stat_is_owner_writable", 
                "atf_tc_get_md_vars", 
                "_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base", 
                "memmove", 
                "opendir", 
                "_ZdlPv", 
                "_ZSt17__throw_bad_allocv", 
                "_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", 
                "atf_process_child_stderr", 
                "__vsnprintf_chk", 
                "atf_utils_grep_string", 
                "atf_error_is", 
                "atf_tc_expect_fail", 
                "atf_check_result_stderr", 
                "atf_tc_fail", 
                "atf_process_stream_init_capture", 
                "_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_", 
                "strcpy"
            ], 
            "rpm": "libatf-c++-0.20-9.fc27.x86_64.rpm"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " Development/Tools", 
            "Name": " libatf-c++", 
            "License": " BSD", 
            "URL": " http://code.google.com/p/kyua/wiki/ATF", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildhw-08.phx2.fedoraproject.org", 
            "Description": "\nThe Automated Testing Framework (ATF) is a collection of libraries to\nimplement test programs in a variety of languages.  At the moment, ATF\noffers C, C++ and POSIX shell bindings with which to implement tests.\nThese bindings all offer a similar set of functionality and any test\nprogram written with them exposes a consistent user interface.\n\nATF-based test programs rely on a separate runtime engine to execute them.\nThe runtime engine is in charge of isolating the test programs from the\nrest of the system to ensure that their results are deterministic and that\nthey cannot affect the running system.  The runtime engine is also\nresponsible for gathering the results of all tests and composing reports.\nThe current runtime of choice is Kyua.\n\nThis package provides the run-time libraries to run tests that use the\nATF C++ bindings.\n", 
            "Build Date": " Wed 02 Aug 2017 02:07:25 PM EDT", 
            "Source RPM": " atf-0.20-9.fc27.src.rpm", 
            "Version": " 0.20", 
            "Architecture": " x86_64", 
            "Signature": " RSA/SHA256, Mon 07 Aug 2017 01:53:42 AM EDT, Key ID f55e7430f5282ee4", 
            "Release": " 9.fc27", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " Automated Testing Framework - C++ bindings", 
            "Size": " 126712"
        }
    }
}