{
    "results": {
        "usr/bin/vscclient": {
            "report-functions": [
                "__assert_fail", 
                "vreader_list_get_next", 
                "_ITM_registerTMCloneTable", 
                "g_byte_array_new", 
                "vevent_delete", 
                "vreader_list_delete", 
                "g_io_channel_read_chars", 
                "vreader_set_id", 
                "strlen", 
                "vcard_emul_force_card_insert", 
                "g_byte_array_remove_range", 
                "g_io_channel_set_encoding", 
                "g_io_add_watch", 
                "g_io_channel_unref", 
                "__cxa_finalize", 
                "g_idle_add", 
                "vevent_wait_next_vevent", 
                "vreader_reference", 
                "g_byte_array_append", 
                "__fprintf_chk", 
                "g_byte_array_free", 
                "__printf_chk", 
                "g_log", 
                "putchar", 
                "g_main_loop_unref", 
                "close", 
                "vcard_emul_options", 
                "__gmon_start__", 
                "freeaddrinfo", 
                "strncmp", 
                "vreader_get_reader_list", 
                "vreader_get_name", 
                "g_malloc", 
                "vcard_emul_usage", 
                "exit", 
                "getopt", 
                "socket", 
                "vreader_free", 
                "g_io_channel_set_buffered", 
                "vreader_list_get_reader", 
                "g_strdup", 
                "strtol", 
                "g_io_channel_write_chars", 
                "g_mutex_unlock", 
                "g_assertion_message_expr", 
                "vreader_xfr_bytes", 
                "fflush", 
                "vreader_power_on", 
                "g_source_remove", 
                "g_io_channel_unix_new", 
                "vcard_emul_init", 
                "__libc_start_main", 
                "g_return_if_fail_warning", 
                "connect", 
                "__stack_chk_fail", 
                "vreader_get_id", 
                "g_main_loop_run", 
                "g_io_channel_read_line", 
                "fwrite", 
                "g_warn_message", 
                "vreader_card_is_present", 
                "vreader_get_reader_by_id", 
                "vreader_list_get_first", 
                "puts", 
                "stpcpy", 
                "vcard_emul_force_card_remove", 
                "_ITM_deregisterTMCloneTable", 
                "getaddrinfo", 
                "g_cond_wait", 
                "g_cond_signal", 
                "g_mutex_lock"
            ], 
            "rpm": "libcacard-2.5.3-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "yes", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/bin/vscclient"
        }, 
        "usr/lib/libcacard_so_0_0_0": {
            "report-functions": [
                "SECMOD_GetDefaultModuleListLock", 
                "strcasecmp", 
                "CERT_NewTempCertificate", 
                "SECMOD_WaitForAnyTokenEvent", 
                "PK11_GetSlotName", 
                "SECITEM_FreeItem", 
                "g_realloc_n", 
                "PORT_SetError", 
                "__memcpy_chk", 
                "__ctype_b_loc", 
                "PK11_Logout", 
                "strpbrk", 
                "strlen", 
                "PORT_Strdup", 
                "g_mutex_init", 
                "_ITM_registerTMCloneTable", 
                "__fprintf_chk", 
                "g_mutex_unlock", 
                "g_strndup", 
                "CERT_GetDefaultCertDB", 
                "SECMOD_GetDefaultModuleList", 
                "__stack_chk_fail", 
                "PK11_Authenticate", 
                "g_strdup", 
                "PK11_ReferenceSlot", 
                "SECMOD_GetReadLock", 
                "PK11_GetNextGenericObject", 
                "memcmp", 
                "g_mutex_lock", 
                "SECMOD_GetInternalModule", 
                "PK11_IsHW", 
                "CERT_DupCertificate", 
                "g_warn_message", 
                "g_log", 
                "g_cond_signal", 
                "_ITM_deregisterTMCloneTable", 
                "__gmon_start__", 
                "PK11_FindGenericObjects", 
                "PK11_FindSlotByName", 
                "PK11_SetPasswordFunc", 
                "SECKEY_DestroyPrivateKey", 
                "NSS_Init", 
                "g_mutex_clear", 
                "g_free", 
                "__cxa_finalize", 
                "PK11_IsRemovable", 
                "strcmp", 
                "g_memdup", 
                "PK11_Sign", 
                "PK11_GetSlotSeries", 
                "PK11_IsPresent", 
                "PK11_IsLoggedIn", 
                "PK11_DoesMechanism", 
                "PK11_FreeSlot", 
                "g_malloc0", 
                "PK11_PubDecryptRaw", 
                "g_cond_wait", 
                "SECMOD_ReleaseReadLock", 
                "PK11_FindCertFromNickname", 
                "g_malloc", 
                "PK11_FindPrivateKeyFromCert", 
                "CERT_DestroyCertificate", 
                "PR_CreateThread", 
                "g_malloc_n", 
                "PK11_ReadRawAttribute", 
                "g_realloc", 
                "PK11_SignatureLen", 
                "fwrite", 
                "PORT_GetError"
            ], 
            "rpm": "libcacard-2.5.3-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libcacard.so.0.0.0"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " Development/Libraries", 
            "Name": " libcacard", 
            "License": " LGPLv2+", 
            "URL": " http://www.spice-space.org/page/Libcacard", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildvm-15.phx2.fedoraproject.org", 
            "Source RPM": " libcacard-2.5.3-3.fc27.src.rpm", 
            "Description": "\nThis library provides emulation of smart cards to a virtual card\nreader running in a guest virtual machine.\n\nIt implements DoD CAC standard with separate pki containers\n(compatible coolkey), using certificates read from NSS.\n", 
            "Build Date": " Thu 03 Aug 2017 01:33:29 PM EDT", 
            "Epoch": " 3", 
            "Version": " 2.5.3", 
            "Architecture": " i686", 
            "Signature": " RSA/SHA256, Fri 04 Aug 2017 06:09:42 AM EDT, Key ID f55e7430f5282ee4", 
            "Release": " 3.fc27", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " CAC (Common Access Card) library", 
            "Size": " 94279"
        }
    }
}