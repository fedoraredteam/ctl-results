{
    "results": {
        "usr/lib/libmatemixer/libmatemixer-null_so": {
            "report-functions": [
                "g_type_class_adjust_private_offset", 
                "g_type_check_class_cast", 
                "_ITM_deregisterTMCloneTable", 
                "g_type_class_peek_parent", 
                "mate_mixer_backend_get_type", 
                "_ITM_registerTMCloneTable", 
                "__stack_chk_fail", 
                "__gmon_start__", 
                "__cxa_finalize"
            ], 
            "rpm": "libmatemixer-1.18.0-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libmatemixer/libmatemixer-null.so"
        }, 
        "usr/lib/libmatemixer_so_0_0_0": {
            "report-functions": [
                "g_list_sort", 
                "g_hash_table_remove_all", 
                "g_signal_new", 
                "g_type_check_class_cast", 
                "__gmon_start__", 
                "g_str_equal", 
                "g_hash_table_remove", 
                "g_module_open", 
                "g_return_if_fail_warning", 
                "g_list_prepend", 
                "g_signal_handlers_disconnect_matched", 
                "g_value_dup_string", 
                "g_dir_close", 
                "g_value_set_flags", 
                "g_slice_free1", 
                "g_build_filename", 
                "g_value_set_boolean", 
                "g_type_module_use", 
                "g_intern_static_string", 
                "strcmp", 
                "g_hash_table_unref", 
                "g_strdup", 
                "g_hash_table_lookup", 
                "g_warn_message", 
                "g_module_error", 
                "g_type_module_get_type", 
                "g_object_remove_weak_pointer", 
                "g_value_get_flags", 
                "g_list_delete_link", 
                "g_enum_register_static", 
                "g_error_free", 
                "g_value_get_string", 
                "g_type_module_set_name", 
                "g_value_get_boolean", 
                "g_value_set_string", 
                "g_flags_register_static", 
                "g_value_set_enum", 
                "g_once_init_leave", 
                "g_str_hash", 
                "g_slice_alloc0", 
                "g_once_init_enter", 
                "g_object_class_install_property", 
                "g_type_check_instance_is_a", 
                "g_object_add_weak_pointer", 
                "__cxa_finalize", 
                "g_param_spec_object", 
                "g_free", 
                "g_type_class_adjust_private_offset", 
                "g_param_spec_enum", 
                "g_module_supported", 
                "g_object_new", 
                "g_dir_read_name", 
                "g_param_spec_string", 
                "g_module_close", 
                "g_param_spec_uint", 
                "g_signal_emit", 
                "g_boxed_type_register_static", 
                "g_str_has_suffix", 
                "g_type_check_instance_cast", 
                "g_type_instance_get_private", 
                "g_value_set_object", 
                "g_object_notify_by_pspec", 
                "g_param_spec_float", 
                "g_dir_open", 
                "__stack_chk_fail", 
                "g_type_register_static_simple", 
                "g_type_name", 
                "g_cclosure_marshal_VOID__DOUBLE", 
                "g_list_free", 
                "g_type_class_peek_parent", 
                "g_log", 
                "g_param_spec_boolean", 
                "g_signal_connect_data", 
                "g_param_spec_flags", 
                "g_value_get_enum", 
                "_ITM_deregisterTMCloneTable", 
                "g_hash_table_new_full", 
                "g_cclosure_marshal_VOID__STRING", 
                "g_module_symbol", 
                "g_value_get_object", 
                "g_object_unref", 
                "g_type_class_add_private", 
                "g_hash_table_insert", 
                "_ITM_registerTMCloneTable", 
                "g_object_ref", 
                "g_strcmp0", 
                "g_value_dup_object"
            ], 
            "rpm": "libmatemixer-1.18.0-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libmatemixer.so.0.0.0"
        }, 
        "usr/lib/libmatemixer/libmatemixer-alsa_so": {
            "report-functions": [
                "snd_mixer_load", 
                "g_object_thaw_notify", 
                "g_error_free", 
                "snd_mixer_selem_get_name", 
                "g_object_unref", 
                "snd_mixer_selem_get_enum_item", 
                "snd_mixer_selem_has_capture_switch", 
                "_ITM_deregisterTMCloneTable", 
                "snd_mixer_elem_set_callback_private", 
                "snd_mixer_selem_get_playback_dB_range", 
                "g_log", 
                "snd_mixer_selem_get_capture_switch", 
                "g_type_register_static_simple", 
                "g_type_check_class_cast", 
                "g_list_prepend", 
                "_mate_mixer_stream_control_set_balance", 
                "g_source_destroy", 
                "g_object_ref", 
                "snd_mixer_selem_set_playback_switch_all", 
                "mate_mixer_stream_toggle_get_type", 
                "snd_mixer_selem_has_capture_volume_joined", 
                "g_type_check_instance_is_a", 
                "snd_mixer_selem_is_enum_capture", 
                "_ITM_registerTMCloneTable", 
                "mate_mixer_stream_control_get_name", 
                "g_signal_handlers_disconnect_matched", 
                "g_list_free_full", 
                "g_hash_table_remove", 
                "__stack_chk_fail", 
                "g_cond_signal", 
                "mate_mixer_stream_control_get_type", 
                "g_type_check_instance_cast", 
                "_mate_mixer_backend_set_state", 
                "snd_mixer_open", 
                "snd_mixer_selem_has_playback_switch", 
                "snd_ctl_card_info_sizeof", 
                "snd_mixer_selem_has_playback_volume", 
                "g_type_module_register_type", 
                "g_signal_connect_data", 
                "g_once_init_leave", 
                "snd_mixer_selem_get_capture_dB_range", 
                "snd_ctl_card_info_get_name", 
                "snd_mixer_selem_set_capture_switch_all", 
                "mate_mixer_device_get_type", 
                "g_type_class_peek_parent", 
                "snd_mixer_selem_set_capture_volume_all", 
                "g_object_notify", 
                "snd_mixer_selem_ask_playback_vol_dB", 
                "snd_mixer_handle_events", 
                "g_list_append", 
                "snd_mixer_set_callback", 
                "_mate_mixer_backend_set_default_output_stream", 
                "mate_mixer_switch_get_name", 
                "g_mutex_unlock", 
                "snd_ctl_open", 
                "g_type_class_add_private", 
                "snd_mixer_selem_set_enum_item", 
                "g_str_hash", 
                "snd_mixer_selem_has_playback_channel", 
                "g_type_instance_get_private", 
                "g_main_context_unref", 
                "_mate_mixer_stream_set_default_control", 
                "g_signal_emit_by_name", 
                "snd_mixer_selem_get_capture_volume", 
                "snd_mixer_selem_is_active", 
                "g_strdup", 
                "mate_mixer_device_get_label", 
                "g_mutex_lock", 
                "snd_mixer_selem_is_playback_mono", 
                "g_warn_message", 
                "strstr", 
                "g_thread_unref", 
                "g_type_interface_peek", 
                "snd_mixer_set_callback_private", 
                "snd_mixer_selem_has_playback_switch_joined", 
                "snd_mixer_selem_get_enum_item_name", 
                "g_return_if_fail_warning", 
                "g_ascii_strdown", 
                "g_list_last", 
                "snd_mixer_selem_ask_playback_dB_vol", 
                "snd_mixer_selem_set_playback_volume_all", 
                "g_snprintf", 
                "g_list_delete_link", 
                "snd_mixer_selem_get_playback_switch", 
                "g_strdup_printf", 
                "g_signal_emit", 
                "__gmon_start__", 
                "snd_mixer_elem_next", 
                "mate_mixer_stream_switch_get_type", 
                "g_list_insert_sorted_with_data", 
                "g_object_set_data_full", 
                "mate_mixer_stream_get_default_control", 
                "g_object_set_data", 
                "g_thread_try_new", 
                "snd_mixer_attach", 
                "snd_mixer_selem_get_enum_items", 
                "snd_ctl_close", 
                "snd_ctl_card_info", 
                "snd_mixer_selem_has_common_switch", 
                "g_hash_table_remove_all", 
                "g_list_find", 
                "snd_mixer_elem_get_callback_private", 
                "g_hash_table_unref", 
                "_mate_mixer_stream_control_set_flags", 
                "g_signal_new", 
                "mate_mixer_backend_get_type", 
                "snd_strerror", 
                "mate_mixer_stream_toggle_get_state_option", 
                "mate_mixer_switch_get_type", 
                "mate_mixer_backend_get_state", 
                "snd_mixer_close", 
                "g_object_freeze_notify", 
                "g_mutex_clear", 
                "g_type_class_adjust_private_offset", 
                "_mate_mixer_backend_set_default_input_stream", 
                "g_hash_table_add", 
                "g_cond_wait", 
                "_mate_mixer_stream_control_set_mute", 
                "snd_mixer_selem_has_capture_volume", 
                "g_list_reverse", 
                "g_mutex_init", 
                "snd_mixer_selem_get_index", 
                "snd_mixer_selem_set_playback_volume", 
                "snd_mixer_elem_set_callback", 
                "snd_mixer_selem_ask_capture_vol_dB", 
                "g_object_new", 
                "g_intern_static_string", 
                "_mate_mixer_create_channel_mask", 
                "snd_mixer_selem_has_playback_volume_joined", 
                "snd_mixer_selem_ask_capture_dB_vol", 
                "snd_mixer_selem_is_capture_mono", 
                "snd_mixer_selem_is_enumerated", 
                "g_str_equal", 
                "g_cond_init", 
                "g_type_add_interface_static", 
                "snd_mixer_selem_get_playback_volume", 
                "snd_ctl_card_info_get_id", 
                "snd_mixer_first_elem", 
                "g_source_attach", 
                "dcgettext", 
                "g_main_context_get_thread_default", 
                "strcmp", 
                "snd_mixer_selem_has_common_volume", 
                "g_hash_table_contains", 
                "g_type_interface_add_prerequisite", 
                "__cxa_finalize", 
                "g_list_find_custom", 
                "snd_mixer_selem_get_capture_volume_range", 
                "g_main_context_ref_thread_default", 
                "g_cclosure_marshal_VOID__VOID", 
                "snd_mixer_selem_has_capture_switch_joined", 
                "snd_mixer_selem_get_playback_volume_range", 
                "g_timeout_source_new_seconds", 
                "snd_card_next", 
                "snd_mixer_selem_has_capture_channel", 
                "mate_mixer_backend_get_default_output_stream", 
                "_mate_mixer_switch_set_active_option", 
                "mate_mixer_switch_option_get_type", 
                "g_once_init_enter", 
                "mate_mixer_backend_get_default_input_stream", 
                "g_hash_table_new_full", 
                "mate_mixer_stream_list_controls", 
                "g_source_set_callback", 
                "_mate_mixer_stream_control_set_fade", 
                "g_main_context_invoke", 
                "g_free", 
                "snd_mixer_selem_set_capture_volume", 
                "snd_mixer_wait", 
                "mate_mixer_device_get_name", 
                "g_object_get_data", 
                "mate_mixer_stream_get_type", 
                "mate_mixer_stream_get_name", 
                "snd_mixer_selem_is_enum_playback", 
                "g_cond_clear"
            ], 
            "rpm": "libmatemixer-1.18.0-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libmatemixer/libmatemixer-alsa.so"
        }, 
        "usr/lib/libmatemixer/libmatemixer-pulse_so": {
            "report-functions": [
                "pa_context_kill_source_output", 
                "pa_cvolume_scale", 
                "g_free", 
                "pa_glib_mainloop_get_api", 
                "_ITM_registerTMCloneTable", 
                "mate_mixer_stream_switch_get_type", 
                "g_direct_hash", 
                "g_source_unref", 
                "_mate_mixer_app_info_set_icon", 
                "pa_context_set_source_output_volume", 
                "pa_context_set_sink_volume_by_index", 
                "g_param_spec_boolean", 
                "pa_context_kill_sink_input", 
                "pa_sw_volume_to_dB", 
                "pa_context_set_default_source", 
                "g_once_init_leave", 
                "g_list_foreach", 
                "pa_context_ref", 
                "pa_context_get_sink_info_by_name", 
                "g_param_spec_string", 
                "g_object_ref", 
                "pa_proplist_new", 
                "g_type_class_adjust_private_offset", 
                "g_hash_table_iter_next", 
                "pa_glib_mainloop_new", 
                "g_strdup_printf", 
                "mate_mixer_backend_get_default_output_stream", 
                "g_param_spec_uint", 
                "g_list_insert_sorted", 
                "g_type_check_class_cast", 
                "g_hash_table_new_full", 
                "pa_context_get_state", 
                "pa_stream_disconnect", 
                "g_value_set_string", 
                "pa_stream_set_read_callback", 
                "g_cclosure_marshal_VOID__DOUBLE", 
                "pa_operation_cancel", 
                "g_source_attach", 
                "g_strcmp0", 
                "g_type_name", 
                "mate_mixer_backend_get_state", 
                "g_slist_free", 
                "pa_context_errno", 
                "g_value_set_boolean", 
                "_mate_mixer_app_info_copy", 
                "_mate_mixer_stream_control_set_mute", 
                "g_timeout_source_new", 
                "_mate_mixer_app_info_set_id", 
                "pa_cvolume_get_balance", 
                "g_enum_register_static", 
                "g_source_set_callback", 
                "pa_cvolume_set_fade", 
                "g_value_get_uint", 
                "pa_context_set_sink_input_mute", 
                "pa_context_get_server_info", 
                "pa_stream_set_monitor_stream", 
                "mate_mixer_device_switch_get_device", 
                "pa_strerror", 
                "g_object_unref", 
                "pa_stream_connect_record", 
                "g_slist_foreach", 
                "pa_ext_stream_restore_write", 
                "pa_stream_new_with_proplist", 
                "g_object_set_data_full", 
                "mate_mixer_stream_control_get_mute", 
                "mate_mixer_stream_switch_get_stream", 
                "g_param_spec_enum", 
                "g_warn_message", 
                "g_list_concat", 
                "pa_context_set_subscribe_callback", 
                "__cxa_finalize", 
                "pa_channel_map_has_position", 
                "_mate_mixer_backend_set_default_input_stream", 
                "pa_context_connect", 
                "g_strdup", 
                "mate_mixer_device_get_name", 
                "g_list_prepend", 
                "pa_context_get_sink_input_info", 
                "g_main_context_get_thread_default", 
                "pa_glib_mainloop_free", 
                "g_signal_new", 
                "__gmon_start__", 
                "g_object_notify", 
                "mate_mixer_stream_get_name", 
                "pa_context_set_source_output_mute", 
                "g_hash_table_unref", 
                "strstr", 
                "mate_mixer_stream_get_type", 
                "g_type_register_static_simple", 
                "mate_mixer_switch_get_type", 
                "mate_mixer_stream_control_get_stream", 
                "mate_mixer_app_info_get_type", 
                "pa_channel_map_can_balance", 
                "pa_context_set_sink_port_by_index", 
                "pa_channel_map_valid", 
                "mate_mixer_app_info_get_id", 
                "pa_ext_stream_restore_subscribe", 
                "g_str_hash", 
                "mate_mixer_device_switch_get_type", 
                "mate_mixer_app_info_get_icon", 
                "_mate_mixer_app_info_set_version", 
                "g_object_notify_by_pspec", 
                "pa_context_get_card_info_list", 
                "g_type_check_instance_is_a", 
                "strcmp", 
                "g_value_set_boxed", 
                "pa_context_get_card_info_by_index", 
                "_mate_mixer_stream_control_set_fade", 
                "g_strfreev", 
                "g_str_equal", 
                "g_once_init_enter", 
                "pa_stream_drop", 
                "dcgettext", 
                "_mate_mixer_app_info_set_name", 
                "pa_context_set_sink_mute_by_index", 
                "_mate_mixer_stream_set_default_control", 
                "g_return_if_fail_warning", 
                "pa_context_get_sink_input_info_list", 
                "g_hash_table_lookup", 
                "g_list_free_full", 
                "g_value_dup_boxed", 
                "g_list_find_custom", 
                "pa_cvolume_init", 
                "pa_sw_volume_from_dB", 
                "g_hash_table_insert", 
                "g_object_thaw_notify", 
                "pa_cvolume_set_balance", 
                "pa_stream_peek", 
                "pa_context_get_source_output_info_list", 
                "mate_mixer_stream_control_get_type", 
                "mate_mixer_stream_get_device", 
                "g_log", 
                "g_cclosure_marshal_VOID__VOID", 
                "pa_channel_map_init", 
                "mate_mixer_stored_control_get_type", 
                "g_get_application_name", 
                "_ITM_deregisterTMCloneTable", 
                "pa_ext_stream_restore_set_subscribe_cb", 
                "g_hash_table_find", 
                "g_cclosure_marshal_VOID__UINT", 
                "pa_context_set_default_sink", 
                "g_type_class_add_private", 
                "pa_cvolume_valid", 
                "g_hash_table_remove_all", 
                "g_value_set_uint", 
                "pa_context_get_source_output_info", 
                "g_object_class_install_properties", 
                "pa_context_suspend_sink_by_index", 
                "g_value_set_enum", 
                "pa_context_set_source_port_by_index", 
                "g_value_get_string", 
                "pa_channel_map_can_fade", 
                "g_str_has_prefix", 
                "_mate_mixer_app_info_free", 
                "mate_mixer_app_info_get_version", 
                "g_value_set_object", 
                "g_object_set_data", 
                "pa_context_get_sink_info_list", 
                "_mate_mixer_stream_control_set_stream", 
                "g_object_new", 
                "g_list_free", 
                "pa_context_get_sink_info_by_index", 
                "_mate_mixer_app_info_new", 
                "pa_stream_unref", 
                "g_type_module_register_type", 
                "g_type_check_instance_cast", 
                "g_param_spec_boxed", 
                "strchr", 
                "pa_context_unref", 
                "g_malloc", 
                "pa_context_get_source_info_list", 
                "g_signal_emit_by_name", 
                "mate_mixer_backend_get_default_input_stream", 
                "g_object_get_data", 
                "g_object_steal_data", 
                "_mate_mixer_switch_set_active_option", 
                "g_source_remove", 
                "pa_proplist_copy", 
                "g_slist_prepend", 
                "pa_ext_stream_restore_read", 
                "g_type_instance_get_private", 
                "pa_proplist_gets", 
                "mate_mixer_switch_option_get_icon", 
                "g_object_freeze_notify", 
                "g_hash_table_iter_remove", 
                "pa_context_suspend_source_by_index", 
                "mate_mixer_switch_option_get_name", 
                "pa_ext_stream_restore_delete", 
                "_mate_mixer_stream_control_set_balance", 
                "pa_context_new_with_proplist", 
                "pa_proplist_sets", 
                "pa_context_move_source_output_by_index", 
                "g_value_dup_object", 
                "g_signal_connect_data", 
                "mate_mixer_stream_control_get_name", 
                "mate_mixer_app_info_get_name", 
                "g_hash_table_iter_init", 
                "g_param_spec_object", 
                "pa_context_set_state_callback", 
                "g_intern_static_string", 
                "getpid", 
                "g_type_class_peek_parent", 
                "mate_mixer_backend_get_type", 
                "pa_cvolume_equal", 
                "_mate_mixer_stream_control_set_flags", 
                "pa_proplist_free", 
                "pa_context_get_source_info_by_name", 
                "mate_mixer_stream_control_get_flags", 
                "_mate_mixer_backend_set_state", 
                "g_cclosure_marshal_VOID__POINTER", 
                "g_signal_handlers_disconnect_matched", 
                "pa_context_get_card_info_by_name", 
                "g_hash_table_get_values", 
                "pa_context_subscribe", 
                "g_signal_emit", 
                "__stack_chk_fail", 
                "pa_context_set_card_profile_by_name", 
                "pa_operation_unref", 
                "pa_context_get_source_info_by_index", 
                "pa_cvolume_max", 
                "pa_context_set_sink_input_volume", 
                "mate_mixer_switch_option_get_type", 
                "pa_context_set_source_mute_by_index", 
                "_mate_mixer_backend_set_default_output_stream", 
                "pa_context_move_sink_input_by_index", 
                "g_hash_table_remove", 
                "mate_mixer_device_get_type", 
                "pa_cvolume_get_fade", 
                "g_direct_equal"
            ], 
            "rpm": "libmatemixer-1.18.0-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libmatemixer/libmatemixer-pulse.so"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " Unspecified", 
            "Name": " libmatemixer", 
            "License": " GPLv2+", 
            "URL": " http://mate-desktop.org", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildvm-18.phx2.fedoraproject.org", 
            "Description": "\nlibmatemixer is a mixer library for MATE desktop.\nIt provides an abstract API allowing access to mixer functionality\navailable in the PulseAudio, ALSA and OSS sound systems.\n", 
            "Build Date": " Thu 03 Aug 2017 02:55:56 PM EDT", 
            "Source RPM": " libmatemixer-1.18.0-3.fc27.src.rpm", 
            "Version": " 1.18.0", 
            "Architecture": " i686", 
            "Signature": " RSA/SHA256, Fri 04 Aug 2017 10:50:06 AM EDT, Key ID f55e7430f5282ee4", 
            "Release": " 3.fc27", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " Mixer library for MATE desktop", 
            "Size": " 657777"
        }
    }
}