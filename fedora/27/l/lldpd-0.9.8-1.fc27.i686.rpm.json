{
    "results": {
        "usr/lib/liblldpctl_so_4_8_0": {
            "report-functions": [
                "__asprintf_chk", 
                "isatty", 
                "__vasprintf_chk", 
                "memmove", 
                "socket", 
                "__errno_location", 
                "tzset", 
                "fputc", 
                "fcntl", 
                "strtoll", 
                "strlen", 
                "_ITM_registerTMCloneTable", 
                "calloc", 
                "__vfprintf_chk", 
                "time", 
                "strcmp", 
                "write", 
                "__cxa_finalize", 
                "connect", 
                "fputs", 
                "_ITM_deregisterTMCloneTable", 
                "strerror", 
                "listen", 
                "strcasecmp", 
                "unlink", 
                "__gmon_start__", 
                "inet_ntop", 
                "close", 
                "__fprintf_chk", 
                "strdup", 
                "__snprintf_chk", 
                "bind", 
                "fflush", 
                "strnlen", 
                "realloc", 
                "malloc", 
                "free", 
                "exit", 
                "__vsyslog_chk", 
                "fwrite", 
                "read", 
                "__stack_chk_fail", 
                "openlog"
            ], 
            "rpm": "lldpd-0.9.8-1.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/liblldpctl.so.4.8.0"
        }, 
        "usr/sbin/lldpd": {
            "report-functions": [
                "__vsyslog_chk", 
                "snmp_get_do_debugging", 
                "recvmsg", 
                "unregister_sysORTable", 
                "__cxa_atexit", 
                "fcntl", 
                "event_get_version", 
                "event_add", 
                "netsnmp_ds_set_boolean", 
                "fork", 
                "send", 
                "freeaddrinfo", 
                "calloc", 
                "register_sysORTable", 
                "__libc_start_main", 
                "netsnmp_large_fd_clr", 
                "inet_pton", 
                "strcmp", 
                "netsnmp_large_fd_set_cleanup", 
                "unlink", 
                "open", 
                "tzset", 
                "unsetenv", 
                "snmp_free_varbind", 
                "netsnmp_ds_set_string", 
                "umask", 
                "uname", 
                "event_free", 
                "event_base_loop", 
                "bufferevent_setcb", 
                "__gmon_start__", 
                "fflush", 
                "connect", 
                "__errno_location", 
                "__fprintf_chk", 
                "strchr", 
                "event_base_loopbreak", 
                "strtok", 
                "__strncat_chk", 
                "bufferevent_enable", 
                "netsnmp_large_fd_is_set", 
                "socketpair", 
                "strlen", 
                "snmp_register_callback", 
                "mkdir", 
                "__stack_chk_fail", 
                "netsnmp_tdomain_register", 
                "memcmp", 
                "chroot", 
                "setresgid", 
                "fdopen", 
                "poll", 
                "_exit", 
                "snmp_disable_log", 
                "malloc", 
                "getgrnam", 
                "send_v2trap", 
                "accept", 
                "strncmp", 
                "sendmsg", 
                "listen", 
                "read", 
                "signal", 
                "strtol", 
                "event_active", 
                "pipe", 
                "snmp_shutdown", 
                "waitpid", 
                "snmp_select_info2", 
                "debugmsg", 
                "fputc", 
                "regcomp", 
                "_ITM_deregisterTMCloneTable", 
                "socket", 
                "__vasprintf_chk", 
                "snmp_varlist_add_variable", 
                "execl", 
                "fwrite", 
                "__assert_fail", 
                "write", 
                "setresuid", 
                "bufferevent_free", 
                "netsnmp_enable_subagent", 
                "regexec", 
                "event_get_fd", 
                "exit", 
                "header_generic", 
                "snmp_oid_compare", 
                "setgroups", 
                "snmp_enable_calllog", 
                "chdir", 
                "init_snmp", 
                "_ITM_registerTMCloneTable", 
                "ioctl", 
                "__memcpy_chk", 
                "isatty", 
                "getnameinfo", 
                "chown", 
                "event_base_dump_events", 
                "event_base_got_exit", 
                "close", 
                "getenv", 
                "__asprintf_chk", 
                "inet_ntop", 
                "event_set_log_callback", 
                "bind", 
                "debugmsgtoken", 
                "register_mib", 
                "evbuffer_drain", 
                "evbuffer_remove", 
                "kill", 
                "event_base_get_method", 
                "fputs", 
                "recv", 
                "getsockopt", 
                "bufferevent_write", 
                "run_alarms", 
                "fopen", 
                "evbuffer_get_length", 
                "sscanf", 
                "event_base_new", 
                "evbuffer_copyout", 
                "strerror", 
                "realloc", 
                "__cxa_finalize", 
                "bufferevent_socket_new", 
                "netsnmp_large_fd_setfd", 
                "bufferevent_disable", 
                "bufferevent_get_input", 
                "free", 
                "execvp", 
                "snmp_read2", 
                "sigaction", 
                "getaddrinfo", 
                "strpbrk", 
                "event_base_got_break", 
                "inet_ntoa", 
                "strnlen", 
                "netsnmp_large_fd_set_init", 
                "strtoll", 
                "recvfrom", 
                "openlog", 
                "event_base_free", 
                "setsockopt", 
                "regfree", 
                "fnmatch", 
                "__res_init", 
                "snmp_timeout", 
                "strdup", 
                "raise", 
                "netsnmp_transport_free", 
                "getpid", 
                "daemon", 
                "__vfprintf_chk", 
                "dup2", 
                "memmove", 
                "event_new", 
                "__snprintf_chk", 
                "fclose", 
                "strftime", 
                "fgets", 
                "chmod", 
                "time", 
                "getsockname", 
                "getpwnam", 
                "getopt", 
                "init_agent"
            ], 
            "rpm": "lldpd-0.9.8-1.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "yes", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/sbin/lldpd"
        }, 
        "usr/sbin/lldpcli": {
            "report-functions": [
                "__getdelim", 
                "xmlDocDump", 
                "rl_insert_text", 
                "strtoll", 
                "__cxa_finalize", 
                "sscanf", 
                "strncmp", 
                "__vfprintf_chk", 
                "strerror", 
                "strdup", 
                "lldpctl_get_default_transport", 
                "xmlNewTextWriterDoc", 
                "lldpctl_get_default_port", 
                "openlog", 
                "fwrite", 
                "lldpctl_get_local_chassis", 
                "xmlTextWriterEndElement", 
                "lldpctl_atom_set_str", 
                "lldpctl_key_get_map", 
                "lldpctl_atom_iter", 
                "rl_bind_key", 
                "malloc", 
                "lldpctl_release", 
                "lldpctl_get_interfaces", 
                "strftime", 
                "__stack_chk_fail", 
                "lldpctl_get_port", 
                "getopt", 
                "fputc", 
                "lldpctl_strerror", 
                "__vsyslog_chk", 
                "__xstat", 
                "lldpctl_new_name", 
                "lldpctl_atom_get", 
                "lldpctl_log_level", 
                "add_history", 
                "strlen", 
                "access", 
                "fclose", 
                "alphasort", 
                "strcasecmp", 
                "lldpctl_atom_set_buffer", 
                "realloc", 
                "lldpctl_atom_iter_next", 
                "__fprintf_chk", 
                "strtok", 
                "__gmon_start__", 
                "lldpctl_atom_iter_value", 
                "__xpg_basename", 
                "rl_forced_update_display", 
                "lldpctl_watch_callback", 
                "fflush", 
                "localtime", 
                "lldpctl_atom_get_str", 
                "uname", 
                "snprintf", 
                "xmlTextWriterStartDocument", 
                "time", 
                "strcmp", 
                "xmlTextWriterEndDocument", 
                "__libc_start_main", 
                "lldpctl_atom_create", 
                "xmlTextWriterWriteString", 
                "__asprintf_chk", 
                "fopen", 
                "tzset", 
                "__ctype_tolower_loc", 
                "strrchr", 
                "free", 
                "__errno_location", 
                "lldpctl_atom_get_buffer", 
                "xmlTextWriterWriteFormatAttribute", 
                "__vasprintf_chk", 
                "calloc", 
                "lldpctl_atom_get_int", 
                "xmlFreeTextWriter", 
                "lldpctl_watch", 
                "lldpctl_atom_set", 
                "isatty", 
                "__snprintf_chk", 
                "fputs", 
                "strchr", 
                "xmlTextWriterStartElement", 
                "lldpctl_get_configuration", 
                "_ITM_registerTMCloneTable", 
                "exit", 
                "xmlFreeDoc", 
                "_ITM_deregisterTMCloneTable", 
                "readline", 
                "signal", 
                "lldpctl_atom_set_int", 
                "lldpctl_last_error", 
                "xmlTextWriterSetIndent"
            ], 
            "rpm": "lldpd-0.9.8-1.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "yes", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/sbin/lldpcli"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " Unspecified", 
            "Name": " lldpd", 
            "License": " ISC", 
            "URL": " https://vincentbernat.github.io/lldpd/", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildvm-07.phx2.fedoraproject.org", 
            "Description": "\nLLDP is an industry standard protocol designed to supplant proprietary\nLink-Layer protocols such as EDP or CDP. The goal of LLDP is to provide\nan inter-vendor compatible mechanism to deliver Link-Layer notifications\nto adjacent network devices.\n", 
            "Build Date": " Mon 21 Aug 2017 05:31:26 AM EDT", 
            "Source RPM": " lldpd-0.9.8-1.fc27.src.rpm", 
            "Version": " 0.9.8", 
            "Architecture": " i686", 
            "Signature": " RSA/SHA256, Mon 21 Aug 2017 05:35:29 AM EDT, Key ID f55e7430f5282ee4", 
            "Release": " 1.fc27", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " ISC-licensed implementation of LLDP", 
            "Size": " 440024"
        }
    }
}