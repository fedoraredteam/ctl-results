{
    "results": {
        "usr/lib/infinoted-0_7/plugins/libinfinoted-plugin-note-text_so": {
            "report-functions": [
                "infd_directory_add_plugin", 
                "_ITM_registerTMCloneTable", 
                "__gmon_start__", 
                "inf_text_filesystem_format_read", 
                "g_assertion_message_expr", 
                "__cxa_finalize", 
                "inf_text_filesystem_format_write", 
                "inf_user_table_new", 
                "g_object_unref", 
                "g_type_check_instance_cast", 
                "g_type_check_instance_is_a", 
                "inf_text_session_new", 
                "infd_filesystem_storage_get_type", 
                "inf_text_buffer_get_type", 
                "g_quark_from_static_string", 
                "_inf_gettext", 
                "inf_session_get_buffer", 
                "infinoted_plugin_manager_get_directory", 
                "infd_directory_remove_plugin", 
                "inf_session_get_user_table", 
                "inf_text_session_new_with_user_table", 
                "inf_session_get_type", 
                "_ITM_deregisterTMCloneTable"
            ], 
            "rpm": "infinoted-0.7.1-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: 'NoneType' object is not iterable"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "no, not found!", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/infinoted-0.7/plugins/libinfinoted-plugin-note-text.so"
        }, 
        "usr/lib/infinoted-0_7/plugins/libinfinoted-plugin-document-stream_so": {
            "report-functions": [
                "accept", 
                "infinoted_plugin_manager_get_log", 
                "_ITM_deregisterTMCloneTable", 
                "g_free", 
                "fcntl", 
                "close", 
                "inf_chat_buffer_get_type", 
                "_inf_gettext", 
                "inf_text_buffer_destroy_iter", 
                "g_strndup", 
                "inf_text_chunk_get_text", 
                "inf_text_buffer_iter_get_bytes", 
                "g_quark_from_static_string", 
                "inf_io_remove_watch", 
                "inf_session_proxy_join_user", 
                "recv", 
                "g_object_get", 
                "inf_browser_subscribe", 
                "inf_signal_handlers_disconnect_by_func", 
                "inf_session_proxy_get_type", 
                "listen", 
                "g_slist_prepend", 
                "inf_browser_explore", 
                "__gmon_start__", 
                "infinoted_log_warning", 
                "g_type_check_instance_is_a", 
                "inf_browser_get_root", 
                "__cxa_finalize", 
                "inf_browser_is_subdirectory", 
                "inf_text_buffer_create_begin_iter", 
                "bind", 
                "inf_text_buffer_iter_get_text", 
                "inf_signal_handlers_block_by_func", 
                "inf_text_chunk_get_length", 
                "inf_io_add_watch", 
                "inf_chat_session_get_type", 
                "g_slice_alloc", 
                "inf_request_result_get_subscribe_session", 
                "g_slice_free1", 
                "inf_browser_get_session", 
                "inf_browser_get_child", 
                "g_propagate_error", 
                "g_value_set_enum", 
                "inf_user_status_get_type", 
                "inf_chat_buffer_get_n_messages", 
                "send", 
                "infinoted_plugin_manager_get_directory", 
                "g_assertion_message_expr", 
                "inf_text_session_get_type", 
                "getsockopt", 
                "inf_browser_get_type", 
                "g_slist_remove", 
                "_ITM_registerTMCloneTable", 
                "socket", 
                "infinoted_plugin_manager_get_io", 
                "g_realloc", 
                "g_value_set_static_string", 
                "inf_session_get_buffer", 
                "g_type_check_instance_cast", 
                "time", 
                "inf_browser_get_node_type", 
                "inf_browser_get_node_name", 
                "g_object_unref", 
                "inf_text_buffer_get_type", 
                "inf_browser_get_pending_request", 
                "g_memdup", 
                "__stack_chk_fail", 
                "inf_chat_buffer_get_message", 
                "inf_browser_get_next", 
                "inf_browser_get_explored", 
                "inf_request_result_get_explore_node", 
                "inf_user_get_name", 
                "strncmp", 
                "g_error_free", 
                "inf_browser_is_ancestor", 
                "g_propagate_prefixed_error", 
                "g_object_ref", 
                "strerror", 
                "inf_text_buffer_iter_next", 
                "g_set_error", 
                "inf_chat_buffer_add_message", 
                "g_set_error_literal", 
                "__errno_location", 
                "g_signal_connect_data", 
                "inf_session_set_user_status", 
                "inf_signal_handlers_unblock_by_func", 
                "strlen", 
                "inf_io_update_watch", 
                "inf_request_result_get_join_user"
            ], 
            "rpm": "infinoted-0.7.1-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: 'NoneType' object is not iterable"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "no, only unprotected functions found!", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/infinoted-0.7/plugins/libinfinoted-plugin-document-stream.so"
        }, 
        "usr/bin/infinoted-0_7": {
            "report-functions": [
                "fflush", 
                "g_option_context_new", 
                "infinoted_plugin_manager_load", 
                "g_key_file_free", 
                "inf_standalone_io_loop", 
                "infinoted_parameter_convert_security_policy", 
                "getgrgid_r", 
                "g_set_error", 
                "g_get_system_config_dirs", 
                "inf_standalone_io_new", 
                "__fprintf_chk", 
                "g_propagate_error", 
                "infd_server_pool_remove_server", 
                "infd_server_pool_add_server", 
                "infinoted_log_error", 
                "g_snprintf", 
                "__xstat", 
                "g_option_context_free", 
                "infinoted_parameter_typed_value_free", 
                "inf_certificate_chain_get_n_certificates", 
                "inf_cert_util_write_dh_params", 
                "inf_certificate_credentials_get", 
                "g_strsplit", 
                "sysconf", 
                "daemon_pid_file_remove", 
                "g_object_set", 
                "g_slice_alloc", 
                "gnutls_x509_privkey_deinit", 
                "_ITM_registerTMCloneTable", 
                "g_build_filename", 
                "inf_local_publisher_get_type", 
                "g_type_check_instance_cast", 
                "putchar", 
                "infinoted_log_info", 
                "infd_xmpp_server_new", 
                "g_get_home_dir", 
                "infd_tcp_server_set_keepalive", 
                "__libc_start_main", 
                "g_type_check_instance_is_a", 
                "pam_end", 
                "exit", 
                "inf_io_get_type", 
                "daemon_ident_from_argv0", 
                "daemon_fork", 
                "infd_xml_server_get_type", 
                "__cxa_finalize", 
                "inf_io_remove_watch", 
                "inf_certificate_credentials_unref", 
                "inf_authentication_detail_error_quark", 
                "inf_standalone_io_loop_running", 
                "umask", 
                "g_get_user_config_dir", 
                "infd_server_pool_new", 
                "inf_xmpp_manager_new", 
                "inf_standalone_io_loop_quit", 
                "g_key_file_set_string_list", 
                "infd_tcp_server_open", 
                "g_malloc", 
                "inf_init", 
                "inf_gnutls_set_error", 
                "malloc", 
                "g_key_file_set_boolean", 
                "daemon_signal_next", 
                "inf_sasl_context_session_continue", 
                "__errno_location", 
                "infd_tcp_server_get_type", 
                "infd_tcp_server_close", 
                "inf_sasl_context_set_callback", 
                "infinoted_util_daemon_pid_file_kill", 
                "inf_discovery_avahi_new", 
                "inf_xmpp_connection_set_sasl_error", 
                "infd_directory_new", 
                "inf_cert_util_write_private_key", 
                "daemon_retval_send", 
                "inf_ip_address_new_raw6", 
                "inf_xmpp_connection_reset_sasl_authentication", 
                "infd_filesystem_storage_get_type", 
                "gnutls_x509_crt_deinit", 
                "g_hash_table_unref", 
                "g_option_group_set_translation_domain", 
                "__printf_chk", 
                "strlen", 
                "g_ptr_array_free", 
                "getpwnam_r", 
                "inf_certificate_credentials_new", 
                "g_realloc", 
                "infinoted_log_warning", 
                "infinoted_parameter_typed_value_new", 
                "infinoted_log_open", 
                "g_slice_free1", 
                "infinoted_util_set_errno_error", 
                "g_hash_table_insert", 
                "pam_authenticate", 
                "infd_tcp_server_bind", 
                "inf_deinit", 
                "g_propagate_prefixed_error", 
                "infd_storage_get_type", 
                "infinoted_parameter_convert_filename", 
                "g_object_get", 
                "g_error_new_literal", 
                "infd_directory_enable_chat", 
                "inf_sasl_context_new", 
                "strtol", 
                "inf_cert_util_create_self_signed_certificate", 
                "infinoted_plugin_manager_new", 
                "g_option_group_new", 
                "inf_sasl_context_session_get_property", 
                "infd_xml_server_close", 
                "pam_start", 
                "g_file_error_quark", 
                "inf_cert_util_read_dh_params", 
                "inf_cert_util_create_dh_params", 
                "inf_communication_manager_new", 
                "inf_ip_address_collate", 
                "_inf_gettext", 
                "inf_cert_util_read_certificate", 
                "inf_ip_address_copy", 
                "daemon_retval_init", 
                "daemon_signal_init", 
                "setlocale", 
                "daemon_pid_file_create", 
                "infinoted_parameter_load_from_key_file", 
                "infinoted_util_daemon_set_global_pid_file_proc", 
                "gnutls_certificate_set_x509_key", 
                "g_hash_table_foreach", 
                "infinoted_log_new", 
                "inf_cert_util_write_certificate", 
                "inf_ip_address_free", 
                "fputs", 
                "g_free", 
                "infinoted_util_create_dirname", 
                "g_hash_table_lookup", 
                "g_key_file_set_integer", 
                "g_option_group_add_entries", 
                "g_key_file_load_from_file", 
                "inf_certificate_chain_get_raw", 
                "g_error_free", 
                "g_key_file_new", 
                "g_key_file_set_string", 
                "getgrnam_r", 
                "infd_directory_foreach_connection", 
                "pam_set_item", 
                "inf_sasl_context_unref", 
                "gnutls_dh_params_deinit", 
                "g_option_context_set_main_group", 
                "daemon_signal_done", 
                "inf_ip_address_get_family", 
                "__stack_chk_fail", 
                "inf_io_add_watch", 
                "g_object_new", 
                "infinoted_parameter_convert_ip_address", 
                "g_strdup_printf", 
                "strcmp", 
                "strerror", 
                "g_get_host_name", 
                "inf_protocol_get_default_port", 
                "infd_server_pool_add_local_publisher", 
                "inf_certificate_chain_new", 
                "g_assertion_message_expr", 
                "g_strdup", 
                "g_strfreev", 
                "daemon_retval_done", 
                "daemon_retval_wait", 
                "inf_cert_util_create_private_key", 
                "infd_filesystem_account_storage_new", 
                "_ITM_deregisterTMCloneTable", 
                "infinoted_parameter_convert_string", 
                "infinoted_parameter_convert_string_list", 
                "__gmon_start__", 
                "infinoted_util_daemon_set_local_pid_file_proc", 
                "g_object_ref", 
                "inf_cert_util_read_private_key", 
                "infd_filesystem_account_storage_set_filesystem", 
                "g_option_context_parse", 
                "inf_authentication_detail_strerror", 
                "infinoted_parameter_convert_port", 
                "daemon_signal_fd", 
                "g_set_error_literal", 
                "inf_certificate_chain_unref", 
                "gnutls_certificate_set_dh_params", 
                "infd_filesystem_storage_new", 
                "g_object_unref", 
                "g_hash_table_new_full"
            ], 
            "rpm": "infinoted-0.7.1-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": {
                    "afCc": 18, 
                    "afC": 381
                }
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "yes", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/bin/infinoted-0.7"
        }, 
        "usr/lib/infinoted-0_7/plugins/libinfinoted-plugin-transformation-protection_so": {
            "report-functions": [
                "infinoted_plugin_manager_get_directory", 
                "infinoted_log_warning", 
                "inf_user_get_id", 
                "_inf_gettext", 
                "inf_user_get_type", 
                "__stack_chk_fail", 
                "inf_adopted_state_vector_to_string", 
                "g_object_unref", 
                "g_free", 
                "_ITM_deregisterTMCloneTable", 
                "_ITM_registerTMCloneTable", 
                "g_signal_connect_data", 
                "g_object_get", 
                "infd_session_proxy_get_type", 
                "inf_adopted_request_get_vector", 
                "inf_adopted_algorithm_get_current", 
                "inf_user_get_name", 
                "inf_adopted_state_vector_vdiff", 
                "inf_user_get_connection", 
                "inf_browser_get_path", 
                "infd_session_proxy_unsubscribe", 
                "__gmon_start__", 
                "inf_adopted_session_get_type", 
                "g_type_check_instance_is_a", 
                "infinoted_plugin_manager_get_log", 
                "inf_browser_get_type", 
                "g_type_check_instance_cast", 
                "__cxa_finalize", 
                "infinoted_parameter_convert_nonnegative", 
                "g_assertion_message_expr", 
                "g_object_ref"
            ], 
            "rpm": "infinoted-0.7.1-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: 'NoneType' object is not iterable"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/infinoted-0.7/plugins/libinfinoted-plugin-transformation-protection.so"
        }, 
        "usr/lib/infinoted-0_7/plugins/libinfinoted-plugin-linekeeper_so": {
            "report-functions": [
                "g_utf8_get_char", 
                "inf_text_buffer_iter_get_bytes", 
                "g_unichar_type", 
                "inf_text_buffer_destroy_iter", 
                "inf_text_buffer_erase_text", 
                "_inf_gettext", 
                "__gmon_start__", 
                "_ITM_registerTMCloneTable", 
                "inf_session_get_status", 
                "g_assertion_message_expr", 
                "g_signal_handlers_unblock_matched", 
                "inf_signal_handlers_disconnect_by_func", 
                "__stack_chk_fail", 
                "g_free", 
                "inf_text_session_join_user", 
                "g_malloc", 
                "infinoted_log_warning", 
                "infinoted_parameter_convert_nonnegative", 
                "inf_text_buffer_get_length", 
                "inf_text_buffer_insert_text", 
                "g_type_check_instance_cast", 
                "inf_text_buffer_iter_prev", 
                "inf_text_buffer_create_end_iter", 
                "inf_request_result_get_join_user", 
                "inf_text_buffer_iter_get_text", 
                "inf_text_buffer_get_type", 
                "inf_text_buffer_iter_get_length", 
                "inf_io_add_dispatch", 
                "inf_io_remove_dispatch", 
                "g_signal_handlers_block_matched", 
                "inf_user_get_flags", 
                "infd_directory_get_io", 
                "g_object_ref", 
                "inf_user_table_foreach_user", 
                "infinoted_plugin_manager_get_directory", 
                "inf_text_buffer_get_encoding", 
                "g_object_unref", 
                "g_object_get", 
                "inf_session_get_buffer", 
                "g_utf8_prev_char", 
                "inf_session_set_user_status", 
                "inf_session_get_user_table", 
                "inf_user_get_status", 
                "g_signal_connect_data", 
                "infinoted_plugin_manager_get_log", 
                "__cxa_finalize"
            ], 
            "rpm": "infinoted-0.7.1-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: 'NoneType' object is not iterable"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/infinoted-0.7/plugins/libinfinoted-plugin-linekeeper.so"
        }, 
        "usr/lib/infinoted-0_7/plugins/libinfinoted-plugin-record_so": {
            "report-functions": [
                "infinoted_plugin_manager_get_directory", 
                "__cxa_finalize", 
                "g_assertion_message_expr", 
                "g_get_home_dir", 
                "infinoted_plugin_manager_get_log", 
                "_ITM_registerTMCloneTable", 
                "g_build_filename", 
                "g_object_set_data", 
                "g_type_check_instance_is_a", 
                "__stack_chk_fail", 
                "_inf_gettext", 
                "g_object_get", 
                "inf_adopted_session_record_new", 
                "g_strdup_printf", 
                "g_type_check_instance_cast", 
                "g_object_unref", 
                "inf_adopted_session_get_type", 
                "inf_browser_get_path", 
                "infinoted_log_warning", 
                "g_free", 
                "g_file_test", 
                "inf_adopted_session_record_start_recording", 
                "infinoted_util_create_dirname", 
                "inf_browser_get_type", 
                "g_path_get_dirname", 
                "g_snprintf", 
                "__gmon_start__", 
                "_ITM_deregisterTMCloneTable"
            ], 
            "rpm": "infinoted-0.7.1-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: 'NoneType' object is not iterable"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/infinoted-0.7/plugins/libinfinoted-plugin-record.so"
        }, 
        "usr/lib/infinoted-0_7/plugins/libinfinoted-plugin-traffic-logging_so": {
            "report-functions": [
                "g_error_free", 
                "__cxa_finalize", 
                "strftime", 
                "_inf_gettext", 
                "inf_signal_handlers_disconnect_by_func", 
                "localtime", 
                "g_object_get", 
                "fputs", 
                "xmlBufferCreate", 
                "__stack_chk_fail", 
                "xmlBufferContent", 
                "xmlSaveClose", 
                "fclose", 
                "g_type_check_instance_cast", 
                "g_path_get_dirname", 
                "xmlSaveToBuffer", 
                "_ITM_registerTMCloneTable", 
                "infinoted_plugin_manager_get_log", 
                "fflush", 
                "g_free", 
                "__fprintf_chk", 
                "g_strdup_printf", 
                "__vfprintf_chk", 
                "strerror", 
                "fopen", 
                "xmlSaveTree", 
                "infinoted_util_create_dirname", 
                "infinoted_parameter_convert_filename", 
                "__gmon_start__", 
                "_ITM_deregisterTMCloneTable", 
                "__errno_location", 
                "g_assertion_message_expr", 
                "fputc", 
                "g_build_filename", 
                "g_get_current_time", 
                "g_strdup", 
                "xmlBufferFree"
            ], 
            "rpm": "infinoted-0.7.1-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: 'NoneType' object is not iterable"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/infinoted-0.7/plugins/libinfinoted-plugin-traffic-logging.so"
        }, 
        "usr/lib/infinoted-0_7/plugins/libinfinoted-plugin-autosave_so": {
            "report-functions": [
                "g_free", 
                "infd_directory_iter_save_session", 
                "inf_signal_handlers_block_by_func", 
                "g_object_unref", 
                "_inf_gettext", 
                "infinoted_plugin_manager_get_log", 
                "infinoted_log_warning", 
                "g_error_free", 
                "inf_buffer_get_modified", 
                "_ITM_deregisterTMCloneTable", 
                "g_spawn_async", 
                "g_object_get", 
                "__stack_chk_fail", 
                "g_type_check_instance_cast", 
                "g_object_ref", 
                "inf_session_get_buffer", 
                "inf_buffer_get_type", 
                "inf_browser_get_type", 
                "inf_io_add_timeout", 
                "g_signal_connect_data", 
                "__gmon_start__", 
                "infinoted_plugin_manager_get_directory", 
                "infinoted_parameter_convert_filename", 
                "infd_directory_get_io", 
                "g_assertion_message_expr", 
                "__cxa_finalize", 
                "inf_browser_get_path", 
                "inf_signal_handlers_unblock_by_func", 
                "inf_buffer_set_modified", 
                "_ITM_registerTMCloneTable", 
                "inf_signal_handlers_disconnect_by_func", 
                "inf_io_remove_timeout"
            ], 
            "rpm": "infinoted-0.7.1-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: 'NoneType' object is not iterable"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/infinoted-0.7/plugins/libinfinoted-plugin-autosave.so"
        }, 
        "usr/lib/infinoted-0_7/plugins/libinfinoted-plugin-logging_so": {
            "report-functions": [
                "__cxa_finalize", 
                "infinoted_plugin_manager_get_log", 
                "xmlSaveToBuffer", 
                "inf_adopted_state_vector_to_string", 
                "inf_certificate_chain_unref", 
                "inf_adopted_request_get_user_id", 
                "xmlSaveTree", 
                "__stack_chk_fail", 
                "inf_adopted_session_get_algorithm", 
                "g_type_check_instance_cast", 
                "xmlBufferFree", 
                "g_free", 
                "inf_adopted_algorithm_get_execute_request", 
                "infinoted_log_error", 
                "g_object_unref", 
                "xmlBufferContent", 
                "g_object_get_data", 
                "g_object_ref", 
                "infinoted_log_info", 
                "__gmon_start__", 
                "g_type_check_instance_is_a", 
                "_inf_gettext", 
                "_ITM_deregisterTMCloneTable", 
                "inf_session_get_user_table", 
                "inf_adopted_session_record_get_type", 
                "g_signal_connect_data", 
                "inf_user_table_lookup_user_by_id", 
                "infinoted_plugin_manager_get_session_info", 
                "inf_browser_get_path", 
                "inf_cert_util_get_dn_by_oid", 
                "g_path_get_basename", 
                "inf_xml_connection_get_type", 
                "inf_signal_handlers_disconnect_by_func", 
                "inf_browser_get_type", 
                "inf_certificate_chain_get_own_certificate", 
                "inf_session_get_type", 
                "infinoted_plugin_manager_get_directory", 
                "_ITM_registerTMCloneTable", 
                "infinoted_log_log", 
                "inf_user_get_name", 
                "inf_adopted_request_get_vector", 
                "g_strdup", 
                "g_strdup_printf", 
                "inf_user_get_connection", 
                "inf_session_get_status", 
                "g_assertion_message_expr", 
                "xmlSaveClose", 
                "g_object_get", 
                "xmlBufferCreate"
            ], 
            "rpm": "infinoted-0.7.1-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: 'NoneType' object is not iterable"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/infinoted-0.7/plugins/libinfinoted-plugin-logging.so"
        }, 
        "usr/lib/infinoted-0_7/plugins/libinfinoted-plugin-dbus_so": {
            "report-functions": [
                "inf_acl_setting_get_type", 
                "inf_browser_get_type", 
                "g_set_error", 
                "g_module_error", 
                "strncmp", 
                "g_mutex_init", 
                "g_variant_new_tuple", 
                "g_variant_ref", 
                "g_signal_connect_data", 
                "__cxa_finalize", 
                "g_assertion_message_expr", 
                "infinoted_plugin_manager_get_directory", 
                "g_slist_prepend", 
                "g_source_set_callback", 
                "g_free", 
                "g_enum_get_value_by_nick", 
                "g_module_make_resident", 
                "inf_browser_add_note", 
                "g_propagate_prefixed_error", 
                "inf_acl_sheet_set_free", 
                "g_thread_try_new", 
                "g_slice_free1", 
                "inf_acl_mask_or1", 
                "g_bus_unown_name", 
                "infinoted_parameter_error_quark", 
                "g_idle_source_new", 
                "g_main_loop_unref", 
                "g_variant_get_child_value", 
                "g_main_context_unref", 
                "inf_browser_explore", 
                "g_variant_iter_next", 
                "g_main_context_push_thread_default", 
                "inf_acl_account_id_to_string", 
                "infinoted_plugin_manager_get_io", 
                "g_type_class_unref", 
                "g_quark_from_static_string", 
                "infinoted_plugin_manager_get_log", 
                "inf_browser_check_acl", 
                "g_module_close", 
                "g_main_context_new", 
                "inf_browser_remove_node", 
                "inf_browser_get_explored", 
                "inf_browser_get_root", 
                "g_variant_builder_add", 
                "g_dbus_method_invocation_return_value", 
                "g_quark_from_string", 
                "g_source_attach", 
                "g_type_check_class_cast", 
                "g_dbus_node_info_unref", 
                "inf_browser_get_pending_request", 
                "g_dbus_method_invocation_return_error_literal", 
                "g_variant_new", 
                "g_type_check_instance_cast", 
                "inf_browser_get_next", 
                "g_dbus_method_invocation_return_gerror", 
                "inf_acl_mask_has", 
                "g_dbus_node_info_new_for_xml", 
                "g_mutex_clear", 
                "g_dbus_node_info_lookup_interface", 
                "g_mutex_lock", 
                "g_main_loop_quit", 
                "g_object_unref", 
                "g_dbus_connection_register_object", 
                "inf_browser_get_acl", 
                "inf_acl_sheet_set_add_sheet", 
                "inf_acl_sheet_set_find_const_sheet", 
                "_ITM_registerTMCloneTable", 
                "g_memdup", 
                "g_bus_own_name", 
                "g_slist_remove", 
                "inf_signal_handlers_disconnect_by_func", 
                "g_slist_delete_link", 
                "g_variant_unref", 
                "inf_browser_set_acl", 
                "g_mutex_unlock", 
                "inf_browser_get_node_name", 
                "g_module_build_path", 
                "g_log", 
                "g_variant_builder_end", 
                "inf_io_add_dispatch", 
                "inf_browser_get_node_type", 
                "g_usleep", 
                "inf_acl_mask_clear", 
                "g_variant_type_checked_", 
                "inf_browser_get_child", 
                "g_signal_handlers_disconnect_matched", 
                "g_variant_get_child", 
                "g_main_loop_new", 
                "g_thread_join", 
                "g_type_class_ref", 
                "g_variant_builder_init", 
                "__stack_chk_fail", 
                "g_object_ref", 
                "__gmon_start__", 
                "inf_browser_is_subdirectory", 
                "g_variant_get_string", 
                "g_strdup", 
                "g_error_free", 
                "inf_acl_sheet_set_new", 
                "g_main_loop_run", 
                "infinoted_parameter_convert_string", 
                "infinoted_log_warning", 
                "inf_acl_account_id_from_string", 
                "_ITM_deregisterTMCloneTable", 
                "g_module_open", 
                "g_variant_iter_loop", 
                "inf_browser_add_subdirectory", 
                "g_main_loop_get_context", 
                "inf_request_result_get_explore_node", 
                "g_variant_iter_init", 
                "g_slice_alloc"
            ], 
            "rpm": "infinoted-0.7.1-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: 'NoneType' object is not iterable"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/infinoted-0.7/plugins/libinfinoted-plugin-dbus.so"
        }, 
        "usr/lib/infinoted-0_7/plugins/libinfinoted-plugin-certificate-auth_so": {
            "report-functions": [
                "g_ptr_array_free", 
                "g_set_error", 
                "__stack_chk_fail", 
                "infinoted_parameter_convert_filename", 
                "inf_cert_util_write_certificate_with_key", 
                "inf_certificate_chain_new", 
                "infinoted_plugin_manager_get_directory", 
                "infinoted_log_warning", 
                "g_type_check_instance_is_a", 
                "_inf_gettext", 
                "inf_cert_util_read_private_key", 
                "gnutls_certificate_free_cas", 
                "__cxa_finalize", 
                "g_object_unref", 
                "infd_directory_get_support_mask", 
                "g_free", 
                "infinoted_parameter_convert_boolean", 
                "inf_xmpp_connection_certificate_verify_cancel", 
                "g_type_check_instance_cast", 
                "infd_directory_set_certificate", 
                "infinoted_parameter_convert_string", 
                "infinoted_plugin_manager_get_credentials", 
                "infinoted_parameter_convert_flags", 
                "inf_cert_util_read_certificate", 
                "inf_certificate_chain_unref", 
                "inf_browser_remove_acl_account", 
                "__gmon_start__", 
                "inf_certificate_chain_get_n_certificates", 
                "gnutls_certificate_set_x509_trust", 
                "g_quark_from_static_string", 
                "infinoted_log_info", 
                "g_malloc", 
                "g_error_free", 
                "inf_cert_util_create_private_key", 
                "inf_browser_get_type", 
                "inf_browser_get_root", 
                "infinoted_plugin_manager_get_log", 
                "g_object_ref", 
                "gnutls_x509_crt_list_verify", 
                "inf_xmpp_connection_set_certificate_callback", 
                "inf_xmpp_connection_get_type", 
                "g_assertion_message_expr", 
                "gnutls_x509_crt_deinit", 
                "inf_certificate_chain_get_raw", 
                "_ITM_registerTMCloneTable", 
                "g_set_error_literal", 
                "inf_signal_handlers_disconnect_by_func", 
                "inf_certificate_credentials_get", 
                "inf_cert_util_check_certificate_key", 
                "inf_xmpp_connection_certificate_verify_continue", 
                "_ITM_deregisterTMCloneTable", 
                "inf_gnutls_set_error", 
                "inf_browser_set_acl", 
                "inf_gnutls_certificate_verification_set_error", 
                "gnutls_x509_privkey_deinit"
            ], 
            "rpm": "infinoted-0.7.1-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: 'NoneType' object is not iterable"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/infinoted-0.7/plugins/libinfinoted-plugin-certificate-auth.so"
        }, 
        "usr/lib/infinoted-0_7/plugins/libinfinoted-plugin-note-chat_so": {
            "report-functions": [
                "infd_directory_remove_plugin", 
                "_ITM_deregisterTMCloneTable", 
                "__gmon_start__", 
                "g_object_unref", 
                "inf_session_get_buffer", 
                "g_type_check_instance_cast", 
                "g_type_check_instance_is_a", 
                "inf_chat_buffer_get_type", 
                "infd_directory_add_plugin", 
                "infd_chat_filesystem_format_write", 
                "inf_communication_group_get_type", 
                "infd_filesystem_storage_get_type", 
                "infinoted_plugin_manager_get_directory", 
                "g_quark_from_static_string", 
                "inf_chat_buffer_new", 
                "__cxa_finalize", 
                "g_set_error", 
                "inf_chat_session_new", 
                "infd_chat_filesystem_format_read", 
                "_ITM_registerTMCloneTable", 
                "g_assertion_message_expr"
            ], 
            "rpm": "infinoted-0.7.1-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: 'NoneType' object is not iterable"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "no, not found!", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/infinoted-0.7/plugins/libinfinoted-plugin-note-chat.so"
        }, 
        "usr/lib/infinoted-0_7/plugins/libinfinoted-plugin-directory-sync_so": {
            "report-functions": [
                "infd_directory_get_io", 
                "g_filename_to_utf8", 
                "g_filename_from_utf8", 
                "g_signal_handlers_disconnect_matched", 
                "g_type_check_instance_cast", 
                "g_object_ref", 
                "__cxa_finalize", 
                "infinoted_plugin_manager_get_log", 
                "g_file_set_contents", 
                "inf_session_get_buffer", 
                "g_prefix_error", 
                "_ITM_registerTMCloneTable", 
                "g_getenv", 
                "inf_browser_get_type", 
                "g_spawn_async", 
                "g_object_get", 
                "infinoted_parameter_convert_filename", 
                "inf_text_chunk_get_text", 
                "inf_text_chunk_free", 
                "infinoted_util_create_dirname", 
                "g_file_error_quark", 
                "__gmon_start__", 
                "g_signal_connect_data", 
                "inf_signal_handlers_disconnect_by_func", 
                "g_free", 
                "g_propagate_prefixed_error", 
                "_inf_gettext", 
                "inf_text_buffer_get_length", 
                "infinoted_log_error", 
                "inf_file_util_create_directory", 
                "g_object_unref", 
                "g_assertion_message_expr", 
                "g_build_filename", 
                "infinoted_plugin_manager_get_directory", 
                "g_error_free", 
                "inf_io_remove_timeout", 
                "inf_text_buffer_get_slice", 
                "inf_text_buffer_get_type", 
                "inf_file_util_delete", 
                "__stack_chk_fail", 
                "inf_browser_get_path", 
                "inf_io_add_timeout"
            ], 
            "rpm": "infinoted-0.7.1-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: 'NoneType' object is not iterable"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "unknown, no protectable libc functions used", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/infinoted-0.7/plugins/libinfinoted-plugin-directory-sync.so"
        }, 
        "usr/lib/libinfinoted-plugin-manager-0_7_so_0_0_0": {
            "report-functions": [
                "g_value_set_string", 
                "time", 
                "g_object_get", 
                "__fprintf_chk", 
                "inf_browser_get_root", 
                "g_propagate_error", 
                "g_slist_prepend", 
                "g_strdup", 
                "inf_browser_get_child", 
                "g_object_unref", 
                "infd_directory_get_type", 
                "g_object_new", 
                "inf_file_util_create_directory", 
                "g_signal_emit", 
                "g_type_instance_get_private", 
                "_inf_gettext", 
                "g_string_sized_new", 
                "g_module_error", 
                "g_string_free", 
                "g_object_class_install_property", 
                "g_key_file_get_boolean", 
                "g_key_file_get_integer", 
                "g_log_set_default_handler", 
                "g_intern_static_string", 
                "g_boxed_type_register_static", 
                "g_path_get_dirname", 
                "fopen", 
                "g_build_filename", 
                "g_filename_from_utf8", 
                "g_set_error_literal", 
                "g_value_set_object", 
                "daemon_pid_file_kill_wait", 
                "inf_browser_get_type", 
                "g_slice_free1", 
                "inf_browser_get_next", 
                "g_hash_table_insert", 
                "strerror", 
                "__errno_location", 
                "g_type_register_static_simple", 
                "g_slist_remove", 
                "g_type_from_name", 
                "g_strdup_vprintf", 
                "g_module_close", 
                "abort", 
                "g_type_is_a", 
                "g_value_dup_object", 
                "inf_browser_get_session", 
                "g_strdup_printf", 
                "g_param_spec_boxed", 
                "g_hash_table_size", 
                "g_assertion_message_expr", 
                "inf_browser_get_explored", 
                "g_key_file_get_string", 
                "g_signal_new", 
                "strcmp", 
                "g_strdupv", 
                "g_module_name", 
                "g_rec_mutex_lock", 
                "g_value_set_boxed", 
                "g_rec_mutex_clear", 
                "g_type_add_instance_private", 
                "g_rec_mutex_unlock", 
                "strftime", 
                "__gmon_start__", 
                "g_module_symbol", 
                "g_get_home_dir", 
                "inf_browser_is_subdirectory", 
                "g_value_get_object", 
                "g_type_check_class_cast", 
                "g_rec_mutex_init", 
                "g_slice_alloc", 
                "inf_ip_address_new_from_string", 
                "g_param_spec_string", 
                "g_set_error", 
                "g_object_notify", 
                "fclose", 
                "g_hash_table_lookup", 
                "__stack_chk_fail", 
                "g_param_spec_object", 
                "inf_certificate_credentials_unref", 
                "g_propagate_prefixed_error", 
                "g_type_check_instance_cast", 
                "fflush", 
                "infd_directory_get_io", 
                "g_object_ref", 
                "g_log", 
                "g_error_free", 
                "g_free", 
                "g_hash_table_new", 
                "infd_directory_foreach_connection", 
                "g_hash_table_remove", 
                "inf_signal_handlers_disconnect_by_func", 
                "g_value_dup_boxed", 
                "inf_session_proxy_get_type", 
                "g_module_open", 
                "inf_xml_connection_get_type", 
                "g_key_file_error_quark", 
                "g_quark_from_static_string", 
                "inf_certificate_credentials_get_type", 
                "g_type_class_adjust_private_offset", 
                "g_type_check_instance_is_a", 
                "_ITM_deregisterTMCloneTable", 
                "g_malloc", 
                "g_return_if_fail_warning", 
                "__cxa_finalize", 
                "g_signal_connect_data", 
                "g_type_name", 
                "g_key_file_get_string_list", 
                "daemon_log", 
                "g_once_init_leave", 
                "g_hash_table_unref", 
                "_ITM_registerTMCloneTable", 
                "g_strfreev", 
                "g_type_class_peek_parent", 
                "localtime"
            ], 
            "rpm": "infinoted-0.7.1-3.fc27.i686.rpm", 
            "complexity": {
                "r2aa": {
                    "afCc": null, 
                    "afC": null
                }
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libinfinoted-plugin-manager-0.7.so.0.0.0"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " System Environment/Daemons", 
            "Name": " infinoted", 
            "License": " LGPLv2+", 
            "URL": " http://gobby.0x539.de/trac/wiki/Infinote/Libinfinity", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildvm-19.phx2.fedoraproject.org", 
            "Description": "\nServer daemon for the infinote protocol.\n", 
            "Build Date": " Thu 03 Aug 2017 02:39:57 PM EDT", 
            "Source RPM": " libinfinity-0.7.1-3.fc27.src.rpm", 
            "Version": " 0.7.1", 
            "Architecture": " i686", 
            "Signature": " RSA/SHA256, Fri 04 Aug 2017 09:44:23 AM EDT, Key ID f55e7430f5282ee4", 
            "Release": " 3.fc27", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " Server for the infinote protocol", 
            "Size": " 268354"
        }
    }
}