{
    "results": {
        "usr/lib64/vkmark/xcb_so": {
            "find-libc-functions": [
                "GI___obstack_vprintf", 
                "GI___vasprintf", 
                "GI___vdprintf", 
                "GI___vfprintf", 
                "GI___vfwprintf", 
                "GI___vsnprintf", 
                "GI___vsprintf", 
                "GI___vswprintf", 
                "GI___vsyslog", 
                "__longjmp", 
                "_fprintf", 
                "_printf", 
                "_snprintf", 
                "_sprintf", 
                "_vfprintf", 
                "_vprintf", 
                "_vsnprintf", 
                "_vsprintf", 
                "asprintf", 
                "confstr", 
                "dprintf", 
                "explicit_bzero", 
                "fdelt", 
                "fgets", 
                "fgets_unlocked", 
                "fgetws", 
                "fgetws_unlocked", 
                "fprintf", 
                "fread", 
                "fread_unlocked", 
                "fwprintf", 
                "getcwd", 
                "getdomainname", 
                "getgroups", 
                "gethostname", 
                "getlogin_r", 
                "gets", 
                "getwd", 
                "longjmp", 
                "mbsnrtowcs", 
                "mbsrtowcs", 
                "mbstowcs", 
                "memcpy", 
                "memmove", 
                "mempcpy", 
                "memset", 
                "obstack_printf", 
                "obstack_vprintf", 
                "poll", 
                "ppoll", 
                "pread64", 
                "pread", 
                "printf", 
                "ptsname_r", 
                "read", 
                "readlink", 
                "readlinkat", 
                "realpath", 
                "recv", 
                "recvfrom", 
                "snprintf", 
                "sprintf", 
                "stpcpy", 
                "stpncpy", 
                "strcat", 
                "strcpy", 
                "strncat", 
                "strncpy", 
                "swprintf", 
                "syslog", 
                "ttyname_r", 
                "vasprintf", 
                "vdprintf", 
                "vfprintf", 
                "vfwprintf", 
                "vprintf", 
                "vsnprintf", 
                "vsprintf", 
                "vswprintf", 
                "vsyslog", 
                "vwprintf", 
                "wcpcpy", 
                "wcpncpy", 
                "wcrtomb", 
                "wcscat", 
                "wcscpy", 
                "wcsncat", 
                "wcsncpy", 
                "wcsnrtombs", 
                "wcsrtombs", 
                "wcstombs", 
                "wctomb", 
                "wmemcpy", 
                "wmemmove", 
                "wmempcpy", 
                "wmemset", 
                "wprintf"
            ], 
            "filename": "usr/lib64/vkmark/xcb.so", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "no, only unprotected functions found!", 
                " Immediate binding": "yes"
            }, 
            "report-functions": [
                "strlen", 
                "vkGetSwapchainImagesKHR", 
                "__cxa_guard_release", 
                "vkCreateSwapchainKHR", 
                "_ZSt24__throw_invalid_argumentPKc", 
                "_ZSt25__throw_bad_function_callv", 
                "_ZN3Log4infoEPKcz", 
                "_ZNSt13runtime_errorD1Ev", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm", 
                "vkAcquireNextImageKHR", 
                "xcb_flush", 
                "vkGetPhysicalDeviceSurfaceCapabilitiesKHR", 
                "memcpy", 
                "xcb_icccm_size_hints_set_min_size", 
                "xcb_poll_for_event", 
                "_ZNSt3_V214error_categoryD2Ev", 
                "__errno_location", 
                "_Znwm", 
                "xcb_icccm_set_wm_normal_hints", 
                "__cxa_end_catch", 
                "xcb_intern_atom_reply", 
                "xcb_generate_id", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm", 
                "__stack_chk_fail", 
                "__cxa_throw", 
                "xcb_setup_roots_iterator", 
                "vkDestroySemaphore", 
                "__gxx_personality_v0", 
                "memmove", 
                "vkGetPhysicalDeviceSurfaceSupportKHR", 
                "__cxa_allocate_exception", 
                "__cxa_free_exception", 
                "_ZSt20__throw_length_errorPKc", 
                "vkGetDeviceQueue", 
                "xcb_intern_atom", 
                "_ZSt20__throw_out_of_rangePKc", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcmm", 
                "strtoul", 
                "vkGetPhysicalDeviceXcbPresentationSupportKHR", 
                "_Unwind_Resume", 
                "xcb_unmap_window", 
                "xcb_connection_has_error", 
                "__cxa_finalize", 
                "__cxa_atexit", 
                "xcb_icccm_size_hints_set_max_size", 
                "vkCreateXcbSurfaceKHR", 
                "_ITM_registerTMCloneTable", 
                "_ZSt17__throw_bad_allocv", 
                "vkGetPhysicalDeviceSurfacePresentModesKHR", 
                "memcmp", 
                "xcb_disconnect", 
                "__cxa_pure_virtual", 
                "__cxa_guard_acquire", 
                "_ZdlPvm", 
                "_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition", 
                "__assert_fail", 
                "vkDestroySurfaceKHR", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm", 
                "vkGetPhysicalDeviceSurfaceFormatsKHR", 
                "xcb_map_window", 
                "xcb_icccm_set_wm_protocols", 
                "_ZNKSt3_V214error_category10equivalentERKSt10error_codei", 
                "xcb_connect", 
                "_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", 
                "_ZdlPv", 
                "vkDestroySwapchainKHR", 
                "vkQueuePresentKHR", 
                "_ZN3Log5debugEPKcz", 
                "_ZNKSt3_V214error_category10_M_messageB5cxx11Ei", 
                "xcb_get_setup", 
                "__cxa_rethrow", 
                "__gmon_start__", 
                "vkCreateSemaphore", 
                "xcb_icccm_set_wm_name", 
                "_ITM_deregisterTMCloneTable", 
                "vkDeviceWaitIdle", 
                "_ZNSt12system_errorD2Ev", 
                "vkGetPhysicalDeviceQueueFamilyProperties", 
                "_ZNKSt13runtime_error4whatEv", 
                "__cxa_begin_catch", 
                "free", 
                "_ZNSt13runtime_errorC1EPKc", 
                "_ZN7Options22add_window_system_helpERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", 
                "_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", 
                "xcb_change_property", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev"
            ], 
            "rpm": "vkmark-2017.08-0.1.20170904git0fed663.fc27.x86_64.rpm"
        }, 
        "usr/lib64/vkmark/kms_so": {
            "find-libc-functions": [
                "GI___obstack_vprintf", 
                "GI___vasprintf", 
                "GI___vdprintf", 
                "GI___vfprintf", 
                "GI___vfwprintf", 
                "GI___vsnprintf", 
                "GI___vsprintf", 
                "GI___vswprintf", 
                "GI___vsyslog", 
                "__longjmp", 
                "_fprintf", 
                "_printf", 
                "_snprintf", 
                "_sprintf", 
                "_vfprintf", 
                "_vprintf", 
                "_vsnprintf", 
                "_vsprintf", 
                "asprintf", 
                "confstr", 
                "dprintf", 
                "explicit_bzero", 
                "fdelt", 
                "fgets", 
                "fgets_unlocked", 
                "fgetws", 
                "fgetws_unlocked", 
                "fprintf", 
                "fread", 
                "fread_unlocked", 
                "fwprintf", 
                "getcwd", 
                "getdomainname", 
                "getgroups", 
                "gethostname", 
                "getlogin_r", 
                "gets", 
                "getwd", 
                "longjmp", 
                "mbsnrtowcs", 
                "mbsrtowcs", 
                "mbstowcs", 
                "memcpy", 
                "memmove", 
                "mempcpy", 
                "memset", 
                "obstack_printf", 
                "obstack_vprintf", 
                "poll", 
                "ppoll", 
                "pread64", 
                "pread", 
                "printf", 
                "ptsname_r", 
                "read", 
                "readlink", 
                "readlinkat", 
                "realpath", 
                "recv", 
                "recvfrom", 
                "snprintf", 
                "sprintf", 
                "stpcpy", 
                "stpncpy", 
                "strcat", 
                "strcpy", 
                "strncat", 
                "strncpy", 
                "swprintf", 
                "syslog", 
                "ttyname_r", 
                "vasprintf", 
                "vdprintf", 
                "vfprintf", 
                "vfwprintf", 
                "vprintf", 
                "vsnprintf", 
                "vsprintf", 
                "vswprintf", 
                "vsyslog", 
                "vwprintf", 
                "wcpcpy", 
                "wcpncpy", 
                "wcrtomb", 
                "wcscat", 
                "wcscpy", 
                "wcsncat", 
                "wcsncpy", 
                "wcsnrtombs", 
                "wcsrtombs", 
                "wcstombs", 
                "wctomb", 
                "wmemcpy", 
                "wmemmove", 
                "wmempcpy", 
                "wmemset", 
                "wprintf"
            ], 
            "filename": "usr/lib64/vkmark/kms.so", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "no, only unprotected functions found!", 
                " Immediate binding": "yes"
            }, 
            "report-functions": [
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm", 
                "__gxx_personality_v0", 
                "_Znwm", 
                "drmModeGetConnector", 
                "gbm_create_device", 
                "_ZNSt3_V215system_categoryEv", 
                "_ZNKSt3_V214error_category23default_error_conditionEi", 
                "_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", 
                "drmDropMaster", 
                "__errno_location", 
                "drmHandleEvent", 
                "open64", 
                "__cxa_throw", 
                "vkGetDeviceProcAddr", 
                "drmModePageFlip", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm", 
                "drmModeSetCrtc", 
                "_ZNKSt13runtime_error4whatEv", 
                "poll", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev", 
                "__cxa_guard_release", 
                "__assert_fail", 
                "__cxa_allocate_exception", 
                "vkFreeMemory", 
                "close", 
                "__cxa_free_exception", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_", 
                "__gmon_start__", 
                "_ZNKSt3_V214error_category10_M_messageB5cxx11Ei", 
                "_ITM_registerTMCloneTable", 
                "__cxa_guard_acquire", 
                "drmModeFreeConnector", 
                "drmModeGetEncoder", 
                "__cxa_atexit", 
                "_ZNKSt3_V214error_category10equivalentERKSt10error_codei", 
                "gbm_bo_create", 
                "drmModeGetCrtc", 
                "_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition", 
                "_ZN7Options22add_window_system_helpERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", 
                "_ZN3Log4infoEPKcz", 
                "gbm_bo_get_stride", 
                "_ITM_deregisterTMCloneTable", 
                "drmSetMaster", 
                "drmModeFreeCrtc", 
                "_ZNSt13runtime_errorD1Ev", 
                "__cxa_pure_virtual", 
                "memcmp", 
                "drmModeFreeResources", 
                "_ZNSt13runtime_errorC1EPKc", 
                "_ZNSt12system_errorD2Ev", 
                "drmModeRmFB", 
                "vkDeviceWaitIdle", 
                "vkDestroyImage", 
                "__stack_chk_fail", 
                "_ZdlPvm", 
                "_ZN3Log5debugEPKcz", 
                "_ZNSt12system_errorD1Ev", 
                "strlen", 
                "gbm_device_destroy", 
                "gbm_bo_destroy", 
                "_ZSt25__throw_bad_function_callv", 
                "_Unwind_Resume", 
                "drmModeGetResources", 
                "__cxa_finalize", 
                "gbm_bo_get_fd", 
                "drmModeAddFB2", 
                "drmModeFreeEncoder", 
                "_ZdlPv", 
                "gbm_bo_get_handle", 
                "sigaction"
            ], 
            "rpm": "vkmark-2017.08-0.1.20170904git0fed663.fc27.x86_64.rpm"
        }, 
        "usr/lib64/vkmark/wayland_so": {
            "find-libc-functions": [
                "GI___obstack_vprintf", 
                "GI___vasprintf", 
                "GI___vdprintf", 
                "GI___vfprintf", 
                "GI___vfwprintf", 
                "GI___vsnprintf", 
                "GI___vsprintf", 
                "GI___vswprintf", 
                "GI___vsyslog", 
                "__longjmp", 
                "_fprintf", 
                "_printf", 
                "_snprintf", 
                "_sprintf", 
                "_vfprintf", 
                "_vprintf", 
                "_vsnprintf", 
                "_vsprintf", 
                "asprintf", 
                "confstr", 
                "dprintf", 
                "explicit_bzero", 
                "fdelt", 
                "fgets", 
                "fgets_unlocked", 
                "fgetws", 
                "fgetws_unlocked", 
                "fprintf", 
                "fread", 
                "fread_unlocked", 
                "fwprintf", 
                "getcwd", 
                "getdomainname", 
                "getgroups", 
                "gethostname", 
                "getlogin_r", 
                "gets", 
                "getwd", 
                "longjmp", 
                "mbsnrtowcs", 
                "mbsrtowcs", 
                "mbstowcs", 
                "memcpy", 
                "memmove", 
                "mempcpy", 
                "memset", 
                "obstack_printf", 
                "obstack_vprintf", 
                "poll", 
                "ppoll", 
                "pread64", 
                "pread", 
                "printf", 
                "ptsname_r", 
                "read", 
                "readlink", 
                "readlinkat", 
                "realpath", 
                "recv", 
                "recvfrom", 
                "snprintf", 
                "sprintf", 
                "stpcpy", 
                "stpncpy", 
                "strcat", 
                "strcpy", 
                "strncat", 
                "strncpy", 
                "swprintf", 
                "syslog", 
                "ttyname_r", 
                "vasprintf", 
                "vdprintf", 
                "vfprintf", 
                "vfwprintf", 
                "vprintf", 
                "vsnprintf", 
                "vsprintf", 
                "vswprintf", 
                "vsyslog", 
                "vwprintf", 
                "wcpcpy", 
                "wcpncpy", 
                "wcrtomb", 
                "wcscat", 
                "wcscpy", 
                "wcsncat", 
                "wcsncpy", 
                "wcsnrtombs", 
                "wcsrtombs", 
                "wcstombs", 
                "wctomb", 
                "wmemcpy", 
                "wmemmove", 
                "wmempcpy", 
                "wmemset", 
                "wprintf"
            ], 
            "filename": "usr/lib64/vkmark/wayland.so", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "no, only unprotected functions found!", 
                " Immediate binding": "yes"
            }, 
            "report-functions": [
                "_Znwm", 
                "__cxa_guard_acquire", 
                "_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", 
                "vkGetPhysicalDeviceSurfaceSupportKHR", 
                "__gmon_start__", 
                "__gxx_personality_v0", 
                "wl_display_prepare_read", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc", 
                "vkGetPhysicalDeviceQueueFamilyProperties", 
                "__cxa_free_exception", 
                "vkGetPhysicalDeviceSurfaceFormatsKHR", 
                "vkDestroySemaphore", 
                "vkDestroySwapchainKHR", 
                "__cxa_atexit", 
                "_ZNSt12system_errorD2Ev", 
                "wl_proxy_marshal", 
                "vkAcquireNextImageKHR", 
                "_ZNKSt13runtime_error4whatEv", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm", 
                "_ZNKSt3_V214error_category10equivalentERKSt10error_codei", 
                "wl_proxy_add_listener", 
                "wl_display_read_events", 
                "_ZNSt3_V214error_categoryD2Ev", 
                "_ZSt20__throw_length_errorPKc", 
                "vkDestroySurfaceKHR", 
                "__cxa_rethrow", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev", 
                "__cxa_guard_release", 
                "_ZNKSt3_V214error_category10_M_messageB5cxx11Ei", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcmm", 
                "__cxa_finalize", 
                "wl_proxy_marshal_constructor", 
                "_ZdlPvm", 
                "memmove", 
                "wl_display_roundtrip", 
                "wl_display_dispatch_pending", 
                "vkGetPhysicalDeviceSurfaceCapabilitiesKHR", 
                "wl_display_get_fd", 
                "vkGetSwapchainImagesKHR", 
                "wl_display_disconnect", 
                "_ITM_deregisterTMCloneTable", 
                "vkGetPhysicalDeviceWaylandPresentationSupportKHR", 
                "__assert_fail", 
                "vkDeviceWaitIdle", 
                "_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", 
                "__cxa_begin_catch", 
                "_ZSt25__throw_bad_function_callv", 
                "wl_display_cancel_read", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm", 
                "wl_display_connect", 
                "vkGetPhysicalDeviceSurfacePresentModesKHR", 
                "wl_display_flush", 
                "__cxa_end_catch", 
                "_ZNSt13runtime_errorD1Ev", 
                "_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition", 
                "_ITM_registerTMCloneTable", 
                "memcpy", 
                "vkCreateSemaphore", 
                "__errno_location", 
                "_ZNSt13runtime_errorC1EPKc", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm", 
                "__cxa_allocate_exception", 
                "__cxa_throw", 
                "__stack_chk_fail", 
                "_ZdlPv", 
                "poll", 
                "_ZSt17__throw_bad_allocv", 
                "vkCreateWaylandSurfaceKHR", 
                "wl_proxy_marshal_constructor_versioned", 
                "_ZNKSt3_V214error_category23default_error_conditionEi", 
                "vkCreateSwapchainKHR", 
                "vkQueuePresentKHR", 
                "wl_proxy_destroy", 
                "_Unwind_Resume", 
                "_ZN3Log5debugEPKcz", 
                "strlen"
            ], 
            "rpm": "vkmark-2017.08-0.1.20170904git0fed663.fc27.x86_64.rpm"
        }, 
        "usr/bin/vkmark": {
            "find-libc-functions": [
                "GI___obstack_vprintf", 
                "GI___vasprintf", 
                "GI___vdprintf", 
                "GI___vfprintf", 
                "GI___vfwprintf", 
                "GI___vsnprintf", 
                "GI___vsprintf", 
                "GI___vswprintf", 
                "GI___vsyslog", 
                "__longjmp", 
                "_fprintf", 
                "_printf", 
                "_snprintf", 
                "_sprintf", 
                "_vfprintf", 
                "_vprintf", 
                "_vsnprintf", 
                "_vsprintf", 
                "asprintf", 
                "confstr", 
                "dprintf", 
                "explicit_bzero", 
                "fdelt", 
                "fgets", 
                "fgets_unlocked", 
                "fgetws", 
                "fgetws_unlocked", 
                "fprintf", 
                "fread", 
                "fread_unlocked", 
                "fwprintf", 
                "getcwd", 
                "getdomainname", 
                "getgroups", 
                "gethostname", 
                "getlogin_r", 
                "gets", 
                "getwd", 
                "longjmp", 
                "mbsnrtowcs", 
                "mbsrtowcs", 
                "mbstowcs", 
                "memcpy", 
                "memmove", 
                "mempcpy", 
                "memset", 
                "obstack_printf", 
                "obstack_vprintf", 
                "poll", 
                "ppoll", 
                "pread64", 
                "pread", 
                "printf", 
                "ptsname_r", 
                "read", 
                "readlink", 
                "readlinkat", 
                "realpath", 
                "recv", 
                "recvfrom", 
                "snprintf", 
                "sprintf", 
                "stpcpy", 
                "stpncpy", 
                "strcat", 
                "strcpy", 
                "strncat", 
                "strncpy", 
                "swprintf", 
                "syslog", 
                "ttyname_r", 
                "vasprintf", 
                "vdprintf", 
                "vfprintf", 
                "vfwprintf", 
                "vprintf", 
                "vsnprintf", 
                "vsprintf", 
                "vswprintf", 
                "vsyslog", 
                "vwprintf", 
                "wcpcpy", 
                "wcpncpy", 
                "wcrtomb", 
                "wcscat", 
                "wcscpy", 
                "wcsncat", 
                "wcsncpy", 
                "wcsnrtombs", 
                "wcsrtombs", 
                "wcstombs", 
                "wctomb", 
                "wmemcpy", 
                "wmemmove", 
                "wmempcpy", 
                "wmemset", 
                "wprintf"
            ], 
            "filename": "usr/bin/vkmark", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "yes", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "report-functions": [
                "sigaction", 
                "_ITM_registerTMCloneTable", 
                "dlclose", 
                "vkDestroyDescriptorPool", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc", 
                "vkCmdCopyBufferToImage", 
                "vkCreateImageView", 
                "memmove", 
                "vkCmdBindPipeline", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_", 
                "vkUnmapMemory", 
                "_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", 
                "_ZNSi10_M_extractIjEERSiRT_", 
                "_Unwind_Resume", 
                "vkEnumeratePhysicalDevices", 
                "fileno", 
                "powf", 
                "fmod", 
                "vkCmdClearColorImage", 
                "_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv", 
                "feof", 
                "_ZN6Assimp8Importer18ReadFileFromMemoryEPKvmjPKc", 
                "vkDestroyFramebuffer", 
                "_ZSt17__throw_bad_allocv", 
                "__cxa_end_catch", 
                "vkGetPhysicalDeviceQueueFamilyProperties", 
                "_ZNSo3putEc", 
                "vkGetDeviceQueue", 
                "toupper", 
                "vkGetPhysicalDeviceProperties", 
                "__assert_fail", 
                "_ZSt24__throw_invalid_argumentPKc", 
                "__memcpy_chk", 
                "vkFreeMemory", 
                "_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev", 
                "_ZN6Assimp8Importer8ReadFileEPKcj", 
                "_ZNKSt11logic_error4whatEv", 
                "vkFreeCommandBuffers", 
                "_ZNSt8ios_base4InitD1Ev", 
                "vkDestroySemaphore", 
                "sincos", 
                "isatty", 
                "_ZNSt8ios_baseC2Ev", 
                "_ZNSt6localeD1Ev", 
                "_Znwm", 
                "_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev", 
                "_ZNSt8ios_base4InitC1Ev", 
                "vkCmdCopyBuffer", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm", 
                "dlsym", 
                "_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition", 
                "_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm", 
                "vkGetBufferMemoryRequirements", 
                "_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE7_M_syncEPcmm", 
                "vkCreateDescriptorSetLayout", 
                "_ZNSt13basic_filebufIcSt11char_traitsIcEEC1Ev", 
                "_ZNSt12__basic_fileIcED1Ev", 
                "fread", 
                "vkCreateBuffer", 
                "vkCmdBeginRenderPass", 
                "_ZNSt11logic_errorC1EPKc", 
                "_ZNKSt5ctypeIcE13_M_widen_initEv", 
                "_ZNSt11logic_errorC2EPKc", 
                "atanf", 
                "opendir", 
                "__cxa_guard_abort", 
                "_ZNSt8ios_baseD2Ev", 
                "_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate", 
                "vkDestroyShaderModule", 
                "sqrtf", 
                "clock_gettime", 
                "vkDestroyImageView", 
                "_ZNSi5tellgEv", 
                "_ZNKSt3_V214error_category10equivalentERKSt10error_codei", 
                "closedir", 
                "vkCreateSampler", 
                "__cxa_allocate_exception", 
                "fopen64", 
                "sincosf", 
                "vkCmdDraw", 
                "vkCreateRenderPass", 
                "_ZSt19__throw_logic_errorPKc", 
                "_ZNSt11logic_errorD2Ev", 
                "vkAllocateCommandBuffers", 
                "dlopen", 
                "_ZNSt13basic_filebufIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode", 
                "tanf", 
                "strlen", 
                "_ZNSt11logic_errorD1Ev", 
                "__cxa_begin_catch", 
                "vkDestroyPipelineLayout", 
                "vkAllocateDescriptorSets", 
                "_ZdlPv", 
                "vkCmdBindVertexBuffers", 
                "__cxa_rethrow", 
                "vkDestroyImage", 
                "_ZNSt6localeC1Ev", 
                "_ZNSirsERi", 
                "memcmp", 
                "vkCreateInstance", 
                "vkCreateFramebuffer", 
                "_ZSt16__throw_bad_castv", 
                "vkQueueSubmit", 
                "vkResetFences", 
                "vkCmdEndRenderPass", 
                "realloc", 
                "_ZSt25__throw_bad_function_callv", 
                "malloc", 
                "vkBeginCommandBuffer", 
                "_ZdlPvm", 
                "vkCreateFence", 
                "vkCreateDescriptorPool", 
                "_ZN6Assimp8ImporterC1Ev", 
                "vkMapMemory", 
                "__cxa_pure_virtual", 
                "vkCreateImage", 
                "_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l", 
                "__vsnprintf_chk", 
                "vkGetImageMemoryRequirements", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm", 
                "vkWaitForFences", 
                "vkDestroySampler", 
                "_ZNSt13runtime_errorC1EPKc", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc", 
                "__cxa_throw", 
                "vkCmdBindDescriptorSets", 
                "vkCreateDevice", 
                "vkCreateSemaphore", 
                "readdir64", 
                "_ITM_deregisterTMCloneTable", 
                "_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E", 
                "vkDestroyBuffer", 
                "_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEmmm", 
                "ftell", 
                "vkCmdPipelineBarrier", 
                "_ZSt20__throw_out_of_rangePKc", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEmm", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm", 
                "_ZNSt13basic_filebufIcSt11char_traitsIcEED1Ev", 
                "__cxa_free_exception", 
                "vkUpdateDescriptorSets", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev", 
                "vkCreatePipelineLayout", 
                "vkBindImageMemory", 
                "_ZNK6Assimp8Importer8GetSceneEv", 
                "_ZNSi10_M_extractIfEERSiRT_", 
                "_ZNSt13runtime_errorD1Ev", 
                "_ZNKSt3_V214error_category23default_error_conditionEi", 
                "vkDestroyDevice", 
                "strtof", 
                "vkCreateGraphicsPipelines", 
                "vkEndCommandBuffer", 
                "vkDestroyInstance", 
                "free", 
                "__stack_chk_fail", 
                "vkDeviceWaitIdle", 
                "__cxa_atexit", 
                "_ZSt20__throw_length_errorPKc", 
                "__cxa_finalize", 
                "vkDestroyFence", 
                "__libc_start_main", 
                "getopt_long", 
                "_ZNKSt13runtime_error4whatEv", 
                "_ZNSi5seekgESt4fposI11__mbstate_tE", 
                "_ZNKSt3_V214error_category10_M_messageB5cxx11Ei", 
                "_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", 
                "__gxx_personality_v0", 
                "_ZNSi10_M_extractIdEERSiRT_", 
                "vkGetPhysicalDeviceMemoryProperties", 
                "vkBindBufferMemory", 
                "_ZNSi4readEPcl", 
                "memset", 
                "vkDestroyCommandPool", 
                "__gmon_start__", 
                "__cxa_guard_acquire", 
                "__cxa_guard_release", 
                "fclose", 
                "vkDestroyPipeline", 
                "vkDestroyRenderPass", 
                "memcpy", 
                "dlerror", 
                "__errno_location", 
                "_ZN6Assimp8ImporterD1Ev", 
                "fseek", 
                "vkDestroyDescriptorSetLayout", 
                "vkCreateCommandPool", 
                "vkAllocateMemory", 
                "_ZNSo5flushEv", 
                "_ZN6Assimp8Importer18SetPropertyIntegerEPKci", 
                "_ZSt11_Hash_bytesPKvmm", 
                "_ZNSt12system_errorD2Ev"
            ], 
            "rpm": "vkmark-2017.08-0.1.20170904git0fed663.fc27.x86_64.rpm"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " Unspecified", 
            "Name": " vkmark", 
            "License": " LGPLv2+", 
            "URL": " https://github.com/vkmark/vkmark", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildvm-24.phx2.fedoraproject.org", 
            "Description": "\nvkmark is an extensible extensible Vulkan benchmarking suite with targeted,\nconfigurable scenes.\n", 
            "Build Date": " Mon 04 Sep 2017 05:22:28 AM EDT", 
            "Source RPM": " vkmark-2017.08-0.1.20170904git0fed663.fc27.src.rpm", 
            "Version": " 2017.08", 
            "Architecture": " x86_64", 
            "Signature": " RSA/SHA256, Mon 04 Sep 2017 09:47:30 AM EDT, Key ID f55e7430f5282ee4", 
            "Release": " 0.1.20170904git0fed663.fc27", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " Vulkan benchmarking suite", 
            "Size": " 1742027"
        }
    }
}