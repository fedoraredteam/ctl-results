{
    "results": {
        "usr/lib/libmbedcrypto_so_2_6_0": {
            "report-functions": [
                "__stack_chk_fail", 
                "fseek", 
                "__memcpy_chk", 
                "__printf_chk", 
                "fclose", 
                "__cxa_finalize", 
                "strcmp", 
                "_ITM_deregisterTMCloneTable", 
                "_ITM_registerTMCloneTable", 
                "gettimeofday", 
                "fread", 
                "syscall", 
                "__snprintf_chk", 
                "__gmon_start__", 
                "memcmp", 
                "strstr", 
                "fopen", 
                "puts", 
                "alarm", 
                "ferror", 
                "fwrite", 
                "fgets", 
                "snprintf", 
                "ftell", 
                "rand", 
                "putchar", 
                "signal", 
                "uname", 
                "calloc", 
                "strlen", 
                "__memset_chk"
            ], 
            "rpm": "mbedtls-2.6.0-1.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libmbedcrypto.so.2.6.0"
        }, 
        "usr/lib/libmbedx509_so_2_6_0": {
            "report-functions": [
                "mbedtls_asn1_get_tag", 
                "_ITM_registerTMCloneTable", 
                "mbedtls_asn1_write_ia5_string", 
                "mbedtls_asn1_get_bitstring_null", 
                "mbedtls_pk_verify_ext", 
                "mbedtls_asn1_write_algorithm_identifier", 
                "mbedtls_asn1_write_len", 
                "mbedtls_md_get_size", 
                "calloc", 
                "mbedtls_oid_get_sig_alg_desc", 
                "__xstat", 
                "mbedtls_oid_get_oid_by_md", 
                "memcmp", 
                "mbedtls_pk_sign", 
                "__cxa_finalize", 
                "time", 
                "mbedtls_pem_free", 
                "mbedtls_oid_get_md_alg", 
                "mbedtls_pem_init", 
                "snprintf", 
                "mbedtls_md_info_from_type", 
                "mbedtls_asn1_write_mpi", 
                "mbedtls_asn1_write_printable_string", 
                "strncpy", 
                "mbedtls_pk_free", 
                "mbedtls_asn1_free_named_data_list", 
                "mbedtls_oid_get_oid_by_sig_alg", 
                "mbedtls_pk_write_pubkey", 
                "mbedtls_asn1_write_oid", 
                "mbedtls_asn1_write_bitstring", 
                "mbedtls_pk_get_bitlen", 
                "opendir", 
                "mbedtls_asn1_get_alg_null", 
                "mbedtls_asn1_get_bool", 
                "__snprintf_chk", 
                "mbedtls_sha1", 
                "mbedtls_mpi_free", 
                "mbedtls_md_get_name", 
                "mbedtls_oid_get_x509_ext_type", 
                "mbedtls_asn1_get_alg", 
                "puts", 
                "_ITM_deregisterTMCloneTable", 
                "pkcs11h_certificate_freeCertificate", 
                "mbedtls_asn1_write_tag", 
                "mbedtls_pk_write_pubkey_der", 
                "mbedtls_asn1_write_raw_buffer", 
                "__gmon_start__", 
                "mbedtls_asn1_get_len", 
                "strstr", 
                "strncmp", 
                "mbedtls_asn1_get_bitstring", 
                "mbedtls_asn1_store_named_data", 
                "mbedtls_asn1_get_sequence_of", 
                "__stack_chk_fail", 
                "mbedtls_pem_write_buffer", 
                "mbedtls_md", 
                "mbedtls_oid_get_attr_short_name", 
                "mbedtls_pk_get_type", 
                "mbedtls_mpi_init", 
                "mbedtls_mpi_copy", 
                "free", 
                "mbedtls_asn1_get_int", 
                "mbedtls_pk_parse_subpubkey", 
                "mbedtls_pk_get_name", 
                "mbedtls_asn1_write_bool", 
                "__printf_chk", 
                "pkcs11h_certificate_decryptAny", 
                "strlen", 
                "mbedtls_oid_get_extended_key_usage", 
                "gmtime", 
                "mbedtls_pem_read_buffer", 
                "mbedtls_pk_load_file", 
                "pkcs11h_certificate_getCertificateBlob", 
                "mbedtls_oid_get_sig_alg", 
                "closedir", 
                "mbedtls_asn1_write_int"
            ], 
            "rpm": "mbedtls-2.6.0-1.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libmbedx509.so.2.6.0"
        }, 
        "usr/lib/libmbedtls_so_2_6_0": {
            "report-functions": [
                "mbedtls_md_hmac_update", 
                "mbedtls_md_hmac_starts", 
                "mbedtls_md_free", 
                "mbedtls_ecp_group_load", 
                "mbedtls_dhm_free", 
                "strlen", 
                "mbedtls_md5_starts", 
                "connect", 
                "mbedtls_sha512_free", 
                "mbedtls_x509_crt_parse", 
                "mbedtls_cipher_set_padding_mode", 
                "getsockopt", 
                "mbedtls_ecdh_get_params", 
                "mbedtls_md_get_size", 
                "mbedtls_ecdh_make_params", 
                "signal", 
                "mbedtls_cipher_crypt", 
                "mbedtls_md5_finish", 
                "mbedtls_md5_free", 
                "mbedtls_ecdh_free", 
                "mbedtls_ecdh_read_public", 
                "mbedtls_sha512_finish", 
                "mbedtls_cipher_free", 
                "mbedtls_x509_crt_init", 
                "mbedtls_sha1_update", 
                "mbedtls_sha256_update", 
                "mbedtls_x509_crt_check_key_usage", 
                "mbedtls_sha256_finish", 
                "mbedtls_md5_init", 
                "mbedtls_cipher_info_from_type", 
                "mbedtls_dhm_calc_secret", 
                "bind", 
                "memset", 
                "mbedtls_md5_update", 
                "mbedtls_md_process", 
                "mbedtls_mpi_size", 
                "time", 
                "mbedtls_x509_crt_check_extended_key_usage", 
                "mbedtls_mpi_free", 
                "mbedtls_ecdh_calc_secret", 
                "mbedtls_sha512_update", 
                "read", 
                "getsockname", 
                "accept", 
                "mbedtls_cipher_setkey", 
                "mbedtls_x509_crt_parse_der", 
                "mbedtls_ecp_curve_info_from_grp_id", 
                "mbedtls_pk_get_bitlen", 
                "mbedtls_x509_crt_verify_with_profile", 
                "mbedtls_cipher_init", 
                "mbedtls_sha1_finish", 
                "__memcpy_chk", 
                "mbedtls_sha512_clone", 
                "mbedtls_cipher_auth_decrypt", 
                "fcntl", 
                "__errno_location", 
                "mbedtls_pk_debug", 
                "mbedtls_sha1_clone", 
                "mbedtls_dhm_make_params", 
                "mbedtls_md5_clone", 
                "_ITM_deregisterTMCloneTable", 
                "mbedtls_pk_sign", 
                "socket", 
                "write", 
                "mbedtls_cipher_auth_encrypt", 
                "listen", 
                "mbedtls_md_finish", 
                "mbedtls_mpi_copy", 
                "mbedtls_dhm_make_public", 
                "mbedtls_ecdh_init", 
                "mbedtls_sha256_clone", 
                "mbedtls_md_update", 
                "mbedtls_mpi_read_string", 
                "memcmp", 
                "memmove", 
                "mbedtls_md_info_from_type", 
                "__cxa_finalize", 
                "__snprintf_chk", 
                "mbedtls_sha1_free", 
                "free", 
                "mbedtls_dhm_read_params", 
                "mbedtls_md_init", 
                "freeaddrinfo", 
                "mbedtls_md_starts", 
                "mbedtls_sha256_init", 
                "__vsnprintf_chk", 
                "mbedtls_sha512_init", 
                "mbedtls_pk_decrypt", 
                "mbedtls_ecp_curve_info_from_tls_id", 
                "mbedtls_md_hmac_reset", 
                "mbedtls_pk_can_do", 
                "getaddrinfo", 
                "mbedtls_dhm_init", 
                "close", 
                "mbedtls_md_setup", 
                "mbedtls_pk_verify", 
                "mbedtls_ecdh_make_public", 
                "__gmon_start__", 
                "mbedtls_md_hmac_finish", 
                "setsockopt", 
                "mbedtls_cipher_setup", 
                "mbedtls_dhm_read_public", 
                "shutdown", 
                "mbedtls_sha1_starts", 
                "mbedtls_x509_crt_info", 
                "__fdelt_chk", 
                "mbedtls_sha1_init", 
                "mbedtls_ecdh_read_params", 
                "calloc", 
                "mbedtls_sha256_free", 
                "recvfrom", 
                "mbedtls_ecp_grp_id_list", 
                "strcmp", 
                "__stack_chk_fail", 
                "mbedtls_sha512_starts", 
                "select", 
                "mbedtls_sha256_starts", 
                "_ITM_registerTMCloneTable", 
                "snprintf"
            ], 
            "rpm": "mbedtls-2.6.0-1.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libmbedtls.so.2.6.0"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " System Environment/Libraries", 
            "Name": " mbedtls", 
            "License": " ASL 2.0", 
            "URL": " https://tls.mbed.org/", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildvm-08.phx2.fedoraproject.org", 
            "Description": "\nMbed TLS is a light-weight open source cryptographic and SSL/TLS\nlibrary written in C. Mbed TLS makes it easy for developers to include\ncryptographic and SSL/TLS capabilities in their (embedded)\napplications with as little hassle as possible.\nFOSS License Exception: https://tls.mbed.org/foss-license-exception\n", 
            "Build Date": " Tue 29 Aug 2017 07:35:40 AM EDT", 
            "Source RPM": " mbedtls-2.6.0-1.fc27.src.rpm", 
            "Version": " 2.6.0", 
            "Architecture": " i686", 
            "Signature": " RSA/SHA256, Tue 29 Aug 2017 07:41:42 AM EDT, Key ID f55e7430f5282ee4", 
            "Release": " 1.fc27", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " Light-weight cryptographic and SSL/TLS library", 
            "Size": " 720498"
        }
    }
}