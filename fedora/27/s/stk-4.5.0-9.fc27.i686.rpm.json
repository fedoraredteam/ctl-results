{
    "results": {
        "usr/lib/libstk_so_4_4_4": {
            "report-functions": [
                "_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_", 
                "snd_seq_close", 
                "pthread_cond_wait", 
                "_ZdlPvj", 
                "_ZNSolsEi", 
                "snd_pcm_sw_params", 
                "poll", 
                "snd_seq_port_subscribe_set_time_real", 
                "fopen", 
                "write", 
                "jack_connect", 
                "__sprintf_chk", 
                "snd_seq_subscribe_port", 
                "_ZdaPvj", 
                "snd_seq_port_info_set_midi_channels", 
                "jack_port_get_buffer", 
                "jack_midi_clear_buffer", 
                "pthread_attr_setdetachstate", 
                "_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_", 
                "snd_pcm_hw_params_get_channels_min", 
                "_ZNKSt5ctypeIcE13_M_widen_initEv", 
                "snd_seq_queue_tempo_sizeof", 
                "fwrite", 
                "jack_deactivate", 
                "strncmp", 
                "pthread_testcancel", 
                "snd_card_next", 
                "__xstat", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEPKcjj", 
                "snd_midi_event_init", 
                "snd_seq_get_any_client_info", 
                "snd_seq_queue_tempo_set_ppq", 
                "_ZdaPv", 
                "snd_pcm_hw_params_any", 
                "snd_seq_port_info_set_capability", 
                "fread", 
                "pthread_mutex_lock", 
                "pthread_self", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj", 
                "pipe", 
                "sincos", 
                "jack_port_register", 
                "jack_midi_event_reserve", 
                "_ZNSo9_M_insertIdEERSoT_", 
                "jack_ringbuffer_read", 
                "_ZNKSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE3strEv", 
                "_ZSt19__throw_logic_errorPKc", 
                "snd_pcm_hw_params_test_format", 
                "_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc", 
                "snd_seq_open", 
                "rand", 
                "snd_pcm_hw_params_test_rate", 
                "snd_seq_port_info_set_name", 
                "__cxa_atexit", 
                "snd_pcm_state_name", 
                "snd_seq_port_subscribe_set_dest", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc", 
                "snd_seq_create_simple_port", 
                "snd_seq_control_queue", 
                "snd_pcm_sw_params_set_start_threshold", 
                "__errno_location", 
                "_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv", 
                "snd_midi_event_no_status", 
                "snd_seq_queue_tempo_set_tempo", 
                "memcmp", 
                "__memcpy_chk", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEjjPKc", 
                "jack_port_unregister", 
                "snd_seq_unsubscribe_port", 
                "atan2", 
                "snd_seq_alloc_named_queue", 
                "snd_ctl_close", 
                "bind", 
                "pthread_cond_destroy", 
                "snd_seq_client_id", 
                "cos", 
                "snd_seq_free_queue", 
                "snd_pcm_drop", 
                "snd_ctl_open", 
                "jack_get_ports", 
                "snd_seq_port_info_set_type", 
                "snd_midi_event_resize_buffer", 
                "read", 
                "__fdelt_chk", 
                "snd_seq_port_info_get_capability", 
                "recv", 
                "__cxa_call_unexpected", 
                "_ZNSt8ios_baseC2Ev", 
                "_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE7_M_syncEPcjj", 
                "jack_client_open", 
                "jack_ringbuffer_read_space", 
                "pthread_attr_init", 
                "snd_ctl_pcm_info", 
                "_ZNSi4readEPci", 
                "snd_seq_create_port", 
                "_ZNKSt12__basic_fileIcE7is_openEv", 
                "jack_midi_get_event_count", 
                "strtol", 
                "jack_midi_event_get", 
                "gethostbyname", 
                "snd_pcm_sw_params_sizeof", 
                "__cxa_throw_bad_array_new_length", 
                "snd_seq_query_next_client", 
                "snd_seq_set_queue_tempo", 
                "_ZNSt8ios_baseD2Ev", 
                "_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev", 
                "jack_get_sample_rate", 
                "__snprintf_chk", 
                "__cxa_finalize", 
                "snd_seq_set_client_name", 
                "snd_pcm_prepare", 
                "_Znwj", 
                "snd_pcm_info_set_subdevice", 
                "snd_pcm_hw_params_set_channels", 
                "_ZSt20__throw_length_errorPKc", 
                "strchr", 
                "_ZSt24__throw_out_of_range_fmtPKcz", 
                "snd_seq_port_subscribe_free", 
                "_ZNSo3putEc", 
                "snd_seq_port_info_get_port", 
                "snd_seq_delete_port", 
                "__cxa_allocate_exception", 
                "snd_pcm_sw_params_set_silence_size", 
                "snd_pcm_drain", 
                "sin", 
                "snd_seq_port_subscribe_set_sender", 
                "jack_get_time", 
                "_ZNSt9exceptionD2Ev", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcjj", 
                "_ZNSt12__basic_fileIcED1Ev", 
                "pow", 
                "snd_pcm_format_cpu_endian", 
                "select", 
                "snd_seq_client_info_sizeof", 
                "jack_port_by_name", 
                "_ZNSi5seekgExSt12_Ios_Seekdir", 
                "_ZNSt13basic_filebufIcSt11char_traitsIcEEC1Ev", 
                "pthread_attr_setschedpolicy", 
                "_ITM_deregisterTMCloneTable", 
                "_ZSt17__throw_bad_allocv", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev", 
                "close", 
                "snd_pcm_hw_params_get_channels_max", 
                "snd_seq_event_input", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_", 
                "snd_seq_client_info_set_client", 
                "snd_seq_port_info_set_client", 
                "pthread_cond_init", 
                "snd_pcm_writen", 
                "snd_seq_port_info_set_timestamping", 
                "snd_pcm_info_set_stream", 
                "pthread_join", 
                "_ZNSt13basic_filebufIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode", 
                "usleep", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13find_first_ofEPKcjj", 
                "_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E", 
                "__cxa_throw", 
                "snd_seq_drain_output", 
                "_ZSt16__throw_bad_castv", 
                "malloc", 
                "pthread_create", 
                "__cxa_end_catch", 
                "snd_pcm_info_set_device", 
                "snd_seq_poll_descriptors", 
                "fclose", 
                "_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj", 
                "snd_seq_client_info_get_client", 
                "socket", 
                "snd_pcm_hw_params_set_rate_near", 
                "snd_seq_port_info_set_timestamp_real", 
                "snd_pcm_sw_params_set_stop_threshold", 
                "snd_pcm_link", 
                "strtod", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj", 
                "jack_client_close", 
                "snd_strerror", 
                "_ZNSi5tellgEv", 
                "sched_get_priority_min", 
                "snd_pcm_readn", 
                "strlen", 
                "exp", 
                "snd_seq_port_subscribe_set_time_update", 
                "jack_ringbuffer_create", 
                "pthread_exit", 
                "snd_ctl_pcm_next_device", 
                "snd_seq_port_info_set_timestamp_queue", 
                "_ZdlPv", 
                "__stack_chk_fail", 
                "snd_seq_port_subscribe_malloc", 
                "_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode", 
                "listen", 
                "snd_pcm_hw_params", 
                "snd_seq_port_info_set_port", 
                "recvfrom", 
                "snd_seq_port_info_get_type", 
                "memmove", 
                "log", 
                "jack_on_shutdown", 
                "ceilf", 
                "setsockopt", 
                "pthread_mutex_destroy", 
                "pthread_mutex_unlock", 
                "snd_pcm_open", 
                "pthread_cancel", 
                "ftell", 
                "snd_pcm_hw_params_set_access", 
                "snd_pcm_hw_params_set_format", 
                "fmod", 
                "fcntl", 
                "__cxa_rethrow", 
                "snd_pcm_state", 
                "_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_i", 
                "snd_pcm_delay", 
                "snd_pcm_sw_params_set_silence_threshold", 
                "_ZNSo9_M_insertImEERSoT_", 
                "_ZNSt13basic_filebufIcSt11char_traitsIcEED1Ev", 
                "snd_seq_port_info_get_client", 
                "_ZNSt8ios_base4InitC1Ev", 
                "_ZNSt6localeC1Ev", 
                "floor", 
                "connect", 
                "jack_set_xrun_callback", 
                "__cxa_pure_virtual", 
                "snd_midi_event_new", 
                "snd_seq_query_next_port", 
                "fseek", 
                "pthread_attr_destroy", 
                "sendto", 
                "jack_ringbuffer_free", 
                "snd_pcm_sw_params_get_boundary", 
                "sqrt", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj", 
                "_Unwind_Resume", 
                "snd_pcm_hw_params_set_periods_near", 
                "jack_set_error_function", 
                "free", 
                "_ZNSo5flushEv", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj", 
                "snd_seq_event_output", 
                "snd_pcm_hw_params_set_period_size_near", 
                "srand", 
                "snd_midi_event_encode", 
                "sched_get_priority_max", 
                "snd_card_get_name", 
                "snd_midi_event_decode", 
                "snd_pcm_hw_params_sizeof", 
                "snd_pcm_readi", 
                "pthread_mutex_init", 
                "jack_activate", 
                "calloc", 
                "_ZNSt8ios_base4InitD1Ev", 
                "jack_set_process_callback", 
                "snd_pcm_info_sizeof", 
                "__cxa_begin_catch", 
                "send", 
                "jack_ringbuffer_write", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc", 
                "_ITM_registerTMCloneTable", 
                "snd_midi_event_free", 
                "snd_seq_free_event", 
                "snd_seq_client_info_get_name", 
                "_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_", 
                "gettimeofday", 
                "jack_port_name", 
                "__gmon_start__", 
                "jack_get_buffer_size", 
                "snd_seq_event_input_pending", 
                "snd_seq_poll_descriptors_count", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj", 
                "__cxa_free_exception", 
                "_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev", 
                "pthread_cond_signal", 
                "accept", 
                "_ZNSt6localeD1Ev", 
                "perror", 
                "pthread_setschedparam", 
                "snd_pcm_sw_params_current", 
                "strcmp", 
                "_ZNSolsEs", 
                "time", 
                "snd_pcm_writei", 
                "_Znaj", 
                "snd_pcm_close", 
                "snd_seq_port_info_sizeof"
            ], 
            "rpm": "stk-4.5.0-9.fc27.i686.rpm", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "filename": "usr/lib/libstk.so.4.4.4"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " System Environment/Libraries", 
            "Name": " stk", 
            "License": " MIT", 
            "URL": " http://ccrma.stanford.edu/software/stk/", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildvm-14.phx2.fedoraproject.org", 
            "Description": "\nThe Synthesis ToolKit in C++ (STK) is a set of open source audio\nsignal processing and algorithmic synthesis classes written in the C++\nprogramming language. STK was designed to facilitate rapid development\nof music synthesis and audio processing software, with an emphasis on\ncross-platform functionality, realtime control, ease of use, and\neducational example code. The Synthesis ToolKit is extremely portable\n(it's mostly platform-independent C and C++ code), and it's completely\nuser-extensible (all source included, no unusual libraries, and no\nhidden drivers). We like to think that this increases the chances that\nour programs will still work in another 5-10 years. In fact, the\nToolKit has been working continuously for about 10 years now. STK\ncurrently runs with realtime support (audio and MIDI) on Linux,\nMacintosh OS X, and Windows computer platforms. Generic, non-realtime\nsupport has been tested under NeXTStep, Sun, and other platforms and\nshould work with any standard C++ compiler.\n", 
            "Build Date": " Fri 04 Aug 2017 07:11:46 PM EDT", 
            "Source RPM": " stk-4.5.0-9.fc27.src.rpm", 
            "Version": " 4.5.0", 
            "Architecture": " i686", 
            "Signature": " RSA/SHA256, Sat 05 Aug 2017 05:10:21 PM EDT, Key ID f55e7430f5282ee4", 
            "Release": " 9.fc27", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " Synthesis ToolKit in C++", 
            "Size": " 1050476"
        }
    }
}