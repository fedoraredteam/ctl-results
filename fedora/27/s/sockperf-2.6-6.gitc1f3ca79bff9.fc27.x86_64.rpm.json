{
    "results": {
        "usr/bin/sockperf": {
            "find-libc-functions": [
                "GI___obstack_vprintf", 
                "GI___vasprintf", 
                "GI___vdprintf", 
                "GI___vfprintf", 
                "GI___vfwprintf", 
                "GI___vsnprintf", 
                "GI___vsprintf", 
                "GI___vswprintf", 
                "GI___vsyslog", 
                "__longjmp", 
                "_fprintf", 
                "_printf", 
                "_snprintf", 
                "_sprintf", 
                "_vfprintf", 
                "_vprintf", 
                "_vsnprintf", 
                "_vsprintf", 
                "asprintf", 
                "confstr", 
                "dprintf", 
                "explicit_bzero", 
                "fdelt", 
                "fgets", 
                "fgets_unlocked", 
                "fgetws", 
                "fgetws_unlocked", 
                "fprintf", 
                "fread", 
                "fread_unlocked", 
                "fwprintf", 
                "getcwd", 
                "getdomainname", 
                "getgroups", 
                "gethostname", 
                "getlogin_r", 
                "gets", 
                "getwd", 
                "longjmp", 
                "mbsnrtowcs", 
                "mbsrtowcs", 
                "mbstowcs", 
                "memcpy", 
                "memmove", 
                "mempcpy", 
                "memset", 
                "obstack_printf", 
                "obstack_vprintf", 
                "poll", 
                "ppoll", 
                "pread64", 
                "pread", 
                "printf", 
                "ptsname_r", 
                "read", 
                "readlink", 
                "readlinkat", 
                "realpath", 
                "recv", 
                "recvfrom", 
                "snprintf", 
                "sprintf", 
                "stpcpy", 
                "stpncpy", 
                "strcat", 
                "strcpy", 
                "strncat", 
                "strncpy", 
                "swprintf", 
                "syslog", 
                "ttyname_r", 
                "vasprintf", 
                "vdprintf", 
                "vfprintf", 
                "vfwprintf", 
                "vprintf", 
                "vsnprintf", 
                "vsprintf", 
                "vswprintf", 
                "vsyslog", 
                "vwprintf", 
                "wcpcpy", 
                "wcpncpy", 
                "wcrtomb", 
                "wcscat", 
                "wcscpy", 
                "wcsncat", 
                "wcsncpy", 
                "wcsnrtombs", 
                "wcsrtombs", 
                "wcstombs", 
                "wctomb", 
                "wmemcpy", 
                "wmemmove", 
                "wmempcpy", 
                "wmemset", 
                "wprintf"
            ], 
            "filename": "usr/bin/sockperf", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "yes", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "report-functions": [
                "fopen", 
                "dlerror", 
                "_ZNSt12__basic_fileIcED1Ev", 
                "pthread_mutex_init", 
                "sleep", 
                "__gmon_start__", 
                "__stack_chk_fail", 
                "__cxa_guard_abort", 
                "daemon", 
                "pthread_mutexattr_init", 
                "fscanf", 
                "pthread_mutex_destroy", 
                "strtoul", 
                "_ZdlPv", 
                "srand", 
                "getenv", 
                "isprint", 
                "_Unwind_Resume", 
                "_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l", 
                "__gxx_personality_v0", 
                "__cxa_allocate_exception", 
                "regfree", 
                "syscall", 
                "__cxa_atexit", 
                "strtok", 
                "pthread_kill", 
                "_ZNSt11logic_errorC1EPKc", 
                "_ZNSt8ios_base4InitC1Ev", 
                "pthread_mutex_lock", 
                "__cxa_end_catch", 
                "dlopen", 
                "qsort", 
                "backtrace", 
                "strerror", 
                "sscanf", 
                "unsetenv", 
                "_ZNSo9_M_insertImEERSoT_", 
                "inet_aton", 
                "setitimer", 
                "__cxa_guard_release", 
                "_ZNSt6localeD1Ev", 
                "regcomp", 
                "_ITM_registerTMCloneTable", 
                "__cxa_throw", 
                "_ZNSt13basic_filebufIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode", 
                "__cxa_call_unexpected", 
                "__memcpy_chk", 
                "gethostbyname", 
                "__cxa_begin_catch", 
                "strtol", 
                "_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E", 
                "fwrite", 
                "_ZSt19__throw_logic_errorPKc", 
                "_ZNSt8ios_base4InitD1Ev", 
                "__fprintf_chk", 
                "__xstat", 
                "fflush", 
                "_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc", 
                "pthread_setaffinity_np", 
                "perror", 
                "__cxa_finalize", 
                "usleep", 
                "sigaction", 
                "setbuf", 
                "setenv", 
                "_ZNSt12out_of_rangeC1EPKc", 
                "_ZSt16__throw_bad_castv", 
                "__printf_chk", 
                "clock_gettime", 
                "regexec", 
                "puts", 
                "_ZdaPvm", 
                "_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev", 
                "free", 
                "inet_ntoa", 
                "strncmp", 
                "_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_", 
                "_ZNSt8ios_baseD2Ev", 
                "_ZdlPvm", 
                "pthread_self", 
                "__cxa_pure_virtual", 
                "_ZNSt12out_of_rangeD1Ev", 
                "memcpy", 
                "getrlimit", 
                "__snprintf_chk", 
                "_ZdaPv", 
                "_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate", 
                "inet_addr", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm", 
                "__cxa_rethrow", 
                "_ZNSt8ios_baseC2Ev", 
                "rand", 
                "snprintf", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm", 
                "calloc", 
                "strlen", 
                "__fdelt_chk", 
                "pthread_mutexattr_destroy", 
                "__sprintf_chk", 
                "malloc", 
                "fgets", 
                "pthread_detach", 
                "memset", 
                "pthread_mutexattr_settype", 
                "pthread_mutex_unlock", 
                "__cxa_throw_bad_array_new_length", 
                "_ZNKSt5ctypeIcE13_M_widen_initEv", 
                "pthread_attr_init", 
                "_ZNSt13basic_filebufIcSt11char_traitsIcEEC1Ev", 
                "strncpy", 
                "strdup", 
                "strchr", 
                "exit", 
                "_ZSt17__throw_bad_allocv", 
                "dlsym", 
                "_ITM_deregisterTMCloneTable", 
                "fclose", 
                "memcmp", 
                "pthread_create", 
                "strcmp", 
                "putchar", 
                "_Znam", 
                "fcntl", 
                "__errno_location", 
                "_ZNSt9exceptionD2Ev", 
                "_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv", 
                "_Znwm", 
                "sqrt", 
                "__strcpy_chk", 
                "backtrace_symbols", 
                "_ZNSt13basic_filebufIcSt11char_traitsIcEED1Ev", 
                "__cxa_guard_acquire", 
                "pthread_join", 
                "__libc_start_main", 
                "sigemptyset"
            ], 
            "rpm": "sockperf-2.6-6.gitc1f3ca79bff9.fc27.x86_64.rpm"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " Unspecified", 
            "Name": " sockperf", 
            "License": " BSD", 
            "URL": " https://github.com/mellanox/sockperf", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildvm-26.phx2.fedoraproject.org", 
            "Description": "\nsockperf is a network benchmarking utility over socket API that was designed\nfor testing performance (latency and throughput) of high-performance systems\n(it is also good for testing performance of regular networking systems as\nwell). It covers most of the socket API calls and options.\n\nSpecifically, in addition to the standard throughput tests, sockperf, does the\nfollowing:\n\n* Measure latency of each discrete packet at sub-nanosecond resolution (using\n  TSC register that counts CPU ticks with very low overhead).\n\n* Does the above for both ping-pong mode and for latency under load mode. This\n  means that we measure latency of single packets even under load of millions\n  Packets Per Second (without waiting for reply of packet before sending\n  subsequent packet on time)\n\n* Enable spike analysis by providing histogram, with various percentiles of the\n  packets\u2019 latencies (for example: median, min, max, 99% percentile, and more),\n  (this is in addition to average and standard deviation). Also, sockperf\n  provides full log with all packet\u2019s tx/rx times that can be further analyzed\n  with external tools, such as MS-Excel or matplotlib - All this without\n  affecting the benchmark itself.\n\n* Support MANY optional settings for good coverage of socket API and network\n  configurations, while still keeping very low overhead in the fast path to\n  allow cleanest results.\n", 
            "Build Date": " Fri 04 Aug 2017 05:08:50 PM EDT", 
            "Source RPM": " sockperf-2.6-6.gitc1f3ca79bff9.fc27.src.rpm", 
            "Version": " 2.6", 
            "Architecture": " x86_64", 
            "Signature": " RSA/SHA256, Sat 05 Aug 2017 04:16:16 PM EDT, Key ID f55e7430f5282ee4", 
            "Release": " 6.gitc1f3ca79bff9.fc27", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " Network benchmarking utility for testing latency and throughput", 
            "Size": " 4151774"
        }
    }
}