{
    "results": {
        "usr/bin/riparrange": {
            "find-libc-functions": [
                "GI___obstack_vprintf", 
                "GI___vasprintf", 
                "GI___vdprintf", 
                "GI___vfprintf", 
                "GI___vfwprintf", 
                "GI___vsnprintf", 
                "GI___vsprintf", 
                "GI___vswprintf", 
                "GI___vsyslog", 
                "__longjmp", 
                "_fprintf", 
                "_printf", 
                "_snprintf", 
                "_sprintf", 
                "_vfprintf", 
                "_vprintf", 
                "_vsnprintf", 
                "_vsprintf", 
                "asprintf", 
                "confstr", 
                "dprintf", 
                "explicit_bzero", 
                "fdelt", 
                "fgets", 
                "fgets_unlocked", 
                "fgetws", 
                "fgetws_unlocked", 
                "fprintf", 
                "fread", 
                "fread_unlocked", 
                "fwprintf", 
                "getcwd", 
                "getdomainname", 
                "getgroups", 
                "gethostname", 
                "getlogin_r", 
                "gets", 
                "getwd", 
                "longjmp", 
                "mbsnrtowcs", 
                "mbsrtowcs", 
                "mbstowcs", 
                "memcpy", 
                "memmove", 
                "mempcpy", 
                "memset", 
                "obstack_printf", 
                "obstack_vprintf", 
                "poll", 
                "ppoll", 
                "pread64", 
                "pread", 
                "printf", 
                "ptsname_r", 
                "read", 
                "readlink", 
                "readlinkat", 
                "realpath", 
                "recv", 
                "recvfrom", 
                "snprintf", 
                "sprintf", 
                "stpcpy", 
                "stpncpy", 
                "strcat", 
                "strcpy", 
                "strncat", 
                "strncpy", 
                "swprintf", 
                "syslog", 
                "ttyname_r", 
                "vasprintf", 
                "vdprintf", 
                "vfprintf", 
                "vfwprintf", 
                "vprintf", 
                "vsnprintf", 
                "vsprintf", 
                "vswprintf", 
                "vsyslog", 
                "vwprintf", 
                "wcpcpy", 
                "wcpncpy", 
                "wcrtomb", 
                "wcscat", 
                "wcscpy", 
                "wcsncat", 
                "wcsncpy", 
                "wcsnrtombs", 
                "wcsrtombs", 
                "wcstombs", 
                "wctomb", 
                "wmemcpy", 
                "wmemmove", 
                "wmempcpy", 
                "wmemset", 
                "wprintf"
            ], 
            "filename": "usr/bin/riparrange", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "yes", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "report-functions": [
                "strlen", 
                "_ITM_deregisterTMCloneTable", 
                "calloc", 
                "link", 
                "FLAC__stream_decoder_set_md5_checking", 
                "puts", 
                "strdup", 
                "__xstat", 
                "free", 
                "strchr", 
                "mkdir", 
                "__gmon_start__", 
                "fread", 
                "__assert_fail", 
                "__isoc99_sscanf", 
                "strncmp", 
                "feof", 
                "unlink", 
                "FLAC__stream_decoder_init_file", 
                "FLAC__stream_decoder_delete", 
                "__fprintf_chk", 
                "FLAC__stream_decoder_process_until_end_of_metadata", 
                "_ITM_registerTMCloneTable", 
                "__snprintf_chk", 
                "fopen", 
                "FLAC__stream_decoder_new", 
                "__cxa_finalize", 
                "FLAC__stream_decoder_set_metadata_respond_all", 
                "fclose", 
                "fwrite", 
                "exit", 
                "__errno_location", 
                "realloc", 
                "malloc", 
                "rename", 
                "strcmp", 
                "__libc_start_main"
            ], 
            "rpm": "ripright-0.11-8.fc27.x86_64.rpm"
        }, 
        "usr/bin/ripright": {
            "find-libc-functions": [
                "GI___obstack_vprintf", 
                "GI___vasprintf", 
                "GI___vdprintf", 
                "GI___vfprintf", 
                "GI___vfwprintf", 
                "GI___vsnprintf", 
                "GI___vsprintf", 
                "GI___vswprintf", 
                "GI___vsyslog", 
                "__longjmp", 
                "_fprintf", 
                "_printf", 
                "_snprintf", 
                "_sprintf", 
                "_vfprintf", 
                "_vprintf", 
                "_vsnprintf", 
                "_vsprintf", 
                "asprintf", 
                "confstr", 
                "dprintf", 
                "explicit_bzero", 
                "fdelt", 
                "fgets", 
                "fgets_unlocked", 
                "fgetws", 
                "fgetws_unlocked", 
                "fprintf", 
                "fread", 
                "fread_unlocked", 
                "fwprintf", 
                "getcwd", 
                "getdomainname", 
                "getgroups", 
                "gethostname", 
                "getlogin_r", 
                "gets", 
                "getwd", 
                "longjmp", 
                "mbsnrtowcs", 
                "mbsrtowcs", 
                "mbstowcs", 
                "memcpy", 
                "memmove", 
                "mempcpy", 
                "memset", 
                "obstack_printf", 
                "obstack_vprintf", 
                "poll", 
                "ppoll", 
                "pread64", 
                "pread", 
                "printf", 
                "ptsname_r", 
                "read", 
                "readlink", 
                "readlinkat", 
                "realpath", 
                "recv", 
                "recvfrom", 
                "snprintf", 
                "sprintf", 
                "stpcpy", 
                "stpncpy", 
                "strcat", 
                "strcpy", 
                "strncat", 
                "strncpy", 
                "swprintf", 
                "syslog", 
                "ttyname_r", 
                "vasprintf", 
                "vdprintf", 
                "vfprintf", 
                "vfwprintf", 
                "vprintf", 
                "vsnprintf", 
                "vsprintf", 
                "vswprintf", 
                "vsyslog", 
                "vwprintf", 
                "wcpcpy", 
                "wcpncpy", 
                "wcrtomb", 
                "wcscat", 
                "wcscpy", 
                "wcsncat", 
                "wcsncpy", 
                "wcsnrtombs", 
                "wcsrtombs", 
                "wcstombs", 
                "wctomb", 
                "wmemcpy", 
                "wmemmove", 
                "wmempcpy", 
                "wmemset", 
                "wprintf"
            ], 
            "filename": "usr/bin/ripright", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "yes", 
                " Stack protected": "yes", 
                " Fortify Source functions": "yes (some protected functions found)", 
                " Immediate binding": "yes"
            }, 
            "report-functions": [
                "MagickWandTerminus", 
                "__vfprintf_chk", 
                "MagickGetImageDepth", 
                "__stack_chk_fail", 
                "FLAC__metadata_object_new", 
                "curl_easy_setopt", 
                "FLAC__metadata_object_vorbiscomment_resize_comments", 
                "FLAC__stream_encoder_set_bits_per_sample", 
                "fclose", 
                "FLAC__stream_encoder_set_total_samples_estimate", 
                "strcpy", 
                "__snprintf_chk", 
                "strerror", 
                "paranoia_seek", 
                "pthread_create", 
                "cdda_open", 
                "discid_get_submission_url", 
                "cdda_track_channels", 
                "curl_easy_cleanup", 
                "strcmp", 
                "pthread_mutex_unlock", 
                "fdopen", 
                "FLAC__stream_encoder_new", 
                "read", 
                "strlen", 
                "snprintf", 
                "FLAC__stream_encoder_set_compression_level", 
                "strstr", 
                "__assert_fail", 
                "pthread_cond_signal", 
                "system", 
                "__libc_start_main", 
                "calloc", 
                "MagickWandGenesis", 
                "chdir", 
                "ioctl", 
                "FLAC__metadata_object_delete", 
                "FLAC__stream_encoder_set_channels", 
                "pthread_mutex_lock", 
                "discid_read", 
                "FLAC__stream_encoder_finish", 
                "paranoia_read_limited", 
                "cdda_identify", 
                "mkdir", 
                "openlog", 
                "MagickWriteImage", 
                "paranoia_init", 
                "__gmon_start__", 
                "NewMagickWand", 
                "__fread_chk", 
                "strcat", 
                "waitpid", 
                "cdda_close", 
                "discid_get_id", 
                "mkstemp", 
                "discid_new", 
                "FLAC__stream_encoder_process_interleaved", 
                "__errno_location", 
                "__sprintf_chk", 
                "open", 
                "fwrite", 
                "feof", 
                "FLAC__stream_encoder_init_file", 
                "_ITM_deregisterTMCloneTable", 
                "MagickSetImageFormat", 
                "pthread_setschedparam", 
                "paranoia_free", 
                "strncasecmp", 
                "__printf_chk", 
                "strchr", 
                "gettimeofday", 
                "fork", 
                "prctl", 
                "__xstat", 
                "rename", 
                "__ctype_b_loc", 
                "pthread_cond_wait", 
                "cdda_tracks", 
                "DestroyMagickWand", 
                "puts", 
                "curl_easy_init", 
                "close", 
                "paranoia_modeset", 
                "fputc", 
                "cdda_track_firstsector", 
                "FLAC__stream_encoder_set_sample_rate", 
                "strdup", 
                "MagickGetImageWidth", 
                "rewind", 
                "daemon", 
                "realloc", 
                "memmove", 
                "pthread_cond_init", 
                "stpcpy", 
                "sched_get_priority_max", 
                "sleep", 
                "memcpy", 
                "MagickReadImageBlob", 
                "strtol", 
                "sysconf", 
                "__vsyslog_chk", 
                "_ITM_registerTMCloneTable", 
                "exit", 
                "__cxa_finalize", 
                "__vsnprintf_chk", 
                "free", 
                "fopen", 
                "unlink", 
                "FLAC__stream_encoder_set_metadata", 
                "cdda_track_audiop", 
                "malloc", 
                "pthread_mutex_init", 
                "sched_get_priority_min", 
                "curl_easy_perform", 
                "pthread_getschedparam", 
                "__fprintf_chk", 
                "MagickGetImageHeight", 
                "cdda_track_lastsector"
            ], 
            "rpm": "ripright-0.11-8.fc27.x86_64.rpm"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " Unspecified", 
            "Name": " ripright", 
            "License": " GPLv2", 
            "URL": " http://www.mcternan.me.uk/ripright/", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildhw-05.phx2.fedoraproject.org", 
            "Description": "\nRipRight is a minimal CD ripper modeled on autorip. It can run as a daemon and\nwill automatically start ripping any CD found in the drive after which the\ndisc will be ejected. Ripping is always to FLAC lossless audio format with\ntags taken from the community-maintained MusicBrainz lookup service and cover\nart from Amazon where possible. If a disc is unknown to MusicBrainz, the CD\nwill be ejected without ripping and can also be optionally rejected if cover\nart cannot be found.\n\nWith RipRight, ripping a CD collection is just a matter of feeding your Linux\nPC each CD in turn and waiting while they are ripped. CDs which are\nimmediately ejected can be checked with the MusicBrainz Picard tool which\nallows CD identifiers to be uploaded to the website database. Any errors or\ninaccuracies in the database records can also be edited on the MusicBrainz.\n", 
            "Build Date": " Wed 06 Sep 2017 11:01:29 AM EDT", 
            "Source RPM": " ripright-0.11-8.fc27.src.rpm", 
            "Version": " 0.11", 
            "Architecture": " x86_64", 
            "Signature": " RSA/SHA256, Wed 06 Sep 2017 02:03:49 PM EDT, Key ID f55e7430f5282ee4", 
            "Release": " 8.fc27", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " Minimal CD to FLAC ripper", 
            "Size": " 94188"
        }
    }
}