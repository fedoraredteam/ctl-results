{
    "results": {
        "usr/lib64/libdataquay_so_0_9_0": {
            "find-libc-functions": [
                "GI___obstack_vprintf", 
                "GI___vasprintf", 
                "GI___vdprintf", 
                "GI___vfprintf", 
                "GI___vfwprintf", 
                "GI___vsnprintf", 
                "GI___vsprintf", 
                "GI___vswprintf", 
                "GI___vsyslog", 
                "__longjmp", 
                "_fprintf", 
                "_printf", 
                "_snprintf", 
                "_sprintf", 
                "_vfprintf", 
                "_vprintf", 
                "_vsnprintf", 
                "_vsprintf", 
                "asprintf", 
                "confstr", 
                "dprintf", 
                "explicit_bzero", 
                "fdelt", 
                "fgets", 
                "fgets_unlocked", 
                "fgetws", 
                "fgetws_unlocked", 
                "fprintf", 
                "fread", 
                "fread_unlocked", 
                "fwprintf", 
                "getcwd", 
                "getdomainname", 
                "getgroups", 
                "gethostname", 
                "getlogin_r", 
                "gets", 
                "getwd", 
                "longjmp", 
                "mbsnrtowcs", 
                "mbsrtowcs", 
                "mbstowcs", 
                "memcpy", 
                "memmove", 
                "mempcpy", 
                "memset", 
                "obstack_printf", 
                "obstack_vprintf", 
                "poll", 
                "ppoll", 
                "pread64", 
                "pread", 
                "printf", 
                "ptsname_r", 
                "read", 
                "readlink", 
                "readlinkat", 
                "realpath", 
                "recv", 
                "recvfrom", 
                "snprintf", 
                "sprintf", 
                "stpcpy", 
                "stpncpy", 
                "strcat", 
                "strcpy", 
                "strncat", 
                "strncpy", 
                "swprintf", 
                "syslog", 
                "ttyname_r", 
                "vasprintf", 
                "vdprintf", 
                "vfprintf", 
                "vfwprintf", 
                "vprintf", 
                "vsnprintf", 
                "vsprintf", 
                "vswprintf", 
                "vsyslog", 
                "vwprintf", 
                "wcpcpy", 
                "wcpncpy", 
                "wcrtomb", 
                "wcscat", 
                "wcscpy", 
                "wcsncat", 
                "wcsncpy", 
                "wcsnrtombs", 
                "wcsrtombs", 
                "wcstombs", 
                "wctomb", 
                "wmemcpy", 
                "wmemmove", 
                "wmempcpy", 
                "wmemset", 
                "wprintf"
            ], 
            "filename": "usr/lib64/libdataquay.so.0.9.0", 
            "complexity": {
                "r2aa": "failed: ERROR: Cannot find radare2 in PATH"
            }, 
            "hardening-check": {
                " Read-only relocations": "yes", 
                " Position Independent Executable": "no, regular shared library (ignored)", 
                " Stack protected": "yes", 
                " Fortify Source functions": "no, only unprotected functions found!", 
                " Immediate binding": "yes"
            }, 
            "report-functions": [
                "_ZN9QMetaType12registerTypeEPKcPFvPvEPFS2_PKvE", 
                "librdf_node_is_blank", 
                "librdf_free_statement", 
                "_ZN8QVariantaSERKS_", 
                "_ZNK7QString7indexOfERKS_iN2Qt15CaseSensitivityE", 
                "_ZN7QString6removeEii", 
                "_ZN5QFile5closeEv", 
                "strdup", 
                "librdf_model_add_statement", 
                "_ZNK8QVariant3cmpERKS_", 
                "_ZN9QListData6detachEi", 
                "_Znwm", 
                "librdf_new_node_from_typed_literal", 
                "librdf_node_get_literal_value_datatype_uri", 
                "_ZSt19__throw_logic_errorPKc", 
                "_ZN7QObject10timerEventEP11QTimerEvent", 
                "librdf_free_world", 
                "_ZN4QUrlD1Ev", 
                "_ZN11QDataStreamrsERi", 
                "_ZN7QObject11setPropertyEPKcRK8QVariant", 
                "librdf_model_contains_statement", 
                "_ZN7QObject11eventFilterEPS_P6QEvent", 
                "strcmp", 
                "_ZNK11QMetaObject13propertyCountEv", 
                "_ZN11QDataStreamlsEi", 
                "librdf_new_node_from_literal", 
                "librdf_stream_next", 
                "_ZN9QMetaType23registerStreamOperatorsEPKcPFvR11QDataStreamPKvEPFvS3_PvE", 
                "_ZN9QHashData12allocateNodeEi", 
                "_ZN11QMetaObject8addGuardEPP7QObject", 
                "_ZN9QHashData8nextNodeEPNS_4NodeE", 
                "librdf_new_world", 
                "librdf_parser_get_namespaces_seen_prefix", 
                "_ZN6QMutex6unlockEv", 
                "_ZNK7QString7toAsciiEv", 
                "_ZNK4QUrl8toStringE6QFlagsINS_16FormattingOptionEE", 
                "_ZNK7QString3argERKS_iRK5QChar", 
                "__cxa_finalize", 
                "_ZN9QHashData12previousNodeEPNS_4NodeE", 
                "_ZN7QObject10childEventEP11QChildEvent", 
                "_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate", 
                "librdf_stream_get_object", 
                "_ZNK10QByteArray8toBase64Ev", 
                "_ZN7QObjectD2Ev", 
                "_ZN7QString7replaceE5QCharRKS_N2Qt15CaseSensitivityE", 
                "_ZNK7QString8toLatin1Ev", 
                "__cxa_begin_catch", 
                "_ZN9QHashData6rehashEi", 
                "_ZN7QObject5eventEP6QEvent", 
                "_ZN8QVariantC1ERKS_", 
                "librdf_serializer_set_namespace", 
                "_ZN7QStringaSERKS_", 
                "_ZN11QDataStreamC1EP10QByteArray6QFlagsIN9QIODevice12OpenModeFlagEE", 
                "_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii", 
                "librdf_parser_get_namespaces_seen_count", 
                "__cxa_get_exception_ptr", 
                "_ZN9QHashData11free_helperEPFvPNS_4NodeEE", 
                "_ZN5QCharC1Ec", 
                "librdf_new_node_from_uri", 
                "_Z11qUncompressPKhi", 
                "librdf_parser_parse_into_model", 
                "_ZN7QObject11qt_metacastEPKc", 
                "__cxa_free_exception", 
                "_ZNK7QStringeqERKS_", 
                "_ZN7QObject11customEventEP6QEvent", 
                "_ZNK13QMetaProperty12notifySignalEv", 
                "_ZN10QByteArray7reallocEi", 
                "_ZNK7QString4leftEi", 
                "_Z5qHashRK7QString", 
                "__cxa_atexit", 
                "__cxa_call_unexpected", 
                "librdf_statement_get_object", 
                "_ZNK7QString7indexOfE5QChariN2Qt15CaseSensitivityE", 
                "librdf_query_results_finished", 
                "librdf_statement_get_subject", 
                "_ZNK7QObject10metaObjectEv", 
                "librdf_new_uri", 
                "_ZNK8QVariant8userTypeEv", 
                "_ZNK11QMetaObject4castEP7QObject", 
                "_ZN5QFileC1ERK7QString", 
                "librdf_query_results_get_binding_name", 
                "_ZNK7QString6toLongEPbi", 
                "_ZN10QByteArray10fromBase64ERKS_", 
                "_ZN7QString7replaceERKS_S1_N2Qt15CaseSensitivityE", 
                "librdf_new_statement_from_nodes", 
                "_ZdlPv", 
                "librdf_serializer_serialize_model_to_file", 
                "_ZNK11QMetaObject8propertyEi", 
                "_ZNK7QString3argExiiRK5QChar", 
                "_ZN9QListData7append2ERKS_", 
                "_ZNK7QString7toLowerEv", 
                "_ZN7QObject11qt_metacallEN11QMetaObject4CallEiPPv", 
                "_ZNK5QChar7isDigitEv", 
                "librdf_stream_end", 
                "_ZNK7QString10startsWithERKS_N2Qt15CaseSensitivityE", 
                "_ZN5QFileD1Ev", 
                "_ZNK13QMetaProperty8userTypeEv", 
                "_ZNK13QMetaProperty8typeNameEv", 
                "_ZNK7QObject8propertyEPKc", 
                "librdf_free_query_results", 
                "_ZN8QVariantC1EiPKvj", 
                "librdf_statement_get_predicate", 
                "_ZNK8QVariant8toStringEv", 
                "_ZNK13QMetaProperty10isReadableEv", 
                "_ZN9QMetaType15registerTypedefEPKci", 
                "_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_", 
                "random", 
                "_ZN5QFile6removeERK7QString", 
                "_ZNK5QChar8isLetterEv", 
                "__cxa_guard_acquire", 
                "_ZNK13QMetaProperty4nameEv", 
                "_ZN5QFile6renameERK7QStringS2_", 
                "_ZNK5QFile6existsEv", 
                "librdf_parser_get_namespaces_seen_uri", 
                "_ZN18QCryptographicHash4hashERK10QByteArrayNS_9AlgorithmE", 
                "_ZN7QObjectC1EPS_", 
                "_ZN4QUrlC1ERK7QString", 
                "__cxa_rethrow", 
                "_ZN6QMutexD1Ev", 
                "librdf_new_storage", 
                "_ZNK8QVariant6toBoolEv", 
                "librdf_new_parser", 
                "_ZN9QListData6appendEv", 
                "_ZNK13QMetaProperty10isWritableEv", 
                "__gmon_start__", 
                "_ZN11QMetaObject11changeGuardEPP7QObjectS1_", 
                "_ZN7QObject7connectEPKS_PKcS1_S3_N2Qt14ConnectionTypeE", 
                "_ZN7QObjectC2EPS_", 
                "_ITM_deregisterTMCloneTable", 
                "memcpy", 
                "_ZN7QString8fromUtf8EPKci", 
                "_ZNK7QString6toUtf8Ev", 
                "time", 
                "_ZNSt8ios_base4InitD1Ev", 
                "librdf_free_model", 
                "_ZNK7QString11toLocal8BitEv", 
                "_ZN7QString4freeEPNS_4DataE", 
                "_ZN5QFile10encodeNameERK7QString", 
                "_ZN11QMetaObject11removeGuardEPP7QObject", 
                "_ZNSolsEi", 
                "_ZNK8QVariant5toUrlEv", 
                "srandom", 
                "_ZN11QTextStreamD1Ev", 
                "_ZNK13QMetaProperty15hasNotifySignalEv", 
                "_ZNK11QMetaMethod9signatureEv", 
                "_Z9qCompressPKhii", 
                "_ZN9QHashData8freeNodeEPv", 
                "_ZN4QUrlC1Ev", 
                "_ZNK7QString8endsWithERKS_N2Qt15CaseSensitivityE", 
                "_ZNK7QObject10objectNameEv", 
                "_ZN11QTextStreamlsERK7QString", 
                "librdf_query_results_next", 
                "librdf_node_is_resource", 
                "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm", 
                "_ZNK13QMetaProperty8isStoredEPK7QObject", 
                "librdf_query_execute", 
                "librdf_model_remove_statement", 
                "__cxa_guard_release", 
                "_ZNK7QString5rightEi", 
                "_ZNSo5flushEv", 
                "_ZNKSt5ctypeIcE13_M_widen_initEv", 
                "_ZNK7QString8toDoubleEPb", 
                "_ZN7QObject16disconnectNotifyEPKc", 
                "_ZN7QString6appendERKS_", 
                "librdf_query_results_get_binding_value", 
                "_ZNSo3putEc", 
                "__gxx_personality_v0", 
                "strlen", 
                "_ZNK7QString7toULongEPbi", 
                "_ZN9QMetaType8typeNameEi", 
                "_ZNK8QVariant9constDataEv", 
                "_ZN5QFile4openE6QFlagsIN9QIODevice12OpenModeFlagEE", 
                "_ZN11QDataStreamD1Ev", 
                "_ZN4QUrlC1ERKS_", 
                "librdf_node_is_literal", 
                "librdf_uri_as_string", 
                "_ZlsR11QDataStreamRK8QVariant", 
                "_ZN11QTextStreamlsEPKc", 
                "librdf_node_get_uri", 
                "_Z5qFreePv", 
                "__cxa_guard_abort", 
                "librdf_world_open", 
                "_ZrsR11QDataStreamR8QVariant", 
                "librdf_new_serializer", 
                "_ZNK10QByteArray5toHexEv", 
                "_ZN7QString16fromAscii_helperEPKci", 
                "_ZN8QVariantD1Ev", 
                "_ZN9QListData11detach_growEPii", 
                "_ZN6QMutex14unlockInternalEv", 
                "_ZNK7QStringeqERK13QLatin1String", 
                "_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l", 
                "librdf_free_serializer", 
                "_ZNSt8ios_base4InitC1Ev", 
                "_ZN6QMutexC1ENS_13RecursionModeE", 
                "_ZlsR11QDataStreamRK7QString", 
                "librdf_new_node_from_blank_identifier", 
                "_ZN11QMetaObject8activateEP7QObjectPKS_iPPv", 
                "librdf_node_get_blank_identifier", 
                "_ZN7QString13fromLocal8BitEPKci", 
                "librdf_statement_is_complete", 
                "_ZNK8QVariant4typeEv", 
                "librdf_statement_to_string", 
                "_ZSt16__throw_bad_castv", 
                "__cxa_allocate_exception", 
                "__cxa_throw", 
                "__stack_chk_fail", 
                "_ZN6QMutex4lockEv", 
                "librdf_free_storage", 
                "_ZN9QMetaType4typeEPKc", 
                "_ZN7QString9fromAsciiEPKci", 
                "librdf_new_model", 
                "_ZrsR11QDataStreamR7QString", 
                "free", 
                "_ZN7QObject13connectNotifyEPKc", 
                "librdf_free_query", 
                "librdf_query_results_is_bindings", 
                "_ITM_registerTMCloneTable", 
                "librdf_model_find_statements", 
                "_ZNSt9exceptionD2Ev", 
                "librdf_query_results_get_bindings_count", 
                "_ZN6QMutex12lockInternalEv", 
                "__cxa_end_catch", 
                "librdf_free_stream", 
                "librdf_free_parser", 
                "_ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE", 
                "librdf_new_query"
            ], 
            "rpm": "dataquay-0.9-15.fc27.x86_64.rpm"
        }
    }, 
    "metadata": {
        "spec_data": {
            "Group": " Unspecified", 
            "Name": " dataquay", 
            "License": " MIT", 
            "URL": " http://breakfastquay.com/dataquay/", 
            "Relocations": " (not relocatable)", 
            "Install Date": " (not installed)", 
            "Build Host": " buildvm-10.phx2.fedoraproject.org", 
            "Description": "\nDataquay is a free open source library that provides a friendly C++\ninterface to an RDF datastore using Qt4 classes and\ncontainers. Supported datastores are the popular and feature-complete\nRedland and the lightweight Sord.\n\nDataquay is simple to use and easy to integrate. It is principally\naimed at Qt-based applications that would like to use an RDF datastore\nas backing for in-memory project data, to avoid having to invent file\nformats or XML schemas and to make it easy to augment the data with\ndescriptive metadata pulled in from external sources. It's also useful\nfor applications with ad-hoc needs for metadata management using RDF\nsources.\n\nDataquay does not use a separate database, instead using in-memory\nstorage with separate file import and export facilities. Although it\noffers a choice of datastore implementations, the choice is made at\ncompile time: there is no runtime module system to take into account\nwhen deploying your application.\n\nThe Fedora package is configured to use Redland, as recommended by the\ndevelopers for general use.\n", 
            "Build Date": " Wed 02 Aug 2017 03:58:01 PM EDT", 
            "Source RPM": " dataquay-0.9-15.fc27.src.rpm", 
            "Version": " 0.9", 
            "Architecture": " x86_64", 
            "Signature": " RSA/SHA256, Sat 05 Aug 2017 02:02:16 PM EDT, Key ID f55e7430f5282ee4", 
            "Release": " 15.fc27", 
            "Vendor": " Fedora Project", 
            "Packager": " Fedora Project", 
            "Summary": " Simple RDF for C++ and Qt applications", 
            "Size": " 586397"
        }
    }
}